
PraktikumPenggantiUAS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00802000  000032c6  0000335a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000449  0080207c  0080207c  000033d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000033d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010221  00000000  00000000  00003918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f9c  00000000  00000000  00013b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000894d  00000000  00000000  00018ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016b4  00000000  00000000  00021424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033881  00000000  00000000  00022ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007dd7  00000000  00000000  00056359  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000680  00000000  00000000  0005e130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c37c  00000000  00000000  0005e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	bf c7       	rjmp	.+3966   	; 0xfb8 <__vector_14>
      3a:	00 00       	nop
      3c:	ea c7       	rjmp	.+4052   	; 0x1012 <__vector_15>
      3e:	00 00       	nop
      40:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_16>
      44:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_17>
      48:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_18>
      4c:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__vector_19>
      50:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_20>
      54:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_21>
      58:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_22>
      5c:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_23>
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c2       	rjmp	.+1074   	; 0x4d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_47>
      c0:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_48>
      c4:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__vector_49>
      c8:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_50>
      cc:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__vector_51>
      d0:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_52>
      d4:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_53>
      d8:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__vector_54>
      dc:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__vector_55>
      e0:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_56>
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c1       	rjmp	.+946    	; 0x4d0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	d7 c1       	rjmp	.+942    	; 0x4d0 <__bad_interrupt>
     122:	00 00       	nop
     124:	d5 c1       	rjmp	.+938    	; 0x4d0 <__bad_interrupt>
     126:	00 00       	nop
     128:	d3 c1       	rjmp	.+934    	; 0x4d0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_77>
     138:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_78>
     13c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__vector_79>
     140:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_80>
     144:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_81>
     148:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_82>
     14c:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_83>
     150:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_84>
     154:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__vector_85>
     158:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_86>
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__vector_108>
     1b4:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__vector_109>
     1b8:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_110>
     1bc:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__vector_111>
     1c0:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__vector_112>
     1c4:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_113>
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1bdb>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x63c3>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x639b>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x53c3>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1b9b>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e6 ec       	ldi	r30, 0xC6	; 198
     4a6:	f2 e3       	ldi	r31, 0x32	; 50
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ac 37       	cpi	r26, 0x7C	; 124
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	24 e2       	ldi	r18, 0x24	; 36
     4ba:	ac e7       	ldi	r26, 0x7C	; 124
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a5 3c       	cpi	r26, 0xC5	; 197
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 cc 13 	call	0x2798	; 0x2798 <main>
     4cc:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	2e d4       	rcall	.+2140   	; 0xd92 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	76 01       	movw	r14, r12
     53c:	00 e4       	ldi	r16, 0x40	; 64
     53e:	12 e4       	ldi	r17, 0x42	; 66
     540:	2f e0       	ldi	r18, 0x0F	; 15
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	43 e0       	ldi	r20, 0x03	; 3
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	99 e0       	ldi	r25, 0x09	; 9
     550:	4f d4       	rcall	.+2206   	; 0xdf0 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     552:	00 e6       	ldi	r16, 0x60	; 96
     554:	16 e0       	ldi	r17, 0x06	; 6
     556:	ff 24       	eor	r15, r15
     558:	f3 94       	inc	r15
     55a:	f8 01       	movw	r30, r16
     55c:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55e:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	80 ea       	ldi	r24, 0xA0	; 160
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	5d d4       	rcall	.+2234   	; 0xe26 <usart_spi_select_device>
     56c:	f8 01       	movw	r30, r16
     56e:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     570:	e0 ea       	ldi	r30, 0xA0	; 160
     572:	f9 e0       	ldi	r31, 0x09	; 9
     574:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     576:	85 ff       	sbrs	r24, 5
     578:	fd cf       	rjmp	.-6      	; 0x574 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f9 e0       	ldi	r31, 0x09	; 9
     584:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     586:	86 ff       	sbrs	r24, 6
     588:	fd cf       	rjmp	.-6      	; 0x584 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     592:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     594:	be 01       	movw	r22, r28
     596:	6f 5f       	subi	r22, 0xFF	; 255
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	99 e0       	ldi	r25, 0x09	; 9
     59e:	59 d4       	rcall	.+2226   	; 0xe52 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	80 ea       	ldi	r24, 0xA0	; 160
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	3b d4       	rcall	.+2166   	; 0xe26 <usart_spi_select_device>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5bc:	85 ff       	sbrs	r24, 5
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c0:	86 ea       	ldi	r24, 0xA6	; 166
     5c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d8:	80 81       	ld	r24, Z
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e4:	36 d4       	rcall	.+2156   	; 0xe52 <usart_spi_deselect_device>
     5e6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	99 e0       	ldi	r25, 0x09	; 9
     5f4:	18 d4       	rcall	.+2096   	; 0xe26 <usart_spi_select_device>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fc:	e0 ea       	ldi	r30, 0xA0	; 160
     5fe:	f9 e0       	ldi	r31, 0x09	; 9
     600:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     602:	85 ff       	sbrs	r24, 5
     604:	fd cf       	rjmp	.-6      	; 0x600 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60c:	e0 ea       	ldi	r30, 0xA0	; 160
     60e:	f9 e0       	ldi	r31, 0x09	; 9
     610:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     612:	86 ff       	sbrs	r24, 6
     614:	fd cf       	rjmp	.-6      	; 0x610 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     616:	e0 ea       	ldi	r30, 0xA0	; 160
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61e:	80 81       	ld	r24, Z
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	80 ea       	ldi	r24, 0xA0	; 160
     628:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     62a:	13 d4       	rcall	.+2086   	; 0xe52 <usart_spi_deselect_device>
     62c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	be 01       	movw	r22, r28
     632:	6f 5f       	subi	r22, 0xFF	; 255
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	80 ea       	ldi	r24, 0xA0	; 160
     638:	99 e0       	ldi	r25, 0x09	; 9
     63a:	f5 d3       	rcall	.+2026   	; 0xe26 <usart_spi_select_device>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     648:	85 ff       	sbrs	r24, 5
     64a:	fd cf       	rjmp	.-6      	; 0x646 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64c:	82 ea       	ldi	r24, 0xA2	; 162
     64e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     652:	e0 ea       	ldi	r30, 0xA0	; 160
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     658:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     65a:	fd cf       	rjmp	.-6      	; 0x656 <st7565r_init+0x16e>
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f9 e0       	ldi	r31, 0x09	; 9
     660:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     662:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     664:	80 81       	ld	r24, Z
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     670:	f0 d3       	rcall	.+2016   	; 0xe52 <usart_spi_deselect_device>
     672:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 ea       	ldi	r24, 0xA0	; 160
     67e:	99 e0       	ldi	r25, 0x09	; 9
     680:	d2 d3       	rcall	.+1956   	; 0xe26 <usart_spi_select_device>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68e:	85 ff       	sbrs	r24, 5
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     692:	8f e2       	ldi	r24, 0x2F	; 47
     694:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     698:	e0 ea       	ldi	r30, 0xA0	; 160
     69a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <st7565r_init+0x1b4>
     6a2:	e0 ea       	ldi	r30, 0xA0	; 160
     6a4:	f9 e0       	ldi	r31, 0x09	; 9
     6a6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6aa:	80 81       	ld	r24, Z
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b6:	cd d3       	rcall	.+1946   	; 0xe52 <usart_spi_deselect_device>
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	80 ea       	ldi	r24, 0xA0	; 160
     6c4:	99 e0       	ldi	r25, 0x09	; 9
     6c6:	af d3       	rcall	.+1886   	; 0xe26 <usart_spi_select_device>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f9 e0       	ldi	r31, 0x09	; 9
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d4:	85 ff       	sbrs	r24, 5
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d8:	88 ef       	ldi	r24, 0xF8	; 248
     6da:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <st7565r_init+0x1fa>
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ec:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ee:	81 83       	std	Z+1, r24	; 0x01
     6f0:	80 81       	ld	r24, Z
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fc:	aa d3       	rcall	.+1876   	; 0xe52 <usart_spi_deselect_device>
     6fe:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	80 ea       	ldi	r24, 0xA0	; 160
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	8c d3       	rcall	.+1816   	; 0xe26 <usart_spi_select_device>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     71a:	85 ff       	sbrs	r24, 5
     71c:	fd cf       	rjmp	.-6      	; 0x718 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     72a:	fd cf       	rjmp	.-6      	; 0x726 <st7565r_init+0x23e>
     72c:	e0 ea       	ldi	r30, 0xA0	; 160
     72e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     730:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     732:	81 83       	std	Z+1, r24	; 0x01
     734:	80 81       	ld	r24, Z
     736:	be 01       	movw	r22, r28
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	80 ea       	ldi	r24, 0xA0	; 160
     73e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     740:	88 d3       	rcall	.+1808   	; 0xe52 <usart_spi_deselect_device>
     742:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	80 ea       	ldi	r24, 0xA0	; 160
     74e:	99 e0       	ldi	r25, 0x09	; 9
     750:	6a d3       	rcall	.+1748   	; 0xe26 <usart_spi_select_device>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     758:	e0 ea       	ldi	r30, 0xA0	; 160
     75a:	f9 e0       	ldi	r31, 0x09	; 9
     75c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     760:	fd cf       	rjmp	.-6      	; 0x75c <st7565r_init+0x274>
     762:	81 e2       	ldi	r24, 0x21	; 33
     764:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     768:	e0 ea       	ldi	r30, 0xA0	; 160
     76a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76e:	86 ff       	sbrs	r24, 6
     770:	fd cf       	rjmp	.-6      	; 0x76c <st7565r_init+0x284>
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     776:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	80 81       	ld	r24, Z
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	65 d3       	rcall	.+1738   	; 0xe52 <usart_spi_deselect_device>
     788:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	47 d3       	rcall	.+1678   	; 0xe26 <usart_spi_select_device>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <st7565r_init+0x2ba>
     7a8:	81 e8       	ldi	r24, 0x81	; 129
     7aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ae:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b4:	86 ff       	sbrs	r24, 6
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <st7565r_init+0x2ca>
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7bc:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7be:	81 83       	std	Z+1, r24	; 0x01
     7c0:	80 81       	ld	r24, Z
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7cc:	42 d3       	rcall	.+1668   	; 0xe52 <usart_spi_deselect_device>
     7ce:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	be 01       	movw	r22, r28
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	99 e0       	ldi	r25, 0x09	; 9
     7dc:	24 d3       	rcall	.+1608   	; 0xe26 <usart_spi_select_device>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <st7565r_init+0x300>
     7ee:	81 e2       	ldi	r24, 0x21	; 33
     7f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7fa:	86 ff       	sbrs	r24, 6
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <st7565r_init+0x310>
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
     800:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     802:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     804:	81 83       	std	Z+1, r24	; 0x01
     806:	80 81       	ld	r24, Z
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     812:	1f d3       	rcall	.+1598   	; 0xe52 <usart_spi_deselect_device>
     814:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	01 d3       	rcall	.+1538   	; 0xe26 <usart_spi_select_device>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     832:	fd cf       	rjmp	.-6      	; 0x82e <st7565r_init+0x346>
     834:	8f ea       	ldi	r24, 0xAF	; 175
     836:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     842:	fd cf       	rjmp	.-6      	; 0x83e <st7565r_init+0x356>
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f9 e0       	ldi	r31, 0x09	; 9
     848:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     84a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84c:	80 81       	ld	r24, Z
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 ea       	ldi	r24, 0xA0	; 160
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	fc d2       	rcall	.+1528   	; 0xe52 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     85a:	0f 90       	pop	r0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	08 95       	ret

00000870 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     876:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     87a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     87e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     882:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     886:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     88a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     88e:	08 95       	ret

00000890 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     89a:	9f b7       	in	r25, 0x3f	; 63
     89c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     89e:	f8 94       	cli
	return flags;
     8a0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8a2:	e8 2f       	mov	r30, r24
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	e0 59       	subi	r30, 0x90	; 144
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	60 95       	com	r22
     8ac:	80 81       	ld	r24, Z
     8ae:	68 23       	and	r22, r24
     8b0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8b2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	1f 92       	push	r1
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	08 2f       	mov	r16, r24
     8ce:	f6 2e       	mov	r15, r22
     8d0:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8d2:	1a d1       	rcall	.+564    	; 0xb08 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8d4:	0f 70       	andi	r16, 0x0F	; 15
     8d6:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8d8:	8b e2       	ldi	r24, 0x2B	; 43
     8da:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8dc:	be 01       	movw	r22, r28
     8de:	6f 5f       	subi	r22, 0xFF	; 255
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	80 ea       	ldi	r24, 0xA0	; 160
     8e4:	99 e0       	ldi	r25, 0x09	; 9
     8e6:	9f d2       	rcall	.+1342   	; 0xe26 <usart_spi_select_device>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8ee:	e0 ea       	ldi	r30, 0xA0	; 160
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8f4:	95 ff       	sbrs	r25, 5
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8f8:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8fc:	e0 ea       	ldi	r30, 0xA0	; 160
     8fe:	f9 e0       	ldi	r31, 0x09	; 9
     900:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     902:	86 ff       	sbrs	r24, 6
     904:	fd cf       	rjmp	.-6      	; 0x900 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     906:	e0 ea       	ldi	r30, 0xA0	; 160
     908:	f9 e0       	ldi	r31, 0x09	; 9
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     90e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     910:	be 01       	movw	r22, r28
     912:	6f 5f       	subi	r22, 0xFF	; 255
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	80 ea       	ldi	r24, 0xA0	; 160
     918:	99 e0       	ldi	r25, 0x09	; 9
     91a:	9b d2       	rcall	.+1334   	; 0xe52 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     91c:	0f 2d       	mov	r16, r15
     91e:	0f 77       	andi	r16, 0x7F	; 127
     920:	02 95       	swap	r16
     922:	0f 70       	andi	r16, 0x0F	; 15
     924:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     926:	8b e2       	ldi	r24, 0x2B	; 43
     928:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     92a:	be 01       	movw	r22, r28
     92c:	6f 5f       	subi	r22, 0xFF	; 255
     92e:	7f 4f       	sbci	r23, 0xFF	; 255
     930:	80 ea       	ldi	r24, 0xA0	; 160
     932:	99 e0       	ldi	r25, 0x09	; 9
     934:	78 d2       	rcall	.+1264   	; 0xe26 <usart_spi_select_device>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     93c:	e0 ea       	ldi	r30, 0xA0	; 160
     93e:	f9 e0       	ldi	r31, 0x09	; 9
     940:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     942:	85 ff       	sbrs	r24, 5
     944:	fd cf       	rjmp	.-6      	; 0x940 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     946:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     94a:	e0 ea       	ldi	r30, 0xA0	; 160
     94c:	f9 e0       	ldi	r31, 0x09	; 9
     94e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     950:	86 ff       	sbrs	r24, 6
     952:	fd cf       	rjmp	.-6      	; 0x94e <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     954:	e0 ea       	ldi	r30, 0xA0	; 160
     956:	f9 e0       	ldi	r31, 0x09	; 9
     958:	80 e4       	ldi	r24, 0x40	; 64
     95a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     95c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	80 ea       	ldi	r24, 0xA0	; 160
     966:	99 e0       	ldi	r25, 0x09	; 9
     968:	74 d2       	rcall	.+1256   	; 0xe52 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     96a:	0f 2d       	mov	r16, r15
     96c:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     96e:	8b e2       	ldi	r24, 0x2B	; 43
     970:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	80 ea       	ldi	r24, 0xA0	; 160
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	54 d2       	rcall	.+1192   	; 0xe26 <usart_spi_select_device>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     984:	e0 ea       	ldi	r30, 0xA0	; 160
     986:	f9 e0       	ldi	r31, 0x09	; 9
     988:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     98a:	85 ff       	sbrs	r24, 5
     98c:	fd cf       	rjmp	.-6      	; 0x988 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     98e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     992:	e0 ea       	ldi	r30, 0xA0	; 160
     994:	f9 e0       	ldi	r31, 0x09	; 9
     996:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     998:	86 ff       	sbrs	r24, 6
     99a:	fd cf       	rjmp	.-6      	; 0x996 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     99c:	e0 ea       	ldi	r30, 0xA0	; 160
     99e:	f9 e0       	ldi	r31, 0x09	; 9
     9a0:	80 e4       	ldi	r24, 0x40	; 64
     9a2:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9a4:	80 81       	ld	r24, Z
     9a6:	be 01       	movw	r22, r28
     9a8:	6f 5f       	subi	r22, 0xFF	; 255
     9aa:	7f 4f       	sbci	r23, 0xFF	; 255
     9ac:	80 ea       	ldi	r24, 0xA0	; 160
     9ae:	99 e0       	ldi	r25, 0x09	; 9
     9b0:	50 d2       	rcall	.+1184   	; 0xe52 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9b2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	be 01       	movw	r22, r28
     9b8:	6f 5f       	subi	r22, 0xFF	; 255
     9ba:	7f 4f       	sbci	r23, 0xFF	; 255
     9bc:	80 ea       	ldi	r24, 0xA0	; 160
     9be:	99 e0       	ldi	r25, 0x09	; 9
     9c0:	32 d2       	rcall	.+1124   	; 0xe26 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9c8:	e0 ea       	ldi	r30, 0xA0	; 160
     9ca:	f9 e0       	ldi	r31, 0x09	; 9
     9cc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9ce:	85 ff       	sbrs	r24, 5
     9d0:	fd cf       	rjmp	.-6      	; 0x9cc <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9d2:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9d6:	e0 ea       	ldi	r30, 0xA0	; 160
     9d8:	f9 e0       	ldi	r31, 0x09	; 9
     9da:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9dc:	86 ff       	sbrs	r24, 6
     9de:	fd cf       	rjmp	.-6      	; 0x9da <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9e0:	e0 ea       	ldi	r30, 0xA0	; 160
     9e2:	f9 e0       	ldi	r31, 0x09	; 9
     9e4:	80 e4       	ldi	r24, 0x40	; 64
     9e6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9e8:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9f0:	be 01       	movw	r22, r28
     9f2:	6f 5f       	subi	r22, 0xFF	; 255
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	80 ea       	ldi	r24, 0xA0	; 160
     9f8:	99 e0       	ldi	r25, 0x09	; 9
     9fa:	2b d2       	rcall	.+1110   	; 0xe52 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9fc:	0f 90       	pop	r0
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	08 95       	ret

00000a0a <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	1f 92       	push	r1
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a18:	8c e7       	ldi	r24, 0x7C	; 124
     a1a:	90 e2       	ldi	r25, 0x20	; 32
     a1c:	70 d0       	rcall	.+224    	; 0xafe <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a1e:	64 dd       	rcall	.-1336   	; 0x4e8 <st7565r_init>
     a20:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a26:	6f 5f       	subi	r22, 0xFF	; 255
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	80 ea       	ldi	r24, 0xA0	; 160
     a2c:	99 e0       	ldi	r25, 0x09	; 9
     a2e:	fb d1       	rcall	.+1014   	; 0xe26 <usart_spi_select_device>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
     a36:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a38:	f9 e0       	ldi	r31, 0x09	; 9
     a3a:	81 81       	ldd	r24, Z+1	; 0x01
     a3c:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a3e:	fd cf       	rjmp	.-6      	; 0xa3a <gfx_mono_st7565r_init+0x30>
     a40:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a42:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
     a46:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a48:	f9 e0       	ldi	r31, 0x09	; 9
     a4a:	81 81       	ldd	r24, Z+1	; 0x01
     a4c:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a4e:	fd cf       	rjmp	.-6      	; 0xa4a <gfx_mono_st7565r_init+0x40>
     a50:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a52:	f9 e0       	ldi	r31, 0x09	; 9
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	81 83       	std	Z+1, r24	; 0x01
     a58:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a5a:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	80 ea       	ldi	r24, 0xA0	; 160
     a62:	99 e0       	ldi	r25, 0x09	; 9
     a64:	f6 d1       	rcall	.+1004   	; 0xe52 <usart_spi_deselect_device>
     a66:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a68:	0a c0       	rjmp	.+20     	; 0xa7e <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	61 2f       	mov	r22, r17
     a6e:	80 2f       	mov	r24, r16
     a70:	25 df       	rcall	.-438    	; 0x8bc <gfx_mono_st7565r_put_byte>
     a72:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a74:	10 38       	cpi	r17, 0x80	; 128
     a76:	c9 f7       	brne	.-14     	; 0xa6a <gfx_mono_st7565r_init+0x60>
     a78:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a7a:	04 30       	cpi	r16, 0x04	; 4
     a7c:	11 f0       	breq	.+4      	; 0xa82 <gfx_mono_st7565r_init+0x78>
     a7e:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a80:	f4 cf       	rjmp	.-24     	; 0xa6a <gfx_mono_st7565r_init+0x60>
     a82:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <gfx_mono_st7565r_draw_pixel>:
     a8e:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a98:	88 23       	and	r24, r24
     a9a:	4c f1       	brlt	.+82     	; 0xaee <gfx_mono_st7565r_draw_pixel+0x60>
     a9c:	60 32       	cpi	r22, 0x20	; 32
     a9e:	38 f5       	brcc	.+78     	; 0xaee <gfx_mono_st7565r_draw_pixel+0x60>
     aa0:	d4 2f       	mov	r29, r20
     aa2:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     aa4:	f6 2e       	mov	r15, r22
     aa6:	f6 94       	lsr	r15
     aa8:	f6 94       	lsr	r15
     aaa:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	88 e0       	ldi	r24, 0x08	; 8
     ab0:	f8 9e       	mul	r15, r24
     ab2:	60 19       	sub	r22, r0
     ab4:	71 09       	sbc	r23, r1
     ab6:	11 24       	eor	r1, r1
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	8c 01       	movw	r16, r24
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <gfx_mono_st7565r_draw_pixel+0x36>
     ac0:	00 0f       	add	r16, r16
     ac2:	11 1f       	adc	r17, r17
     ac4:	6a 95       	dec	r22
     ac6:	e2 f7       	brpl	.-8      	; 0xac0 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ac8:	6c 2f       	mov	r22, r28
     aca:	8f 2d       	mov	r24, r15
     acc:	2b d0       	rcall	.+86     	; 0xb24 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     ace:	d1 30       	cpi	r29, 0x01	; 1
     ad0:	21 f0       	breq	.+8      	; 0xada <gfx_mono_st7565r_draw_pixel+0x4c>
     ad2:	28 f0       	brcs	.+10     	; 0xade <gfx_mono_st7565r_draw_pixel+0x50>
     ad4:	d2 30       	cpi	r29, 0x02	; 2
     ad6:	31 f0       	breq	.+12     	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x56>
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ada:	80 2b       	or	r24, r16
		break;
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     ade:	00 95       	com	r16
     ae0:	80 23       	and	r24, r16
		break;
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     ae4:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     ae6:	48 2f       	mov	r20, r24
     ae8:	6c 2f       	mov	r22, r28
     aea:	8f 2d       	mov	r24, r15
     aec:	e7 de       	rcall	.-562    	; 0x8bc <gfx_mono_st7565r_put_byte>
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	08 95       	ret

00000afa <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     afa:	14 c0       	rjmp	.+40     	; 0xb24 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     afc:	08 95       	ret

00000afe <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     afe:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <fbpointer>
     b02:	90 93 7d 22 	sts	0x227D, r25	; 0x80227d <fbpointer+0x1>
     b06:	08 95       	ret

00000b08 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b08:	20 91 7c 22 	lds	r18, 0x227C	; 0x80227c <fbpointer>
     b0c:	30 91 7d 22 	lds	r19, 0x227D	; 0x80227d <fbpointer+0x1>
     b10:	90 e8       	ldi	r25, 0x80	; 128
     b12:	89 9f       	mul	r24, r25
     b14:	20 0d       	add	r18, r0
     b16:	31 1d       	adc	r19, r1
     b18:	11 24       	eor	r1, r1
     b1a:	f9 01       	movw	r30, r18
     b1c:	e6 0f       	add	r30, r22
     b1e:	f1 1d       	adc	r31, r1
     b20:	40 83       	st	Z, r20
     b22:	08 95       	ret

00000b24 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b24:	20 91 7c 22 	lds	r18, 0x227C	; 0x80227c <fbpointer>
     b28:	30 91 7d 22 	lds	r19, 0x227D	; 0x80227d <fbpointer+0x1>
     b2c:	90 e8       	ldi	r25, 0x80	; 128
     b2e:	89 9f       	mul	r24, r25
     b30:	20 0d       	add	r18, r0
     b32:	31 1d       	adc	r19, r1
     b34:	11 24       	eor	r1, r1
     b36:	f9 01       	movw	r30, r18
     b38:	e6 0f       	add	r30, r22
     b3a:	f1 1d       	adc	r31, r1
}
     b3c:	80 81       	ld	r24, Z
     b3e:	08 95       	ret

00000b40 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	e4 2f       	mov	r30, r20
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	e8 0f       	add	r30, r24
     b50:	f1 1d       	adc	r31, r1
     b52:	e1 38       	cpi	r30, 0x81	; 129
     b54:	f1 05       	cpc	r31, r1
     b56:	1c f0       	brlt	.+6      	; 0xb5e <gfx_mono_generic_draw_horizontal_line+0x1e>
     b58:	c0 e8       	ldi	r28, 0x80	; 128
     b5a:	4c 2f       	mov	r20, r28
     b5c:	48 1b       	sub	r20, r24
     b5e:	44 23       	and	r20, r20
     b60:	09 f4       	brne	.+2      	; 0xb64 <gfx_mono_generic_draw_horizontal_line+0x24>
     b62:	4a c0       	rjmp	.+148    	; 0xbf8 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b64:	d6 2f       	mov	r29, r22
     b66:	d6 95       	lsr	r29
     b68:	d6 95       	lsr	r29
     b6a:	d6 95       	lsr	r29
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	98 e0       	ldi	r25, 0x08	; 8
     b70:	d9 9f       	mul	r29, r25
     b72:	60 19       	sub	r22, r0
     b74:	71 09       	sbc	r23, r1
     b76:	11 24       	eor	r1, r1
     b78:	e1 e0       	ldi	r30, 0x01	; 1
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	df 01       	movw	r26, r30
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <gfx_mono_generic_draw_horizontal_line+0x44>
     b80:	aa 0f       	add	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	6a 95       	dec	r22
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <gfx_mono_generic_draw_horizontal_line+0x40>
     b88:	fa 2e       	mov	r15, r26
     b8a:	21 30       	cpi	r18, 0x01	; 1
     b8c:	21 f0       	breq	.+8      	; 0xb96 <gfx_mono_generic_draw_horizontal_line+0x56>
     b8e:	98 f0       	brcs	.+38     	; 0xbb6 <gfx_mono_generic_draw_horizontal_line+0x76>
     b90:	22 30       	cpi	r18, 0x02	; 2
     b92:	19 f1       	breq	.+70     	; 0xbda <gfx_mono_generic_draw_horizontal_line+0x9a>
     b94:	31 c0       	rjmp	.+98     	; 0xbf8 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b96:	c4 2f       	mov	r28, r20
     b98:	1f ef       	ldi	r17, 0xFF	; 255
     b9a:	18 0f       	add	r17, r24
     b9c:	01 2f       	mov	r16, r17
     b9e:	0c 0f       	add	r16, r28
     ba0:	60 2f       	mov	r22, r16
     ba2:	8d 2f       	mov	r24, r29
     ba4:	aa df       	rcall	.-172    	; 0xafa <gfx_mono_st7565r_get_byte>
     ba6:	4f 2d       	mov	r20, r15
     ba8:	48 2b       	or	r20, r24
     baa:	60 2f       	mov	r22, r16
     bac:	8d 2f       	mov	r24, r29
     bae:	86 de       	rcall	.-756    	; 0x8bc <gfx_mono_st7565r_put_byte>
     bb0:	c1 50       	subi	r28, 0x01	; 1
     bb2:	a1 f7       	brne	.-24     	; 0xb9c <gfx_mono_generic_draw_horizontal_line+0x5c>
     bb4:	21 c0       	rjmp	.+66     	; 0xbf8 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bb6:	c4 2f       	mov	r28, r20
     bb8:	1f ef       	ldi	r17, 0xFF	; 255
     bba:	18 0f       	add	r17, r24
     bbc:	fa 2e       	mov	r15, r26
     bbe:	f0 94       	com	r15
     bc0:	01 2f       	mov	r16, r17
     bc2:	0c 0f       	add	r16, r28
     bc4:	60 2f       	mov	r22, r16
     bc6:	8d 2f       	mov	r24, r29
     bc8:	98 df       	rcall	.-208    	; 0xafa <gfx_mono_st7565r_get_byte>
     bca:	4f 2d       	mov	r20, r15
     bcc:	48 23       	and	r20, r24
     bce:	60 2f       	mov	r22, r16
     bd0:	8d 2f       	mov	r24, r29
     bd2:	74 de       	rcall	.-792    	; 0x8bc <gfx_mono_st7565r_put_byte>
     bd4:	c1 50       	subi	r28, 0x01	; 1
     bd6:	a1 f7       	brne	.-24     	; 0xbc0 <gfx_mono_generic_draw_horizontal_line+0x80>
     bd8:	0f c0       	rjmp	.+30     	; 0xbf8 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bda:	c4 2f       	mov	r28, r20
     bdc:	1f ef       	ldi	r17, 0xFF	; 255
     bde:	18 0f       	add	r17, r24
     be0:	01 2f       	mov	r16, r17
     be2:	0c 0f       	add	r16, r28
     be4:	60 2f       	mov	r22, r16
     be6:	8d 2f       	mov	r24, r29
     be8:	88 df       	rcall	.-240    	; 0xafa <gfx_mono_st7565r_get_byte>
     bea:	4f 2d       	mov	r20, r15
     bec:	48 27       	eor	r20, r24
     bee:	60 2f       	mov	r22, r16
     bf0:	8d 2f       	mov	r24, r29
     bf2:	64 de       	rcall	.-824    	; 0x8bc <gfx_mono_st7565r_put_byte>
     bf4:	c1 50       	subi	r28, 0x01	; 1
     bf6:	a1 f7       	brne	.-24     	; 0xbe0 <gfx_mono_generic_draw_horizontal_line+0xa0>
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	08 95       	ret

00000c04 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
	if (height == 0) {
     c0e:	22 23       	and	r18, r18
     c10:	69 f0       	breq	.+26     	; 0xc2c <gfx_mono_generic_draw_filled_rect+0x28>
     c12:	f4 2e       	mov	r15, r20
     c14:	18 2f       	mov	r17, r24
     c16:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     c18:	df ef       	ldi	r29, 0xFF	; 255
     c1a:	d6 0f       	add	r29, r22
     c1c:	6d 2f       	mov	r22, r29
     c1e:	6c 0f       	add	r22, r28
     c20:	20 2f       	mov	r18, r16
     c22:	4f 2d       	mov	r20, r15
     c24:	81 2f       	mov	r24, r17
     c26:	8c df       	rcall	.-232    	; 0xb40 <gfx_mono_generic_draw_horizontal_line>
     c28:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c2a:	c1 f7       	brne	.-16     	; 0xc1c <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	08 95       	ret

00000c38 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c38:	af 92       	push	r10
     c3a:	bf 92       	push	r11
     c3c:	cf 92       	push	r12
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	c8 2f       	mov	r28, r24
     c4e:	e6 2e       	mov	r14, r22
     c50:	b4 2e       	mov	r11, r20
     c52:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	f9 01       	movw	r30, r18
     c58:	24 81       	ldd	r18, Z+4	; 0x04
     c5a:	43 81       	ldd	r20, Z+3	; 0x03
     c5c:	6b 2d       	mov	r22, r11
     c5e:	8e 2d       	mov	r24, r14
     c60:	d1 df       	rcall	.-94     	; 0xc04 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c62:	f6 01       	movw	r30, r12
     c64:	80 81       	ld	r24, Z
     c66:	81 11       	cpse	r24, r1
     c68:	39 c0       	rjmp	.+114    	; 0xcdc <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c6a:	83 81       	ldd	r24, Z+3	; 0x03
     c6c:	28 2f       	mov	r18, r24
     c6e:	26 95       	lsr	r18
     c70:	26 95       	lsr	r18
     c72:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c74:	87 70       	andi	r24, 0x07	; 7
     c76:	09 f0       	breq	.+2      	; 0xc7a <gfx_mono_draw_char+0x42>
		char_row_size++;
     c78:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     c7a:	f6 01       	movw	r30, r12
     c7c:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c7e:	8c 2f       	mov	r24, r28
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	35 81       	ldd	r19, Z+5	; 0x05
     c84:	83 1b       	sub	r24, r19
     c86:	91 09       	sbc	r25, r1
     c88:	2a 9d       	mul	r18, r10
     c8a:	90 01       	movw	r18, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	82 9f       	mul	r24, r18
     c90:	a0 01       	movw	r20, r0
     c92:	83 9f       	mul	r24, r19
     c94:	50 0d       	add	r21, r0
     c96:	92 9f       	mul	r25, r18
     c98:	50 0d       	add	r21, r0
     c9a:	11 24       	eor	r1, r1
     c9c:	01 81       	ldd	r16, Z+1	; 0x01
     c9e:	12 81       	ldd	r17, Z+2	; 0x02
     ca0:	04 0f       	add	r16, r20
     ca2:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     ca4:	f6 01       	movw	r30, r12
     ca6:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     ca8:	ff 20       	and	r15, r15
     caa:	a1 f0       	breq	.+40     	; 0xcd4 <gfx_mono_draw_char+0x9c>
     cac:	d0 e0       	ldi	r29, 0x00	; 0
     cae:	c0 e0       	ldi	r28, 0x00	; 0
     cb0:	8e 2d       	mov	r24, r14
     cb2:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     cb4:	9c 2f       	mov	r25, r28
     cb6:	97 70       	andi	r25, 0x07	; 7
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     cba:	f8 01       	movw	r30, r16
     cbc:	d4 91       	lpm	r29, Z
				glyph_data++;
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     cc2:	dd 23       	and	r29, r29
     cc4:	1c f4       	brge	.+6      	; 0xccc <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	6b 2d       	mov	r22, r11
     cca:	e1 de       	rcall	.-574    	; 0xa8e <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     ccc:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     cce:	cf 5f       	subi	r28, 0xFF	; 255
     cd0:	fc 12       	cpse	r15, r28
     cd2:	ee cf       	rjmp	.-36     	; 0xcb0 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     cd4:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     cd6:	aa 94       	dec	r10
	} while (rows_left > 0);
     cd8:	a1 10       	cpse	r10, r1
     cda:	e4 cf       	rjmp	.-56     	; 0xca4 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	08 95       	ret

00000cf2 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	d6 2e       	mov	r13, r22
     d02:	04 2f       	mov	r16, r20
     d04:	79 01       	movw	r14, r18
     d06:	ec 01       	movw	r28, r24
     d08:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d0a:	89 91       	ld	r24, Y+
     d0c:	8a 30       	cpi	r24, 0x0A	; 10
     d0e:	31 f4       	brne	.+12     	; 0xd1c <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     d10:	f7 01       	movw	r30, r14
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     d18:	1d 2d       	mov	r17, r13
     d1a:	09 c0       	rjmp	.+18     	; 0xd2e <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     d1c:	8d 30       	cpi	r24, 0x0D	; 13
     d1e:	39 f0       	breq	.+14     	; 0xd2e <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d20:	97 01       	movw	r18, r14
     d22:	40 2f       	mov	r20, r16
     d24:	61 2f       	mov	r22, r17
     d26:	88 df       	rcall	.-240    	; 0xc38 <gfx_mono_draw_char>
			x += font->width;
     d28:	f7 01       	movw	r30, r14
     d2a:	83 81       	ldd	r24, Z+3	; 0x03
     d2c:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d2e:	88 81       	ld	r24, Y
     d30:	81 11       	cpse	r24, r1
     d32:	eb cf       	rjmp	.-42     	; 0xd0a <gfx_mono_draw_string+0x18>
}
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	08 95       	ret

00000d44 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d4e:	c6 2f       	mov	r28, r22
     d50:	d0 e0       	ldi	r29, 0x00	; 0
     d52:	de 01       	movw	r26, r28
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <ioport_configure_port_pin+0x18>
     d58:	b5 95       	asr	r27
     d5a:	a7 95       	ror	r26
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <ioport_configure_port_pin+0x14>
     d60:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d62:	50 8b       	std	Z+16, r21	; 0x10
     d64:	2f 5f       	subi	r18, 0xFF	; 255
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     d6a:	28 30       	cpi	r18, 0x08	; 8
     d6c:	31 05       	cpc	r19, r1
     d6e:	89 f7       	brne	.-30     	; 0xd52 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     d70:	40 ff       	sbrs	r20, 0
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     d74:	41 ff       	sbrs	r20, 1
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     d78:	fc 01       	movw	r30, r24
     d7a:	65 83       	std	Z+5, r22	; 0x05
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     d7e:	fc 01       	movw	r30, r24
     d80:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     d82:	fc 01       	movw	r30, r24
     d84:	61 83       	std	Z+1, r22	; 0x01
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     d88:	fc 01       	movw	r30, r24
     d8a:	62 83       	std	Z+2, r22	; 0x02
	}
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     d92:	80 3a       	cpi	r24, 0xA0	; 160
     d94:	28 e0       	ldi	r18, 0x08	; 8
     d96:	92 07       	cpc	r25, r18
     d98:	21 f4       	brne	.+8      	; 0xda2 <usart_spi_init+0x10>
     d9a:	60 e1       	ldi	r22, 0x10	; 16
     d9c:	83 e0       	ldi	r24, 0x03	; 3
     d9e:	78 cd       	rjmp	.-1296   	; 0x890 <sysclk_enable_module>
     da0:	08 95       	ret
     da2:	80 3b       	cpi	r24, 0xB0	; 176
     da4:	28 e0       	ldi	r18, 0x08	; 8
     da6:	92 07       	cpc	r25, r18
     da8:	21 f4       	brne	.+8      	; 0xdb2 <usart_spi_init+0x20>
     daa:	60 e2       	ldi	r22, 0x20	; 32
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	70 cd       	rjmp	.-1312   	; 0x890 <sysclk_enable_module>
     db0:	08 95       	ret
     db2:	80 3a       	cpi	r24, 0xA0	; 160
     db4:	29 e0       	ldi	r18, 0x09	; 9
     db6:	92 07       	cpc	r25, r18
     db8:	21 f4       	brne	.+8      	; 0xdc2 <usart_spi_init+0x30>
     dba:	60 e1       	ldi	r22, 0x10	; 16
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	68 cd       	rjmp	.-1328   	; 0x890 <sysclk_enable_module>
     dc0:	08 95       	ret
     dc2:	80 3b       	cpi	r24, 0xB0	; 176
     dc4:	29 e0       	ldi	r18, 0x09	; 9
     dc6:	92 07       	cpc	r25, r18
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <usart_spi_init+0x40>
     dca:	60 e2       	ldi	r22, 0x20	; 32
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	60 cd       	rjmp	.-1344   	; 0x890 <sysclk_enable_module>
     dd0:	08 95       	ret
     dd2:	80 3a       	cpi	r24, 0xA0	; 160
     dd4:	2a e0       	ldi	r18, 0x0A	; 10
     dd6:	92 07       	cpc	r25, r18
     dd8:	21 f4       	brne	.+8      	; 0xde2 <usart_spi_init+0x50>
     dda:	60 e1       	ldi	r22, 0x10	; 16
     ddc:	85 e0       	ldi	r24, 0x05	; 5
     dde:	58 cd       	rjmp	.-1360   	; 0x890 <sysclk_enable_module>
     de0:	08 95       	ret
     de2:	80 3a       	cpi	r24, 0xA0	; 160
     de4:	9b 40       	sbci	r25, 0x0B	; 11
     de6:	19 f4       	brne	.+6      	; 0xdee <usart_spi_init+0x5c>
     de8:	60 e1       	ldi	r22, 0x10	; 16
     dea:	86 e0       	ldi	r24, 0x06	; 6
     dec:	51 cd       	rjmp	.-1374   	; 0x890 <sysclk_enable_module>
     dee:	08 95       	ret

00000df0 <usart_spi_setup_device>:
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	00 d0       	rcall	.+0      	; 0xdfa <usart_spi_setup_device+0xa>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <usart_spi_setup_device+0xc>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	09 83       	std	Y+1, r16	; 0x01
     e02:	1a 83       	std	Y+2, r17	; 0x02
     e04:	2b 83       	std	Y+3, r18	; 0x03
     e06:	3c 83       	std	Y+4, r19	; 0x04
     e08:	4d 83       	std	Y+5, r20	; 0x05
     e0a:	1e 82       	std	Y+6, r1	; 0x06
     e0c:	be 01       	movw	r22, r28
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	0e 94 61 11 	call	0x22c2	; 0x22c2 <usart_init_spi>
     e16:	26 96       	adiw	r28, 0x06	; 6
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e26:	fb 01       	movw	r30, r22
     e28:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e2a:	e8 2f       	mov	r30, r24
     e2c:	e6 95       	lsr	r30
     e2e:	e6 95       	lsr	r30
     e30:	e6 95       	lsr	r30
     e32:	40 e2       	ldi	r20, 0x20	; 32
     e34:	e4 9f       	mul	r30, r20
     e36:	f0 01       	movw	r30, r0
     e38:	11 24       	eor	r1, r1
     e3a:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e3c:	87 70       	andi	r24, 0x07	; 7
     e3e:	21 e0       	ldi	r18, 0x01	; 1
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	a9 01       	movw	r20, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <usart_spi_select_device+0x24>
     e46:	44 0f       	add	r20, r20
     e48:	55 1f       	adc	r21, r21
     e4a:	8a 95       	dec	r24
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e4e:	46 83       	std	Z+6, r20	; 0x06
     e50:	08 95       	ret

00000e52 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e52:	fb 01       	movw	r30, r22
     e54:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e56:	e8 2f       	mov	r30, r24
     e58:	e6 95       	lsr	r30
     e5a:	e6 95       	lsr	r30
     e5c:	e6 95       	lsr	r30
     e5e:	40 e2       	ldi	r20, 0x20	; 32
     e60:	e4 9f       	mul	r30, r20
     e62:	f0 01       	movw	r30, r0
     e64:	11 24       	eor	r1, r1
     e66:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e68:	87 70       	andi	r24, 0x07	; 7
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	a9 01       	movw	r20, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <usart_spi_deselect_device+0x24>
     e72:	44 0f       	add	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	8a 95       	dec	r24
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e7a:	45 83       	std	Z+5, r20	; 0x05
     e7c:	08 95       	ret

00000e7e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     e7e:	43 e0       	ldi	r20, 0x03	; 3
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	80 ee       	ldi	r24, 0xE0	; 224
     e86:	97 e0       	ldi	r25, 0x07	; 7
     e88:	5d df       	rcall	.-326    	; 0xd44 <ioport_configure_port_pin>
     e8a:	43 e0       	ldi	r20, 0x03	; 3
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	62 e0       	ldi	r22, 0x02	; 2
     e90:	80 ee       	ldi	r24, 0xE0	; 224
     e92:	97 e0       	ldi	r25, 0x07	; 7
     e94:	57 df       	rcall	.-338    	; 0xd44 <ioport_configure_port_pin>
     e96:	43 e0       	ldi	r20, 0x03	; 3
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	60 e1       	ldi	r22, 0x10	; 16
     e9c:	80 e6       	ldi	r24, 0x60	; 96
     e9e:	96 e0       	ldi	r25, 0x06	; 6
     ea0:	51 df       	rcall	.-350    	; 0xd44 <ioport_configure_port_pin>
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	50 e4       	ldi	r21, 0x40	; 64
     ea6:	60 e2       	ldi	r22, 0x20	; 32
     ea8:	80 e6       	ldi	r24, 0x60	; 96
     eaa:	96 e0       	ldi	r25, 0x06	; 6
     eac:	4b df       	rcall	.-362    	; 0xd44 <ioport_configure_port_pin>
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	5b e1       	ldi	r21, 0x1B	; 27
     eb2:	60 e2       	ldi	r22, 0x20	; 32
     eb4:	80 e8       	ldi	r24, 0x80	; 128
     eb6:	96 e0       	ldi	r25, 0x06	; 6
     eb8:	45 df       	rcall	.-374    	; 0xd44 <ioport_configure_port_pin>
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	5b e1       	ldi	r21, 0x1B	; 27
     ebe:	62 e0       	ldi	r22, 0x02	; 2
     ec0:	80 ea       	ldi	r24, 0xA0	; 160
     ec2:	96 e0       	ldi	r25, 0x06	; 6
     ec4:	3f df       	rcall	.-386    	; 0xd44 <ioport_configure_port_pin>
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	5b e1       	ldi	r21, 0x1B	; 27
     eca:	64 e0       	ldi	r22, 0x04	; 4
     ecc:	80 ea       	ldi	r24, 0xA0	; 160
     ece:	96 e0       	ldi	r25, 0x06	; 6
     ed0:	39 df       	rcall	.-398    	; 0xd44 <ioport_configure_port_pin>
     ed2:	43 e0       	ldi	r20, 0x03	; 3
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	62 e0       	ldi	r22, 0x02	; 2
     ed8:	80 e6       	ldi	r24, 0x60	; 96
     eda:	96 e0       	ldi	r25, 0x06	; 6
     edc:	33 df       	rcall	.-410    	; 0xd44 <ioport_configure_port_pin>
     ede:	43 e0       	ldi	r20, 0x03	; 3
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	68 e0       	ldi	r22, 0x08	; 8
     ee4:	80 e6       	ldi	r24, 0x60	; 96
     ee6:	96 e0       	ldi	r25, 0x06	; 6
     ee8:	2d df       	rcall	.-422    	; 0xd44 <ioport_configure_port_pin>
     eea:	43 e0       	ldi	r20, 0x03	; 3
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	68 e0       	ldi	r22, 0x08	; 8
     ef0:	80 ea       	ldi	r24, 0xA0	; 160
     ef2:	96 e0       	ldi	r25, 0x06	; 6
     ef4:	27 df       	rcall	.-434    	; 0xd44 <ioport_configure_port_pin>
     ef6:	43 e0       	ldi	r20, 0x03	; 3
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	80 e6       	ldi	r24, 0x60	; 96
     efe:	96 e0       	ldi	r25, 0x06	; 6
     f00:	21 df       	rcall	.-446    	; 0xd44 <ioport_configure_port_pin>
     f02:	43 e0       	ldi	r20, 0x03	; 3
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	68 e0       	ldi	r22, 0x08	; 8
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	96 e0       	ldi	r25, 0x06	; 6
     f0c:	1b df       	rcall	.-458    	; 0xd44 <ioport_configure_port_pin>
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	60 e1       	ldi	r22, 0x10	; 16
     f14:	80 e8       	ldi	r24, 0x80	; 128
     f16:	96 e0       	ldi	r25, 0x06	; 6
     f18:	15 df       	rcall	.-470    	; 0xd44 <ioport_configure_port_pin>
     f1a:	43 e0       	ldi	r20, 0x03	; 3
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	62 e0       	ldi	r22, 0x02	; 2
     f20:	80 e6       	ldi	r24, 0x60	; 96
     f22:	96 e0       	ldi	r25, 0x06	; 6
     f24:	0f df       	rcall	.-482    	; 0xd44 <ioport_configure_port_pin>
     f26:	43 e0       	ldi	r20, 0x03	; 3
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	68 e0       	ldi	r22, 0x08	; 8
     f2c:	80 e6       	ldi	r24, 0x60	; 96
     f2e:	96 e0       	ldi	r25, 0x06	; 6
     f30:	09 df       	rcall	.-494    	; 0xd44 <ioport_configure_port_pin>
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	64 e0       	ldi	r22, 0x04	; 4
     f38:	80 e6       	ldi	r24, 0x60	; 96
     f3a:	96 e0       	ldi	r25, 0x06	; 6
     f3c:	03 df       	rcall	.-506    	; 0xd44 <ioport_configure_port_pin>
     f3e:	43 e0       	ldi	r20, 0x03	; 3
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	60 e1       	ldi	r22, 0x10	; 16
     f44:	80 ea       	ldi	r24, 0xA0	; 160
     f46:	96 e0       	ldi	r25, 0x06	; 6
     f48:	fd de       	rcall	.-518    	; 0xd44 <ioport_configure_port_pin>
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	96 e0       	ldi	r25, 0x06	; 6
     f54:	f7 de       	rcall	.-530    	; 0xd44 <ioport_configure_port_pin>
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	64 e0       	ldi	r22, 0x04	; 4
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	96 e0       	ldi	r25, 0x06	; 6
     f60:	f1 de       	rcall	.-542    	; 0xd44 <ioport_configure_port_pin>
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	96 e0       	ldi	r25, 0x06	; 6
     f6c:	eb de       	rcall	.-554    	; 0xd44 <ioport_configure_port_pin>
     f6e:	43 e0       	ldi	r20, 0x03	; 3
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	68 e0       	ldi	r22, 0x08	; 8
     f74:	80 e4       	ldi	r24, 0x40	; 64
     f76:	96 e0       	ldi	r25, 0x06	; 6
     f78:	e5 de       	rcall	.-566    	; 0xd44 <ioport_configure_port_pin>
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	64 e0       	ldi	r22, 0x04	; 4
     f80:	80 e4       	ldi	r24, 0x40	; 64
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	df de       	rcall	.-578    	; 0xd44 <ioport_configure_port_pin>
     f86:	43 e0       	ldi	r20, 0x03	; 3
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	68 e0       	ldi	r22, 0x08	; 8
     f8c:	80 e6       	ldi	r24, 0x60	; 96
     f8e:	96 e0       	ldi	r25, 0x06	; 6
     f90:	d9 de       	rcall	.-590    	; 0xd44 <ioport_configure_port_pin>
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	64 e0       	ldi	r22, 0x04	; 4
     f98:	80 e6       	ldi	r24, 0x60	; 96
     f9a:	96 e0       	ldi	r25, 0x06	; 6
     f9c:	d3 de       	rcall	.-602    	; 0xd44 <ioport_configure_port_pin>
     f9e:	43 e0       	ldi	r20, 0x03	; 3
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	68 e0       	ldi	r22, 0x08	; 8
     fa4:	80 e8       	ldi	r24, 0x80	; 128
     fa6:	96 e0       	ldi	r25, 0x06	; 6
     fa8:	cd de       	rcall	.-614    	; 0xd44 <ioport_configure_port_pin>
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	64 e0       	ldi	r22, 0x04	; 4
     fb0:	80 e8       	ldi	r24, 0x80	; 128
     fb2:	96 e0       	ldi	r25, 0x06	; 6
     fb4:	c7 ce       	rjmp	.-626    	; 0xd44 <ioport_configure_port_pin>
     fb6:	08 95       	ret

00000fb8 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	0b b6       	in	r0, 0x3b	; 59
     fc4:	0f 92       	push	r0
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
     fde:	e0 91 c4 22 	lds	r30, 0x22C4	; 0x8022c4 <tc_tcc0_ovf_callback>
     fe2:	f0 91 c5 22 	lds	r31, 0x22C5	; 0x8022c5 <tc_tcc0_ovf_callback+0x1>
     fe6:	30 97       	sbiw	r30, 0x00	; 0
     fe8:	09 f0       	breq	.+2      	; 0xfec <__vector_14+0x34>
     fea:	19 95       	eicall
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	0f 90       	pop	r0
    1006:	0b be       	out	0x3b, r0	; 59
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <__vector_15>:
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	0b b6       	in	r0, 0x3b	; 59
    101e:	0f 92       	push	r0
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    1038:	e0 91 c2 22 	lds	r30, 0x22C2	; 0x8022c2 <tc_tcc0_err_callback>
    103c:	f0 91 c3 22 	lds	r31, 0x22C3	; 0x8022c3 <tc_tcc0_err_callback+0x1>
    1040:	30 97       	sbiw	r30, 0x00	; 0
    1042:	09 f0       	breq	.+2      	; 0x1046 <__vector_15+0x34>
    1044:	19 95       	eicall
    1046:	ff 91       	pop	r31
    1048:	ef 91       	pop	r30
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	7f 91       	pop	r23
    1054:	6f 91       	pop	r22
    1056:	5f 91       	pop	r21
    1058:	4f 91       	pop	r20
    105a:	3f 91       	pop	r19
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0b be       	out	0x3b, r0	; 59
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <__vector_16>:
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	0b b6       	in	r0, 0x3b	; 59
    1078:	0f 92       	push	r0
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
    1092:	e0 91 c0 22 	lds	r30, 0x22C0	; 0x8022c0 <tc_tcc0_cca_callback>
    1096:	f0 91 c1 22 	lds	r31, 0x22C1	; 0x8022c1 <tc_tcc0_cca_callback+0x1>
    109a:	30 97       	sbiw	r30, 0x00	; 0
    109c:	09 f0       	breq	.+2      	; 0x10a0 <__vector_16+0x34>
    109e:	19 95       	eicall
    10a0:	ff 91       	pop	r31
    10a2:	ef 91       	pop	r30
    10a4:	bf 91       	pop	r27
    10a6:	af 91       	pop	r26
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	7f 91       	pop	r23
    10ae:	6f 91       	pop	r22
    10b0:	5f 91       	pop	r21
    10b2:	4f 91       	pop	r20
    10b4:	3f 91       	pop	r19
    10b6:	2f 91       	pop	r18
    10b8:	0f 90       	pop	r0
    10ba:	0b be       	out	0x3b, r0	; 59
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <__vector_17>:
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	0b b6       	in	r0, 0x3b	; 59
    10d2:	0f 92       	push	r0
    10d4:	2f 93       	push	r18
    10d6:	3f 93       	push	r19
    10d8:	4f 93       	push	r20
    10da:	5f 93       	push	r21
    10dc:	6f 93       	push	r22
    10de:	7f 93       	push	r23
    10e0:	8f 93       	push	r24
    10e2:	9f 93       	push	r25
    10e4:	af 93       	push	r26
    10e6:	bf 93       	push	r27
    10e8:	ef 93       	push	r30
    10ea:	ff 93       	push	r31
    10ec:	e0 91 be 22 	lds	r30, 0x22BE	; 0x8022be <tc_tcc0_ccb_callback>
    10f0:	f0 91 bf 22 	lds	r31, 0x22BF	; 0x8022bf <tc_tcc0_ccb_callback+0x1>
    10f4:	30 97       	sbiw	r30, 0x00	; 0
    10f6:	09 f0       	breq	.+2      	; 0x10fa <__vector_17+0x34>
    10f8:	19 95       	eicall
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0b be       	out	0x3b, r0	; 59
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_18>:
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	0b b6       	in	r0, 0x3b	; 59
    112c:	0f 92       	push	r0
    112e:	2f 93       	push	r18
    1130:	3f 93       	push	r19
    1132:	4f 93       	push	r20
    1134:	5f 93       	push	r21
    1136:	6f 93       	push	r22
    1138:	7f 93       	push	r23
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
    1146:	e0 91 bc 22 	lds	r30, 0x22BC	; 0x8022bc <tc_tcc0_ccc_callback>
    114a:	f0 91 bd 22 	lds	r31, 0x22BD	; 0x8022bd <tc_tcc0_ccc_callback+0x1>
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	09 f0       	breq	.+2      	; 0x1154 <__vector_18+0x34>
    1152:	19 95       	eicall
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0b be       	out	0x3b, r0	; 59
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <__vector_19>:
    117a:	1f 92       	push	r1
    117c:	0f 92       	push	r0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	0f 92       	push	r0
    1182:	11 24       	eor	r1, r1
    1184:	0b b6       	in	r0, 0x3b	; 59
    1186:	0f 92       	push	r0
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
    11a0:	e0 91 ba 22 	lds	r30, 0x22BA	; 0x8022ba <tc_tcc0_ccd_callback>
    11a4:	f0 91 bb 22 	lds	r31, 0x22BB	; 0x8022bb <tc_tcc0_ccd_callback+0x1>
    11a8:	30 97       	sbiw	r30, 0x00	; 0
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__vector_19+0x34>
    11ac:	19 95       	eicall
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0b be       	out	0x3b, r0	; 59
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <__vector_20>:
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	0b b6       	in	r0, 0x3b	; 59
    11e0:	0f 92       	push	r0
    11e2:	2f 93       	push	r18
    11e4:	3f 93       	push	r19
    11e6:	4f 93       	push	r20
    11e8:	5f 93       	push	r21
    11ea:	6f 93       	push	r22
    11ec:	7f 93       	push	r23
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25
    11f2:	af 93       	push	r26
    11f4:	bf 93       	push	r27
    11f6:	ef 93       	push	r30
    11f8:	ff 93       	push	r31
    11fa:	e0 91 b8 22 	lds	r30, 0x22B8	; 0x8022b8 <tc_tcc1_ovf_callback>
    11fe:	f0 91 b9 22 	lds	r31, 0x22B9	; 0x8022b9 <tc_tcc1_ovf_callback+0x1>
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	09 f0       	breq	.+2      	; 0x1208 <__vector_20+0x34>
    1206:	19 95       	eicall
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0b be       	out	0x3b, r0	; 59
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_21>:
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	0b b6       	in	r0, 0x3b	; 59
    123a:	0f 92       	push	r0
    123c:	2f 93       	push	r18
    123e:	3f 93       	push	r19
    1240:	4f 93       	push	r20
    1242:	5f 93       	push	r21
    1244:	6f 93       	push	r22
    1246:	7f 93       	push	r23
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
    1254:	e0 91 b6 22 	lds	r30, 0x22B6	; 0x8022b6 <tc_tcc1_err_callback>
    1258:	f0 91 b7 22 	lds	r31, 0x22B7	; 0x8022b7 <tc_tcc1_err_callback+0x1>
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	09 f0       	breq	.+2      	; 0x1262 <__vector_21+0x34>
    1260:	19 95       	eicall
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0b be       	out	0x3b, r0	; 59
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0
    1284:	1f 90       	pop	r1
    1286:	18 95       	reti

00001288 <__vector_22>:
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	0b b6       	in	r0, 0x3b	; 59
    1294:	0f 92       	push	r0
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
    12ae:	e0 91 b4 22 	lds	r30, 0x22B4	; 0x8022b4 <tc_tcc1_cca_callback>
    12b2:	f0 91 b5 22 	lds	r31, 0x22B5	; 0x8022b5 <tc_tcc1_cca_callback+0x1>
    12b6:	30 97       	sbiw	r30, 0x00	; 0
    12b8:	09 f0       	breq	.+2      	; 0x12bc <__vector_22+0x34>
    12ba:	19 95       	eicall
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0b be       	out	0x3b, r0	; 59
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_23>:
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	0b b6       	in	r0, 0x3b	; 59
    12ee:	0f 92       	push	r0
    12f0:	2f 93       	push	r18
    12f2:	3f 93       	push	r19
    12f4:	4f 93       	push	r20
    12f6:	5f 93       	push	r21
    12f8:	6f 93       	push	r22
    12fa:	7f 93       	push	r23
    12fc:	8f 93       	push	r24
    12fe:	9f 93       	push	r25
    1300:	af 93       	push	r26
    1302:	bf 93       	push	r27
    1304:	ef 93       	push	r30
    1306:	ff 93       	push	r31
    1308:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <tc_tcc1_ccb_callback>
    130c:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <tc_tcc1_ccb_callback+0x1>
    1310:	30 97       	sbiw	r30, 0x00	; 0
    1312:	09 f0       	breq	.+2      	; 0x1316 <__vector_23+0x34>
    1314:	19 95       	eicall
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	bf 91       	pop	r27
    131c:	af 91       	pop	r26
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	7f 91       	pop	r23
    1324:	6f 91       	pop	r22
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	0f 90       	pop	r0
    1330:	0b be       	out	0x3b, r0	; 59
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <__vector_77>:
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	0b b6       	in	r0, 0x3b	; 59
    1348:	0f 92       	push	r0
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
    1362:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <tc_tcd0_ovf_callback>
    1366:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <tc_tcd0_ovf_callback+0x1>
    136a:	30 97       	sbiw	r30, 0x00	; 0
    136c:	09 f0       	breq	.+2      	; 0x1370 <__vector_77+0x34>
    136e:	19 95       	eicall
    1370:	ff 91       	pop	r31
    1372:	ef 91       	pop	r30
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	7f 91       	pop	r23
    137e:	6f 91       	pop	r22
    1380:	5f 91       	pop	r21
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0b be       	out	0x3b, r0	; 59
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_78>:
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	0b b6       	in	r0, 0x3b	; 59
    13a2:	0f 92       	push	r0
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
    13bc:	e0 91 ae 22 	lds	r30, 0x22AE	; 0x8022ae <tc_tcd0_err_callback>
    13c0:	f0 91 af 22 	lds	r31, 0x22AF	; 0x8022af <tc_tcd0_err_callback+0x1>
    13c4:	30 97       	sbiw	r30, 0x00	; 0
    13c6:	09 f0       	breq	.+2      	; 0x13ca <__vector_78+0x34>
    13c8:	19 95       	eicall
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0b be       	out	0x3b, r0	; 59
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <__vector_79>:
    13f0:	1f 92       	push	r1
    13f2:	0f 92       	push	r0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	0b b6       	in	r0, 0x3b	; 59
    13fc:	0f 92       	push	r0
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
    1416:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <tc_tcd0_cca_callback>
    141a:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <tc_tcd0_cca_callback+0x1>
    141e:	30 97       	sbiw	r30, 0x00	; 0
    1420:	09 f0       	breq	.+2      	; 0x1424 <__vector_79+0x34>
    1422:	19 95       	eicall
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0b be       	out	0x3b, r0	; 59
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_80>:
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
    1454:	0b b6       	in	r0, 0x3b	; 59
    1456:	0f 92       	push	r0
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	ef 93       	push	r30
    146e:	ff 93       	push	r31
    1470:	e0 91 aa 22 	lds	r30, 0x22AA	; 0x8022aa <tc_tcd0_ccb_callback>
    1474:	f0 91 ab 22 	lds	r31, 0x22AB	; 0x8022ab <tc_tcd0_ccb_callback+0x1>
    1478:	30 97       	sbiw	r30, 0x00	; 0
    147a:	09 f0       	breq	.+2      	; 0x147e <__vector_80+0x34>
    147c:	19 95       	eicall
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0b be       	out	0x3b, r0	; 59
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <__vector_81>:
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	0b b6       	in	r0, 0x3b	; 59
    14b0:	0f 92       	push	r0
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
    14ca:	e0 91 a8 22 	lds	r30, 0x22A8	; 0x8022a8 <tc_tcd0_ccc_callback>
    14ce:	f0 91 a9 22 	lds	r31, 0x22A9	; 0x8022a9 <tc_tcd0_ccc_callback+0x1>
    14d2:	30 97       	sbiw	r30, 0x00	; 0
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <__vector_81+0x34>
    14d6:	19 95       	eicall
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0b be       	out	0x3b, r0	; 59
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <__vector_82>:
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	0b b6       	in	r0, 0x3b	; 59
    150a:	0f 92       	push	r0
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	e0 91 a6 22 	lds	r30, 0x22A6	; 0x8022a6 <tc_tcd0_ccd_callback>
    1528:	f0 91 a7 22 	lds	r31, 0x22A7	; 0x8022a7 <tc_tcd0_ccd_callback+0x1>
    152c:	30 97       	sbiw	r30, 0x00	; 0
    152e:	09 f0       	breq	.+2      	; 0x1532 <__vector_82+0x34>
    1530:	19 95       	eicall
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0b be       	out	0x3b, r0	; 59
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_83>:
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	0b b6       	in	r0, 0x3b	; 59
    1564:	0f 92       	push	r0
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
    157e:	e0 91 a4 22 	lds	r30, 0x22A4	; 0x8022a4 <tc_tcd1_ovf_callback>
    1582:	f0 91 a5 22 	lds	r31, 0x22A5	; 0x8022a5 <tc_tcd1_ovf_callback+0x1>
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	09 f0       	breq	.+2      	; 0x158c <__vector_83+0x34>
    158a:	19 95       	eicall
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0b be       	out	0x3b, r0	; 59
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_84>:
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	0b b6       	in	r0, 0x3b	; 59
    15be:	0f 92       	push	r0
    15c0:	2f 93       	push	r18
    15c2:	3f 93       	push	r19
    15c4:	4f 93       	push	r20
    15c6:	5f 93       	push	r21
    15c8:	6f 93       	push	r22
    15ca:	7f 93       	push	r23
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	ef 93       	push	r30
    15d6:	ff 93       	push	r31
    15d8:	e0 91 a2 22 	lds	r30, 0x22A2	; 0x8022a2 <tc_tcd1_err_callback>
    15dc:	f0 91 a3 22 	lds	r31, 0x22A3	; 0x8022a3 <tc_tcd1_err_callback+0x1>
    15e0:	30 97       	sbiw	r30, 0x00	; 0
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <__vector_84+0x34>
    15e4:	19 95       	eicall
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	7f 91       	pop	r23
    15f4:	6f 91       	pop	r22
    15f6:	5f 91       	pop	r21
    15f8:	4f 91       	pop	r20
    15fa:	3f 91       	pop	r19
    15fc:	2f 91       	pop	r18
    15fe:	0f 90       	pop	r0
    1600:	0b be       	out	0x3b, r0	; 59
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <__vector_85>:
    160c:	1f 92       	push	r1
    160e:	0f 92       	push	r0
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	0f 92       	push	r0
    1614:	11 24       	eor	r1, r1
    1616:	0b b6       	in	r0, 0x3b	; 59
    1618:	0f 92       	push	r0
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
    1632:	e0 91 a0 22 	lds	r30, 0x22A0	; 0x8022a0 <tc_tcd1_cca_callback>
    1636:	f0 91 a1 22 	lds	r31, 0x22A1	; 0x8022a1 <tc_tcd1_cca_callback+0x1>
    163a:	30 97       	sbiw	r30, 0x00	; 0
    163c:	09 f0       	breq	.+2      	; 0x1640 <__vector_85+0x34>
    163e:	19 95       	eicall
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0b be       	out	0x3b, r0	; 59
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <__vector_86>:
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	0b b6       	in	r0, 0x3b	; 59
    1672:	0f 92       	push	r0
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
    168c:	e0 91 9e 22 	lds	r30, 0x229E	; 0x80229e <tc_tcd1_ccb_callback>
    1690:	f0 91 9f 22 	lds	r31, 0x229F	; 0x80229f <tc_tcd1_ccb_callback+0x1>
    1694:	30 97       	sbiw	r30, 0x00	; 0
    1696:	09 f0       	breq	.+2      	; 0x169a <__vector_86+0x34>
    1698:	19 95       	eicall
    169a:	ff 91       	pop	r31
    169c:	ef 91       	pop	r30
    169e:	bf 91       	pop	r27
    16a0:	af 91       	pop	r26
    16a2:	9f 91       	pop	r25
    16a4:	8f 91       	pop	r24
    16a6:	7f 91       	pop	r23
    16a8:	6f 91       	pop	r22
    16aa:	5f 91       	pop	r21
    16ac:	4f 91       	pop	r20
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0b be       	out	0x3b, r0	; 59
    16b6:	0f 90       	pop	r0
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	0f 90       	pop	r0
    16bc:	1f 90       	pop	r1
    16be:	18 95       	reti

000016c0 <__vector_47>:
    16c0:	1f 92       	push	r1
    16c2:	0f 92       	push	r0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	0b b6       	in	r0, 0x3b	; 59
    16cc:	0f 92       	push	r0
    16ce:	2f 93       	push	r18
    16d0:	3f 93       	push	r19
    16d2:	4f 93       	push	r20
    16d4:	5f 93       	push	r21
    16d6:	6f 93       	push	r22
    16d8:	7f 93       	push	r23
    16da:	8f 93       	push	r24
    16dc:	9f 93       	push	r25
    16de:	af 93       	push	r26
    16e0:	bf 93       	push	r27
    16e2:	ef 93       	push	r30
    16e4:	ff 93       	push	r31
    16e6:	e0 91 9c 22 	lds	r30, 0x229C	; 0x80229c <tc_tce0_ovf_callback>
    16ea:	f0 91 9d 22 	lds	r31, 0x229D	; 0x80229d <tc_tce0_ovf_callback+0x1>
    16ee:	30 97       	sbiw	r30, 0x00	; 0
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <__vector_47+0x34>
    16f2:	19 95       	eicall
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	0f 90       	pop	r0
    170e:	0b be       	out	0x3b, r0	; 59
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <__vector_48>:
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
    1740:	e0 91 9a 22 	lds	r30, 0x229A	; 0x80229a <tc_tce0_err_callback>
    1744:	f0 91 9b 22 	lds	r31, 0x229B	; 0x80229b <tc_tce0_err_callback+0x1>
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	09 f0       	breq	.+2      	; 0x174e <__vector_48+0x34>
    174c:	19 95       	eicall
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0b be       	out	0x3b, r0	; 59
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <__vector_49>:
    1774:	1f 92       	push	r1
    1776:	0f 92       	push	r0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	0f 92       	push	r0
    177c:	11 24       	eor	r1, r1
    177e:	0b b6       	in	r0, 0x3b	; 59
    1780:	0f 92       	push	r0
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	4f 93       	push	r20
    1788:	5f 93       	push	r21
    178a:	6f 93       	push	r22
    178c:	7f 93       	push	r23
    178e:	8f 93       	push	r24
    1790:	9f 93       	push	r25
    1792:	af 93       	push	r26
    1794:	bf 93       	push	r27
    1796:	ef 93       	push	r30
    1798:	ff 93       	push	r31
    179a:	e0 91 98 22 	lds	r30, 0x2298	; 0x802298 <tc_tce0_cca_callback>
    179e:	f0 91 99 22 	lds	r31, 0x2299	; 0x802299 <tc_tce0_cca_callback+0x1>
    17a2:	30 97       	sbiw	r30, 0x00	; 0
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <__vector_49+0x34>
    17a6:	19 95       	eicall
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0b be       	out	0x3b, r0	; 59
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	0f 90       	pop	r0
    17ca:	1f 90       	pop	r1
    17cc:	18 95       	reti

000017ce <__vector_50>:
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	0b b6       	in	r0, 0x3b	; 59
    17da:	0f 92       	push	r0
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	e0 91 96 22 	lds	r30, 0x2296	; 0x802296 <tc_tce0_ccb_callback>
    17f8:	f0 91 97 22 	lds	r31, 0x2297	; 0x802297 <tc_tce0_ccb_callback+0x1>
    17fc:	30 97       	sbiw	r30, 0x00	; 0
    17fe:	09 f0       	breq	.+2      	; 0x1802 <__vector_50+0x34>
    1800:	19 95       	eicall
    1802:	ff 91       	pop	r31
    1804:	ef 91       	pop	r30
    1806:	bf 91       	pop	r27
    1808:	af 91       	pop	r26
    180a:	9f 91       	pop	r25
    180c:	8f 91       	pop	r24
    180e:	7f 91       	pop	r23
    1810:	6f 91       	pop	r22
    1812:	5f 91       	pop	r21
    1814:	4f 91       	pop	r20
    1816:	3f 91       	pop	r19
    1818:	2f 91       	pop	r18
    181a:	0f 90       	pop	r0
    181c:	0b be       	out	0x3b, r0	; 59
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <__vector_51>:
    1828:	1f 92       	push	r1
    182a:	0f 92       	push	r0
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	0f 92       	push	r0
    1830:	11 24       	eor	r1, r1
    1832:	0b b6       	in	r0, 0x3b	; 59
    1834:	0f 92       	push	r0
    1836:	2f 93       	push	r18
    1838:	3f 93       	push	r19
    183a:	4f 93       	push	r20
    183c:	5f 93       	push	r21
    183e:	6f 93       	push	r22
    1840:	7f 93       	push	r23
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	af 93       	push	r26
    1848:	bf 93       	push	r27
    184a:	ef 93       	push	r30
    184c:	ff 93       	push	r31
    184e:	e0 91 94 22 	lds	r30, 0x2294	; 0x802294 <tc_tce0_ccc_callback>
    1852:	f0 91 95 22 	lds	r31, 0x2295	; 0x802295 <tc_tce0_ccc_callback+0x1>
    1856:	30 97       	sbiw	r30, 0x00	; 0
    1858:	09 f0       	breq	.+2      	; 0x185c <__vector_51+0x34>
    185a:	19 95       	eicall
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0b be       	out	0x3b, r0	; 59
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_52>:
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	0b b6       	in	r0, 0x3b	; 59
    188e:	0f 92       	push	r0
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
    18a8:	e0 91 92 22 	lds	r30, 0x2292	; 0x802292 <tc_tce0_ccd_callback>
    18ac:	f0 91 93 22 	lds	r31, 0x2293	; 0x802293 <tc_tce0_ccd_callback+0x1>
    18b0:	30 97       	sbiw	r30, 0x00	; 0
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <__vector_52+0x34>
    18b4:	19 95       	eicall
    18b6:	ff 91       	pop	r31
    18b8:	ef 91       	pop	r30
    18ba:	bf 91       	pop	r27
    18bc:	af 91       	pop	r26
    18be:	9f 91       	pop	r25
    18c0:	8f 91       	pop	r24
    18c2:	7f 91       	pop	r23
    18c4:	6f 91       	pop	r22
    18c6:	5f 91       	pop	r21
    18c8:	4f 91       	pop	r20
    18ca:	3f 91       	pop	r19
    18cc:	2f 91       	pop	r18
    18ce:	0f 90       	pop	r0
    18d0:	0b be       	out	0x3b, r0	; 59
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <__vector_53>:
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	0b b6       	in	r0, 0x3b	; 59
    18e8:	0f 92       	push	r0
    18ea:	2f 93       	push	r18
    18ec:	3f 93       	push	r19
    18ee:	4f 93       	push	r20
    18f0:	5f 93       	push	r21
    18f2:	6f 93       	push	r22
    18f4:	7f 93       	push	r23
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	af 93       	push	r26
    18fc:	bf 93       	push	r27
    18fe:	ef 93       	push	r30
    1900:	ff 93       	push	r31
    1902:	e0 91 90 22 	lds	r30, 0x2290	; 0x802290 <tc_tce1_ovf_callback>
    1906:	f0 91 91 22 	lds	r31, 0x2291	; 0x802291 <tc_tce1_ovf_callback+0x1>
    190a:	30 97       	sbiw	r30, 0x00	; 0
    190c:	09 f0       	breq	.+2      	; 0x1910 <__vector_53+0x34>
    190e:	19 95       	eicall
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	bf 91       	pop	r27
    1916:	af 91       	pop	r26
    1918:	9f 91       	pop	r25
    191a:	8f 91       	pop	r24
    191c:	7f 91       	pop	r23
    191e:	6f 91       	pop	r22
    1920:	5f 91       	pop	r21
    1922:	4f 91       	pop	r20
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0b be       	out	0x3b, r0	; 59
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	0f 90       	pop	r0
    1932:	1f 90       	pop	r1
    1934:	18 95       	reti

00001936 <__vector_54>:
    1936:	1f 92       	push	r1
    1938:	0f 92       	push	r0
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	0f 92       	push	r0
    193e:	11 24       	eor	r1, r1
    1940:	0b b6       	in	r0, 0x3b	; 59
    1942:	0f 92       	push	r0
    1944:	2f 93       	push	r18
    1946:	3f 93       	push	r19
    1948:	4f 93       	push	r20
    194a:	5f 93       	push	r21
    194c:	6f 93       	push	r22
    194e:	7f 93       	push	r23
    1950:	8f 93       	push	r24
    1952:	9f 93       	push	r25
    1954:	af 93       	push	r26
    1956:	bf 93       	push	r27
    1958:	ef 93       	push	r30
    195a:	ff 93       	push	r31
    195c:	e0 91 8e 22 	lds	r30, 0x228E	; 0x80228e <tc_tce1_err_callback>
    1960:	f0 91 8f 22 	lds	r31, 0x228F	; 0x80228f <tc_tce1_err_callback+0x1>
    1964:	30 97       	sbiw	r30, 0x00	; 0
    1966:	09 f0       	breq	.+2      	; 0x196a <__vector_54+0x34>
    1968:	19 95       	eicall
    196a:	ff 91       	pop	r31
    196c:	ef 91       	pop	r30
    196e:	bf 91       	pop	r27
    1970:	af 91       	pop	r26
    1972:	9f 91       	pop	r25
    1974:	8f 91       	pop	r24
    1976:	7f 91       	pop	r23
    1978:	6f 91       	pop	r22
    197a:	5f 91       	pop	r21
    197c:	4f 91       	pop	r20
    197e:	3f 91       	pop	r19
    1980:	2f 91       	pop	r18
    1982:	0f 90       	pop	r0
    1984:	0b be       	out	0x3b, r0	; 59
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	0f 90       	pop	r0
    198c:	1f 90       	pop	r1
    198e:	18 95       	reti

00001990 <__vector_55>:
    1990:	1f 92       	push	r1
    1992:	0f 92       	push	r0
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	0f 92       	push	r0
    1998:	11 24       	eor	r1, r1
    199a:	0b b6       	in	r0, 0x3b	; 59
    199c:	0f 92       	push	r0
    199e:	2f 93       	push	r18
    19a0:	3f 93       	push	r19
    19a2:	4f 93       	push	r20
    19a4:	5f 93       	push	r21
    19a6:	6f 93       	push	r22
    19a8:	7f 93       	push	r23
    19aa:	8f 93       	push	r24
    19ac:	9f 93       	push	r25
    19ae:	af 93       	push	r26
    19b0:	bf 93       	push	r27
    19b2:	ef 93       	push	r30
    19b4:	ff 93       	push	r31
    19b6:	e0 91 8c 22 	lds	r30, 0x228C	; 0x80228c <tc_tce1_cca_callback>
    19ba:	f0 91 8d 22 	lds	r31, 0x228D	; 0x80228d <tc_tce1_cca_callback+0x1>
    19be:	30 97       	sbiw	r30, 0x00	; 0
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <__vector_55+0x34>
    19c2:	19 95       	eicall
    19c4:	ff 91       	pop	r31
    19c6:	ef 91       	pop	r30
    19c8:	bf 91       	pop	r27
    19ca:	af 91       	pop	r26
    19cc:	9f 91       	pop	r25
    19ce:	8f 91       	pop	r24
    19d0:	7f 91       	pop	r23
    19d2:	6f 91       	pop	r22
    19d4:	5f 91       	pop	r21
    19d6:	4f 91       	pop	r20
    19d8:	3f 91       	pop	r19
    19da:	2f 91       	pop	r18
    19dc:	0f 90       	pop	r0
    19de:	0b be       	out	0x3b, r0	; 59
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	0f 90       	pop	r0
    19e6:	1f 90       	pop	r1
    19e8:	18 95       	reti

000019ea <__vector_56>:
    19ea:	1f 92       	push	r1
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	0b b6       	in	r0, 0x3b	; 59
    19f6:	0f 92       	push	r0
    19f8:	2f 93       	push	r18
    19fa:	3f 93       	push	r19
    19fc:	4f 93       	push	r20
    19fe:	5f 93       	push	r21
    1a00:	6f 93       	push	r22
    1a02:	7f 93       	push	r23
    1a04:	8f 93       	push	r24
    1a06:	9f 93       	push	r25
    1a08:	af 93       	push	r26
    1a0a:	bf 93       	push	r27
    1a0c:	ef 93       	push	r30
    1a0e:	ff 93       	push	r31
    1a10:	e0 91 8a 22 	lds	r30, 0x228A	; 0x80228a <tc_tce1_ccb_callback>
    1a14:	f0 91 8b 22 	lds	r31, 0x228B	; 0x80228b <tc_tce1_ccb_callback+0x1>
    1a18:	30 97       	sbiw	r30, 0x00	; 0
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <__vector_56+0x34>
    1a1c:	19 95       	eicall
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	0f 90       	pop	r0
    1a38:	0b be       	out	0x3b, r0	; 59
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	1f 90       	pop	r1
    1a42:	18 95       	reti

00001a44 <__vector_108>:
    1a44:	1f 92       	push	r1
    1a46:	0f 92       	push	r0
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	0f 92       	push	r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	0b b6       	in	r0, 0x3b	; 59
    1a50:	0f 92       	push	r0
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	e0 91 88 22 	lds	r30, 0x2288	; 0x802288 <tc_tcf0_ovf_callback>
    1a6e:	f0 91 89 22 	lds	r31, 0x2289	; 0x802289 <tc_tcf0_ovf_callback+0x1>
    1a72:	30 97       	sbiw	r30, 0x00	; 0
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <__vector_108+0x34>
    1a76:	19 95       	eicall
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	bf 91       	pop	r27
    1a7e:	af 91       	pop	r26
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	0b be       	out	0x3b, r0	; 59
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <__vector_109>:
    1a9e:	1f 92       	push	r1
    1aa0:	0f 92       	push	r0
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	0f 92       	push	r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	0b b6       	in	r0, 0x3b	; 59
    1aaa:	0f 92       	push	r0
    1aac:	2f 93       	push	r18
    1aae:	3f 93       	push	r19
    1ab0:	4f 93       	push	r20
    1ab2:	5f 93       	push	r21
    1ab4:	6f 93       	push	r22
    1ab6:	7f 93       	push	r23
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	af 93       	push	r26
    1abe:	bf 93       	push	r27
    1ac0:	ef 93       	push	r30
    1ac2:	ff 93       	push	r31
    1ac4:	e0 91 86 22 	lds	r30, 0x2286	; 0x802286 <tc_tcf0_err_callback>
    1ac8:	f0 91 87 22 	lds	r31, 0x2287	; 0x802287 <tc_tcf0_err_callback+0x1>
    1acc:	30 97       	sbiw	r30, 0x00	; 0
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <__vector_109+0x34>
    1ad0:	19 95       	eicall
    1ad2:	ff 91       	pop	r31
    1ad4:	ef 91       	pop	r30
    1ad6:	bf 91       	pop	r27
    1ad8:	af 91       	pop	r26
    1ada:	9f 91       	pop	r25
    1adc:	8f 91       	pop	r24
    1ade:	7f 91       	pop	r23
    1ae0:	6f 91       	pop	r22
    1ae2:	5f 91       	pop	r21
    1ae4:	4f 91       	pop	r20
    1ae6:	3f 91       	pop	r19
    1ae8:	2f 91       	pop	r18
    1aea:	0f 90       	pop	r0
    1aec:	0b be       	out	0x3b, r0	; 59
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <__vector_110>:
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	0b b6       	in	r0, 0x3b	; 59
    1b04:	0f 92       	push	r0
    1b06:	2f 93       	push	r18
    1b08:	3f 93       	push	r19
    1b0a:	4f 93       	push	r20
    1b0c:	5f 93       	push	r21
    1b0e:	6f 93       	push	r22
    1b10:	7f 93       	push	r23
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	af 93       	push	r26
    1b18:	bf 93       	push	r27
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31
    1b1e:	e0 91 84 22 	lds	r30, 0x2284	; 0x802284 <tc_tcf0_cca_callback>
    1b22:	f0 91 85 22 	lds	r31, 0x2285	; 0x802285 <tc_tcf0_cca_callback+0x1>
    1b26:	30 97       	sbiw	r30, 0x00	; 0
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <__vector_110+0x34>
    1b2a:	19 95       	eicall
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	7f 91       	pop	r23
    1b3a:	6f 91       	pop	r22
    1b3c:	5f 91       	pop	r21
    1b3e:	4f 91       	pop	r20
    1b40:	3f 91       	pop	r19
    1b42:	2f 91       	pop	r18
    1b44:	0f 90       	pop	r0
    1b46:	0b be       	out	0x3b, r0	; 59
    1b48:	0f 90       	pop	r0
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	0f 90       	pop	r0
    1b4e:	1f 90       	pop	r1
    1b50:	18 95       	reti

00001b52 <__vector_111>:
    1b52:	1f 92       	push	r1
    1b54:	0f 92       	push	r0
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	0f 92       	push	r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	0b b6       	in	r0, 0x3b	; 59
    1b5e:	0f 92       	push	r0
    1b60:	2f 93       	push	r18
    1b62:	3f 93       	push	r19
    1b64:	4f 93       	push	r20
    1b66:	5f 93       	push	r21
    1b68:	6f 93       	push	r22
    1b6a:	7f 93       	push	r23
    1b6c:	8f 93       	push	r24
    1b6e:	9f 93       	push	r25
    1b70:	af 93       	push	r26
    1b72:	bf 93       	push	r27
    1b74:	ef 93       	push	r30
    1b76:	ff 93       	push	r31
    1b78:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <tc_tcf0_ccb_callback>
    1b7c:	f0 91 83 22 	lds	r31, 0x2283	; 0x802283 <tc_tcf0_ccb_callback+0x1>
    1b80:	30 97       	sbiw	r30, 0x00	; 0
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <__vector_111+0x34>
    1b84:	19 95       	eicall
    1b86:	ff 91       	pop	r31
    1b88:	ef 91       	pop	r30
    1b8a:	bf 91       	pop	r27
    1b8c:	af 91       	pop	r26
    1b8e:	9f 91       	pop	r25
    1b90:	8f 91       	pop	r24
    1b92:	7f 91       	pop	r23
    1b94:	6f 91       	pop	r22
    1b96:	5f 91       	pop	r21
    1b98:	4f 91       	pop	r20
    1b9a:	3f 91       	pop	r19
    1b9c:	2f 91       	pop	r18
    1b9e:	0f 90       	pop	r0
    1ba0:	0b be       	out	0x3b, r0	; 59
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 90       	pop	r1
    1baa:	18 95       	reti

00001bac <__vector_112>:
    1bac:	1f 92       	push	r1
    1bae:	0f 92       	push	r0
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	0f 92       	push	r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	0b b6       	in	r0, 0x3b	; 59
    1bb8:	0f 92       	push	r0
    1bba:	2f 93       	push	r18
    1bbc:	3f 93       	push	r19
    1bbe:	4f 93       	push	r20
    1bc0:	5f 93       	push	r21
    1bc2:	6f 93       	push	r22
    1bc4:	7f 93       	push	r23
    1bc6:	8f 93       	push	r24
    1bc8:	9f 93       	push	r25
    1bca:	af 93       	push	r26
    1bcc:	bf 93       	push	r27
    1bce:	ef 93       	push	r30
    1bd0:	ff 93       	push	r31
    1bd2:	e0 91 80 22 	lds	r30, 0x2280	; 0x802280 <tc_tcf0_ccc_callback>
    1bd6:	f0 91 81 22 	lds	r31, 0x2281	; 0x802281 <tc_tcf0_ccc_callback+0x1>
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <__vector_112+0x34>
    1bde:	19 95       	eicall
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0b be       	out	0x3b, r0	; 59
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	0f 90       	pop	r0
    1c02:	1f 90       	pop	r1
    1c04:	18 95       	reti

00001c06 <__vector_113>:
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	0b b6       	in	r0, 0x3b	; 59
    1c12:	0f 92       	push	r0
    1c14:	2f 93       	push	r18
    1c16:	3f 93       	push	r19
    1c18:	4f 93       	push	r20
    1c1a:	5f 93       	push	r21
    1c1c:	6f 93       	push	r22
    1c1e:	7f 93       	push	r23
    1c20:	8f 93       	push	r24
    1c22:	9f 93       	push	r25
    1c24:	af 93       	push	r26
    1c26:	bf 93       	push	r27
    1c28:	ef 93       	push	r30
    1c2a:	ff 93       	push	r31
    1c2c:	e0 91 7e 22 	lds	r30, 0x227E	; 0x80227e <tc_tcf0_ccd_callback>
    1c30:	f0 91 7f 22 	lds	r31, 0x227F	; 0x80227f <tc_tcf0_ccd_callback+0x1>
    1c34:	30 97       	sbiw	r30, 0x00	; 0
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <__vector_113+0x34>
    1c38:	19 95       	eicall
    1c3a:	ff 91       	pop	r31
    1c3c:	ef 91       	pop	r30
    1c3e:	bf 91       	pop	r27
    1c40:	af 91       	pop	r26
    1c42:	9f 91       	pop	r25
    1c44:	8f 91       	pop	r24
    1c46:	7f 91       	pop	r23
    1c48:	6f 91       	pop	r22
    1c4a:	5f 91       	pop	r21
    1c4c:	4f 91       	pop	r20
    1c4e:	3f 91       	pop	r19
    1c50:	2f 91       	pop	r18
    1c52:	0f 90       	pop	r0
    1c54:	0b be       	out	0x3b, r0	; 59
    1c56:	0f 90       	pop	r0
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	0f 90       	pop	r0
    1c5c:	1f 90       	pop	r1
    1c5e:	18 95       	reti

00001c60 <tc_enable>:
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	1f 92       	push	r1
    1c68:	1f 92       	push	r1
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	2f b7       	in	r18, 0x3f	; 63
    1c70:	2a 83       	std	Y+2, r18	; 0x02
    1c72:	f8 94       	cli
    1c74:	1a 81       	ldd	r17, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	39 2f       	mov	r19, r25
    1c7a:	21 15       	cp	r18, r1
    1c7c:	88 e0       	ldi	r24, 0x08	; 8
    1c7e:	38 07       	cpc	r19, r24
    1c80:	49 f4       	brne	.+18     	; 0x1c94 <tc_enable+0x34>
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1c8a:	64 e0       	ldi	r22, 0x04	; 4
    1c8c:	83 e0       	ldi	r24, 0x03	; 3
    1c8e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1c92:	4f c0       	rjmp	.+158    	; 0x1d32 <tc_enable+0xd2>
    1c94:	20 34       	cpi	r18, 0x40	; 64
    1c96:	88 e0       	ldi	r24, 0x08	; 8
    1c98:	38 07       	cpc	r19, r24
    1c9a:	49 f4       	brne	.+18     	; 0x1cae <tc_enable+0x4e>
    1c9c:	62 e0       	ldi	r22, 0x02	; 2
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1ca4:	64 e0       	ldi	r22, 0x04	; 4
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1cac:	42 c0       	rjmp	.+132    	; 0x1d32 <tc_enable+0xd2>
    1cae:	21 15       	cp	r18, r1
    1cb0:	89 e0       	ldi	r24, 0x09	; 9
    1cb2:	38 07       	cpc	r19, r24
    1cb4:	49 f4       	brne	.+18     	; 0x1cc8 <tc_enable+0x68>
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1cbe:	64 e0       	ldi	r22, 0x04	; 4
    1cc0:	84 e0       	ldi	r24, 0x04	; 4
    1cc2:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1cc6:	35 c0       	rjmp	.+106    	; 0x1d32 <tc_enable+0xd2>
    1cc8:	20 34       	cpi	r18, 0x40	; 64
    1cca:	89 e0       	ldi	r24, 0x09	; 9
    1ccc:	38 07       	cpc	r19, r24
    1cce:	49 f4       	brne	.+18     	; 0x1ce2 <tc_enable+0x82>
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1cd8:	64 e0       	ldi	r22, 0x04	; 4
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1ce0:	28 c0       	rjmp	.+80     	; 0x1d32 <tc_enable+0xd2>
    1ce2:	21 15       	cp	r18, r1
    1ce4:	8a e0       	ldi	r24, 0x0A	; 10
    1ce6:	38 07       	cpc	r19, r24
    1ce8:	49 f4       	brne	.+18     	; 0x1cfc <tc_enable+0x9c>
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	85 e0       	ldi	r24, 0x05	; 5
    1cee:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	85 e0       	ldi	r24, 0x05	; 5
    1cf6:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1cfa:	1b c0       	rjmp	.+54     	; 0x1d32 <tc_enable+0xd2>
    1cfc:	20 34       	cpi	r18, 0x40	; 64
    1cfe:	8a e0       	ldi	r24, 0x0A	; 10
    1d00:	38 07       	cpc	r19, r24
    1d02:	49 f4       	brne	.+18     	; 0x1d16 <tc_enable+0xb6>
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	85 e0       	ldi	r24, 0x05	; 5
    1d08:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1d0c:	64 e0       	ldi	r22, 0x04	; 4
    1d0e:	85 e0       	ldi	r24, 0x05	; 5
    1d10:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1d14:	0e c0       	rjmp	.+28     	; 0x1d32 <tc_enable+0xd2>
    1d16:	21 15       	cp	r18, r1
    1d18:	3b 40       	sbci	r19, 0x0B	; 11
    1d1a:	49 f4       	brne	.+18     	; 0x1d2e <tc_enable+0xce>
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	86 e0       	ldi	r24, 0x06	; 6
    1d20:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1d24:	64 e0       	ldi	r22, 0x04	; 4
    1d26:	86 e0       	ldi	r24, 0x06	; 6
    1d28:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <tc_enable+0xd2>
    1d2e:	1f bf       	out	0x3f, r17	; 63
    1d30:	10 c0       	rjmp	.+32     	; 0x1d52 <tc_enable+0xf2>
    1d32:	80 91 c0 24 	lds	r24, 0x24C0	; 0x8024c0 <sleepmgr_locks+0x1>
    1d36:	8f 3f       	cpi	r24, 0xFF	; 255
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <tc_enable+0xdc>
    1d3a:	ff cf       	rjmp	.-2      	; 0x1d3a <tc_enable+0xda>
    1d3c:	8f b7       	in	r24, 0x3f	; 63
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	f8 94       	cli
    1d42:	99 81       	ldd	r25, Y+1	; 0x01
    1d44:	ef eb       	ldi	r30, 0xBF	; 191
    1d46:	f4 e2       	ldi	r31, 0x24	; 36
    1d48:	81 81       	ldd	r24, Z+1	; 0x01
    1d4a:	8f 5f       	subi	r24, 0xFF	; 255
    1d4c:	81 83       	std	Z+1, r24	; 0x01
    1d4e:	9f bf       	out	0x3f, r25	; 63
    1d50:	1f bf       	out	0x3f, r17	; 63
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	08 95       	ret

00001d5e <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1d5e:	81 15       	cp	r24, r1
    1d60:	28 e0       	ldi	r18, 0x08	; 8
    1d62:	92 07       	cpc	r25, r18
    1d64:	29 f4       	brne	.+10     	; 0x1d70 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    1d66:	60 93 c4 22 	sts	0x22C4, r22	; 0x8022c4 <tc_tcc0_ovf_callback>
    1d6a:	70 93 c5 22 	sts	0x22C5, r23	; 0x8022c5 <tc_tcc0_ovf_callback+0x1>
    1d6e:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1d70:	80 34       	cpi	r24, 0x40	; 64
    1d72:	28 e0       	ldi	r18, 0x08	; 8
    1d74:	92 07       	cpc	r25, r18
    1d76:	29 f4       	brne	.+10     	; 0x1d82 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    1d78:	60 93 b8 22 	sts	0x22B8, r22	; 0x8022b8 <tc_tcc1_ovf_callback>
    1d7c:	70 93 b9 22 	sts	0x22B9, r23	; 0x8022b9 <tc_tcc1_ovf_callback+0x1>
    1d80:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1d82:	81 15       	cp	r24, r1
    1d84:	29 e0       	ldi	r18, 0x09	; 9
    1d86:	92 07       	cpc	r25, r18
    1d88:	29 f4       	brne	.+10     	; 0x1d94 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    1d8a:	60 93 b0 22 	sts	0x22B0, r22	; 0x8022b0 <tc_tcd0_ovf_callback>
    1d8e:	70 93 b1 22 	sts	0x22B1, r23	; 0x8022b1 <tc_tcd0_ovf_callback+0x1>
    1d92:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1d94:	80 34       	cpi	r24, 0x40	; 64
    1d96:	29 e0       	ldi	r18, 0x09	; 9
    1d98:	92 07       	cpc	r25, r18
    1d9a:	29 f4       	brne	.+10     	; 0x1da6 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1d9c:	60 93 a4 22 	sts	0x22A4, r22	; 0x8022a4 <tc_tcd1_ovf_callback>
    1da0:	70 93 a5 22 	sts	0x22A5, r23	; 0x8022a5 <tc_tcd1_ovf_callback+0x1>
    1da4:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1da6:	81 15       	cp	r24, r1
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	92 07       	cpc	r25, r18
    1dac:	29 f4       	brne	.+10     	; 0x1db8 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    1dae:	60 93 9c 22 	sts	0x229C, r22	; 0x80229c <tc_tce0_ovf_callback>
    1db2:	70 93 9d 22 	sts	0x229D, r23	; 0x80229d <tc_tce0_ovf_callback+0x1>
    1db6:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1db8:	80 34       	cpi	r24, 0x40	; 64
    1dba:	2a e0       	ldi	r18, 0x0A	; 10
    1dbc:	92 07       	cpc	r25, r18
    1dbe:	29 f4       	brne	.+10     	; 0x1dca <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    1dc0:	60 93 90 22 	sts	0x2290, r22	; 0x802290 <tc_tce1_ovf_callback>
    1dc4:	70 93 91 22 	sts	0x2291, r23	; 0x802291 <tc_tce1_ovf_callback+0x1>
    1dc8:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1dca:	81 15       	cp	r24, r1
    1dcc:	9b 40       	sbci	r25, 0x0B	; 11
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    1dd0:	60 93 88 22 	sts	0x2288, r22	; 0x802288 <tc_tcf0_ovf_callback>
    1dd4:	70 93 89 22 	sts	0x2289, r23	; 0x802289 <tc_tcf0_ovf_callback+0x1>
    1dd8:	08 95       	ret

00001dda <usart_getchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1dda:	fc 01       	movw	r30, r24
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	99 23       	and	r25, r25
    1de0:	ec f7       	brge	.-6      	; 0x1ddc <usart_getchar+0x2>
    1de2:	80 81       	ld	r24, Z
    1de4:	08 95       	ret

00001de6 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1de6:	4f 92       	push	r4
    1de8:	5f 92       	push	r5
    1dea:	6f 92       	push	r6
    1dec:	7f 92       	push	r7
    1dee:	8f 92       	push	r8
    1df0:	9f 92       	push	r9
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	7c 01       	movw	r14, r24
    1e02:	4a 01       	movw	r8, r20
    1e04:	5b 01       	movw	r10, r22
    1e06:	28 01       	movw	r4, r16
    1e08:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	84 81       	ldd	r24, Z+4	; 0x04
    1e0e:	82 ff       	sbrs	r24, 2
    1e10:	16 c0       	rjmp	.+44     	; 0x1e3e <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1e12:	d9 01       	movw	r26, r18
    1e14:	c8 01       	movw	r24, r16
    1e16:	68 94       	set
    1e18:	12 f8       	bld	r1, 2
    1e1a:	b6 95       	lsr	r27
    1e1c:	a7 95       	ror	r26
    1e1e:	97 95       	ror	r25
    1e20:	87 95       	ror	r24
    1e22:	16 94       	lsr	r1
    1e24:	d1 f7       	brne	.-12     	; 0x1e1a <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1e26:	b9 01       	movw	r22, r18
    1e28:	a8 01       	movw	r20, r16
    1e2a:	03 2e       	mov	r0, r19
    1e2c:	36 e1       	ldi	r19, 0x16	; 22
    1e2e:	76 95       	lsr	r23
    1e30:	67 95       	ror	r22
    1e32:	57 95       	ror	r21
    1e34:	47 95       	ror	r20
    1e36:	3a 95       	dec	r19
    1e38:	d1 f7       	brne	.-12     	; 0x1e2e <usart_set_baudrate+0x48>
    1e3a:	30 2d       	mov	r19, r0
    1e3c:	15 c0       	rjmp	.+42     	; 0x1e68 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1e3e:	d9 01       	movw	r26, r18
    1e40:	c8 01       	movw	r24, r16
    1e42:	68 94       	set
    1e44:	13 f8       	bld	r1, 3
    1e46:	b6 95       	lsr	r27
    1e48:	a7 95       	ror	r26
    1e4a:	97 95       	ror	r25
    1e4c:	87 95       	ror	r24
    1e4e:	16 94       	lsr	r1
    1e50:	d1 f7       	brne	.-12     	; 0x1e46 <usart_set_baudrate+0x60>
		min_rate /= 2;
    1e52:	b9 01       	movw	r22, r18
    1e54:	a8 01       	movw	r20, r16
    1e56:	03 2e       	mov	r0, r19
    1e58:	37 e1       	ldi	r19, 0x17	; 23
    1e5a:	76 95       	lsr	r23
    1e5c:	67 95       	ror	r22
    1e5e:	57 95       	ror	r21
    1e60:	47 95       	ror	r20
    1e62:	3a 95       	dec	r19
    1e64:	d1 f7       	brne	.-12     	; 0x1e5a <usart_set_baudrate+0x74>
    1e66:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1e68:	88 15       	cp	r24, r8
    1e6a:	99 05       	cpc	r25, r9
    1e6c:	aa 05       	cpc	r26, r10
    1e6e:	bb 05       	cpc	r27, r11
    1e70:	08 f4       	brcc	.+2      	; 0x1e74 <usart_set_baudrate+0x8e>
    1e72:	a2 c0       	rjmp	.+324    	; 0x1fb8 <usart_set_baudrate+0x1d2>
    1e74:	84 16       	cp	r8, r20
    1e76:	95 06       	cpc	r9, r21
    1e78:	a6 06       	cpc	r10, r22
    1e7a:	b7 06       	cpc	r11, r23
    1e7c:	08 f4       	brcc	.+2      	; 0x1e80 <usart_set_baudrate+0x9a>
    1e7e:	9e c0       	rjmp	.+316    	; 0x1fbc <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1e80:	f7 01       	movw	r30, r14
    1e82:	84 81       	ldd	r24, Z+4	; 0x04
    1e84:	82 fd       	sbrc	r24, 2
    1e86:	04 c0       	rjmp	.+8      	; 0x1e90 <usart_set_baudrate+0xaa>
		baud *= 2;
    1e88:	88 0c       	add	r8, r8
    1e8a:	99 1c       	adc	r9, r9
    1e8c:	aa 1c       	adc	r10, r10
    1e8e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1e90:	c3 01       	movw	r24, r6
    1e92:	b2 01       	movw	r22, r4
    1e94:	a5 01       	movw	r20, r10
    1e96:	94 01       	movw	r18, r8
    1e98:	0c d7       	rcall	.+3608   	; 0x2cb2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1e9a:	2f 3f       	cpi	r18, 0xFF	; 255
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	41 05       	cpc	r20, r1
    1ea0:	51 05       	cpc	r21, r1
    1ea2:	08 f4       	brcc	.+2      	; 0x1ea6 <usart_set_baudrate+0xc0>
    1ea4:	8d c0       	rjmp	.+282    	; 0x1fc0 <usart_set_baudrate+0x1da>
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e0       	ldi	r26, 0x00	; 0
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	c9 ef       	ldi	r28, 0xF9	; 249
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <usart_set_baudrate+0xd6>
    1eb2:	28 17       	cp	r18, r24
    1eb4:	39 07       	cpc	r19, r25
    1eb6:	4a 07       	cpc	r20, r26
    1eb8:	5b 07       	cpc	r21, r27
    1eba:	58 f0       	brcs	.+22     	; 0x1ed2 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	aa 1f       	adc	r26, r26
    1ec2:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1ec4:	cd 3f       	cpi	r28, 0xFD	; 253
    1ec6:	0c f4       	brge	.+2      	; 0x1eca <usart_set_baudrate+0xe4>
			limit |= 1;
    1ec8:	81 60       	ori	r24, 0x01	; 1
    1eca:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1ecc:	c7 30       	cpi	r28, 0x07	; 7
    1ece:	89 f7       	brne	.-30     	; 0x1eb2 <usart_set_baudrate+0xcc>
    1ed0:	4d c0       	rjmp	.+154    	; 0x1f6c <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1ed2:	cc 23       	and	r28, r28
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <usart_set_baudrate+0xf2>
    1ed6:	4a c0       	rjmp	.+148    	; 0x1f6c <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1ed8:	d5 01       	movw	r26, r10
    1eda:	c4 01       	movw	r24, r8
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	aa 1f       	adc	r26, r26
    1eea:	bb 1f       	adc	r27, r27
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	aa 1f       	adc	r26, r26
    1ef2:	bb 1f       	adc	r27, r27
    1ef4:	48 1a       	sub	r4, r24
    1ef6:	59 0a       	sbc	r5, r25
    1ef8:	6a 0a       	sbc	r6, r26
    1efa:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1efc:	ce 3f       	cpi	r28, 0xFE	; 254
    1efe:	ec f4       	brge	.+58     	; 0x1f3a <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1f00:	8d ef       	ldi	r24, 0xFD	; 253
    1f02:	9f ef       	ldi	r25, 0xFF	; 255
    1f04:	8c 1b       	sub	r24, r28
    1f06:	91 09       	sbc	r25, r1
    1f08:	c7 fd       	sbrc	r28, 7
    1f0a:	93 95       	inc	r25
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <usart_set_baudrate+0x130>
    1f0e:	44 0c       	add	r4, r4
    1f10:	55 1c       	adc	r5, r5
    1f12:	66 1c       	adc	r6, r6
    1f14:	77 1c       	adc	r7, r7
    1f16:	8a 95       	dec	r24
    1f18:	d2 f7       	brpl	.-12     	; 0x1f0e <usart_set_baudrate+0x128>
    1f1a:	d5 01       	movw	r26, r10
    1f1c:	c4 01       	movw	r24, r8
    1f1e:	b6 95       	lsr	r27
    1f20:	a7 95       	ror	r26
    1f22:	97 95       	ror	r25
    1f24:	87 95       	ror	r24
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	64 0d       	add	r22, r4
    1f2c:	75 1d       	adc	r23, r5
    1f2e:	86 1d       	adc	r24, r6
    1f30:	97 1d       	adc	r25, r7
    1f32:	a5 01       	movw	r20, r10
    1f34:	94 01       	movw	r18, r8
    1f36:	bd d6       	rcall	.+3450   	; 0x2cb2 <__udivmodsi4>
    1f38:	35 c0       	rjmp	.+106    	; 0x1fa4 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	8c 0f       	add	r24, r28
    1f3e:	a5 01       	movw	r20, r10
    1f40:	94 01       	movw	r18, r8
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <usart_set_baudrate+0x166>
    1f44:	22 0f       	add	r18, r18
    1f46:	33 1f       	adc	r19, r19
    1f48:	44 1f       	adc	r20, r20
    1f4a:	55 1f       	adc	r21, r21
    1f4c:	8a 95       	dec	r24
    1f4e:	d2 f7       	brpl	.-12     	; 0x1f44 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
    1f50:	da 01       	movw	r26, r20
    1f52:	c9 01       	movw	r24, r18
    1f54:	b6 95       	lsr	r27
    1f56:	a7 95       	ror	r26
    1f58:	97 95       	ror	r25
    1f5a:	87 95       	ror	r24
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	64 0d       	add	r22, r4
    1f62:	75 1d       	adc	r23, r5
    1f64:	86 1d       	adc	r24, r6
    1f66:	97 1d       	adc	r25, r7
    1f68:	a4 d6       	rcall	.+3400   	; 0x2cb2 <__udivmodsi4>
    1f6a:	1c c0       	rjmp	.+56     	; 0x1fa4 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	8c 0f       	add	r24, r28
    1f70:	a5 01       	movw	r20, r10
    1f72:	94 01       	movw	r18, r8
    1f74:	04 c0       	rjmp	.+8      	; 0x1f7e <usart_set_baudrate+0x198>
    1f76:	22 0f       	add	r18, r18
    1f78:	33 1f       	adc	r19, r19
    1f7a:	44 1f       	adc	r20, r20
    1f7c:	55 1f       	adc	r21, r21
    1f7e:	8a 95       	dec	r24
    1f80:	d2 f7       	brpl	.-12     	; 0x1f76 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
    1f82:	da 01       	movw	r26, r20
    1f84:	c9 01       	movw	r24, r18
    1f86:	b6 95       	lsr	r27
    1f88:	a7 95       	ror	r26
    1f8a:	97 95       	ror	r25
    1f8c:	87 95       	ror	r24
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	64 0d       	add	r22, r4
    1f94:	75 1d       	adc	r23, r5
    1f96:	86 1d       	adc	r24, r6
    1f98:	97 1d       	adc	r25, r7
    1f9a:	8b d6       	rcall	.+3350   	; 0x2cb2 <__udivmodsi4>
    1f9c:	21 50       	subi	r18, 0x01	; 1
    1f9e:	31 09       	sbc	r19, r1
    1fa0:	41 09       	sbc	r20, r1
    1fa2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1fa4:	83 2f       	mov	r24, r19
    1fa6:	8f 70       	andi	r24, 0x0F	; 15
    1fa8:	c2 95       	swap	r28
    1faa:	c0 7f       	andi	r28, 0xF0	; 240
    1fac:	c8 2b       	or	r28, r24
    1fae:	f7 01       	movw	r30, r14
    1fb0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1fb2:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	18 c0       	rjmp	.+48     	; 0x1fe8 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	16 c0       	rjmp	.+44     	; 0x1fe8 <usart_set_baudrate+0x202>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	14 c0       	rjmp	.+40     	; 0x1fe8 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1fc0:	d5 01       	movw	r26, r10
    1fc2:	c4 01       	movw	r24, r8
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	aa 1f       	adc	r26, r26
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	aa 1f       	adc	r26, r26
    1fd2:	bb 1f       	adc	r27, r27
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	aa 1f       	adc	r26, r26
    1fda:	bb 1f       	adc	r27, r27
    1fdc:	48 1a       	sub	r4, r24
    1fde:	59 0a       	sbc	r5, r25
    1fe0:	6a 0a       	sbc	r6, r26
    1fe2:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1fe4:	c9 ef       	ldi	r28, 0xF9	; 249
    1fe6:	8c cf       	rjmp	.-232    	; 0x1f00 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1fe8:	cf 91       	pop	r28
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	ff 90       	pop	r15
    1ff0:	ef 90       	pop	r14
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	9f 90       	pop	r9
    1ff8:	8f 90       	pop	r8
    1ffa:	7f 90       	pop	r7
    1ffc:	6f 90       	pop	r6
    1ffe:	5f 90       	pop	r5
    2000:	4f 90       	pop	r4
    2002:	08 95       	ret

00002004 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	ec 01       	movw	r28, r24
    200e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	09 f4       	brne	.+2      	; 0x2016 <usart_init_rs232+0x12>
    2014:	03 c1       	rjmp	.+518    	; 0x221c <usart_init_rs232+0x218>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2016:	80 3c       	cpi	r24, 0xC0	; 192
    2018:	91 05       	cpc	r25, r1
    201a:	29 f4       	brne	.+10     	; 0x2026 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    201c:	60 e1       	ldi	r22, 0x10	; 16
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2024:	fb c0       	rjmp	.+502    	; 0x221c <usart_init_rs232+0x218>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2026:	c0 38       	cpi	r28, 0x80	; 128
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	d8 07       	cpc	r29, r24
    202c:	29 f4       	brne	.+10     	; 0x2038 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2036:	f2 c0       	rjmp	.+484    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2038:	c1 15       	cp	r28, r1
    203a:	e1 e0       	ldi	r30, 0x01	; 1
    203c:	de 07       	cpc	r29, r30
    203e:	29 f4       	brne	.+10     	; 0x204a <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2048:	e9 c0       	rjmp	.+466    	; 0x221c <usart_init_rs232+0x218>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    204a:	c0 38       	cpi	r28, 0x80	; 128
    204c:	f3 e0       	ldi	r31, 0x03	; 3
    204e:	df 07       	cpc	r29, r31
    2050:	29 f4       	brne	.+10     	; 0x205c <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    205a:	e0 c0       	rjmp	.+448    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    205c:	c0 39       	cpi	r28, 0x90	; 144
    205e:	83 e0       	ldi	r24, 0x03	; 3
    2060:	d8 07       	cpc	r29, r24
    2062:	29 f4       	brne	.+10     	; 0x206e <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    206c:	d7 c0       	rjmp	.+430    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    206e:	c1 15       	cp	r28, r1
    2070:	e2 e0       	ldi	r30, 0x02	; 2
    2072:	de 07       	cpc	r29, r30
    2074:	29 f4       	brne	.+10     	; 0x2080 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2076:	62 e0       	ldi	r22, 0x02	; 2
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    207e:	ce c0       	rjmp	.+412    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2080:	c0 34       	cpi	r28, 0x40	; 64
    2082:	f2 e0       	ldi	r31, 0x02	; 2
    2084:	df 07       	cpc	r29, r31
    2086:	29 f4       	brne	.+10     	; 0x2092 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2088:	62 e0       	ldi	r22, 0x02	; 2
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2090:	c5 c0       	rjmp	.+394    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2092:	c0 32       	cpi	r28, 0x20	; 32
    2094:	83 e0       	ldi	r24, 0x03	; 3
    2096:	d8 07       	cpc	r29, r24
    2098:	29 f4       	brne	.+10     	; 0x20a4 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    20a2:	bc c0       	rjmp	.+376    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    20a4:	c1 15       	cp	r28, r1
    20a6:	e8 e0       	ldi	r30, 0x08	; 8
    20a8:	de 07       	cpc	r29, r30
    20aa:	29 f4       	brne	.+10     	; 0x20b6 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    20b4:	b3 c0       	rjmp	.+358    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    20b6:	c1 15       	cp	r28, r1
    20b8:	f9 e0       	ldi	r31, 0x09	; 9
    20ba:	df 07       	cpc	r29, r31
    20bc:	29 f4       	brne	.+10     	; 0x20c8 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	84 e0       	ldi	r24, 0x04	; 4
    20c2:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    20c6:	aa c0       	rjmp	.+340    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    20c8:	c1 15       	cp	r28, r1
    20ca:	8a e0       	ldi	r24, 0x0A	; 10
    20cc:	d8 07       	cpc	r29, r24
    20ce:	29 f4       	brne	.+10     	; 0x20da <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    20d0:	61 e0       	ldi	r22, 0x01	; 1
    20d2:	85 e0       	ldi	r24, 0x05	; 5
    20d4:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    20d8:	a1 c0       	rjmp	.+322    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    20da:	c1 15       	cp	r28, r1
    20dc:	eb e0       	ldi	r30, 0x0B	; 11
    20de:	de 07       	cpc	r29, r30
    20e0:	29 f4       	brne	.+10     	; 0x20ec <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	86 e0       	ldi	r24, 0x06	; 6
    20e6:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    20ea:	98 c0       	rjmp	.+304    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    20ec:	c0 34       	cpi	r28, 0x40	; 64
    20ee:	f8 e0       	ldi	r31, 0x08	; 8
    20f0:	df 07       	cpc	r29, r31
    20f2:	29 f4       	brne	.+10     	; 0x20fe <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    20f4:	62 e0       	ldi	r22, 0x02	; 2
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    20fc:	8f c0       	rjmp	.+286    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    20fe:	c0 34       	cpi	r28, 0x40	; 64
    2100:	89 e0       	ldi	r24, 0x09	; 9
    2102:	d8 07       	cpc	r29, r24
    2104:	29 f4       	brne	.+10     	; 0x2110 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	84 e0       	ldi	r24, 0x04	; 4
    210a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    210e:	86 c0       	rjmp	.+268    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2110:	c0 34       	cpi	r28, 0x40	; 64
    2112:	ea e0       	ldi	r30, 0x0A	; 10
    2114:	de 07       	cpc	r29, r30
    2116:	29 f4       	brne	.+10     	; 0x2122 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	85 e0       	ldi	r24, 0x05	; 5
    211c:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2120:	7d c0       	rjmp	.+250    	; 0x221c <usart_init_rs232+0x218>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2122:	c0 39       	cpi	r28, 0x90	; 144
    2124:	f8 e0       	ldi	r31, 0x08	; 8
    2126:	df 07       	cpc	r29, r31
    2128:	29 f4       	brne	.+10     	; 0x2134 <usart_init_rs232+0x130>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    212a:	64 e0       	ldi	r22, 0x04	; 4
    212c:	83 e0       	ldi	r24, 0x03	; 3
    212e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2132:	74 c0       	rjmp	.+232    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2134:	c0 39       	cpi	r28, 0x90	; 144
    2136:	89 e0       	ldi	r24, 0x09	; 9
    2138:	d8 07       	cpc	r29, r24
    213a:	29 f4       	brne	.+10     	; 0x2146 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    213c:	64 e0       	ldi	r22, 0x04	; 4
    213e:	84 e0       	ldi	r24, 0x04	; 4
    2140:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2144:	6b c0       	rjmp	.+214    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2146:	c0 39       	cpi	r28, 0x90	; 144
    2148:	ea e0       	ldi	r30, 0x0A	; 10
    214a:	de 07       	cpc	r29, r30
    214c:	29 f4       	brne	.+10     	; 0x2158 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    214e:	64 e0       	ldi	r22, 0x04	; 4
    2150:	85 e0       	ldi	r24, 0x05	; 5
    2152:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2156:	62 c0       	rjmp	.+196    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2158:	c0 39       	cpi	r28, 0x90	; 144
    215a:	fb e0       	ldi	r31, 0x0B	; 11
    215c:	df 07       	cpc	r29, r31
    215e:	29 f4       	brne	.+10     	; 0x216a <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2160:	64 e0       	ldi	r22, 0x04	; 4
    2162:	86 e0       	ldi	r24, 0x06	; 6
    2164:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2168:	59 c0       	rjmp	.+178    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    216a:	c0 3c       	cpi	r28, 0xC0	; 192
    216c:	88 e0       	ldi	r24, 0x08	; 8
    216e:	d8 07       	cpc	r29, r24
    2170:	29 f4       	brne	.+10     	; 0x217c <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2172:	68 e0       	ldi	r22, 0x08	; 8
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    217a:	50 c0       	rjmp	.+160    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    217c:	c0 3c       	cpi	r28, 0xC0	; 192
    217e:	e9 e0       	ldi	r30, 0x09	; 9
    2180:	de 07       	cpc	r29, r30
    2182:	29 f4       	brne	.+10     	; 0x218e <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2184:	68 e0       	ldi	r22, 0x08	; 8
    2186:	84 e0       	ldi	r24, 0x04	; 4
    2188:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    218c:	47 c0       	rjmp	.+142    	; 0x221c <usart_init_rs232+0x218>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    218e:	c0 3a       	cpi	r28, 0xA0	; 160
    2190:	f8 e0       	ldi	r31, 0x08	; 8
    2192:	df 07       	cpc	r29, r31
    2194:	29 f4       	brne	.+10     	; 0x21a0 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2196:	60 e1       	ldi	r22, 0x10	; 16
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    219e:	3e c0       	rjmp	.+124    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    21a0:	c0 3a       	cpi	r28, 0xA0	; 160
    21a2:	89 e0       	ldi	r24, 0x09	; 9
    21a4:	d8 07       	cpc	r29, r24
    21a6:	29 f4       	brne	.+10     	; 0x21b2 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    21a8:	60 e1       	ldi	r22, 0x10	; 16
    21aa:	84 e0       	ldi	r24, 0x04	; 4
    21ac:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    21b0:	35 c0       	rjmp	.+106    	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    21b2:	c0 3a       	cpi	r28, 0xA0	; 160
    21b4:	ea e0       	ldi	r30, 0x0A	; 10
    21b6:	de 07       	cpc	r29, r30
    21b8:	29 f4       	brne	.+10     	; 0x21c4 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    21ba:	60 e1       	ldi	r22, 0x10	; 16
    21bc:	85 e0       	ldi	r24, 0x05	; 5
    21be:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    21c2:	2c c0       	rjmp	.+88     	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    21c4:	c0 3a       	cpi	r28, 0xA0	; 160
    21c6:	fb e0       	ldi	r31, 0x0B	; 11
    21c8:	df 07       	cpc	r29, r31
    21ca:	29 f4       	brne	.+10     	; 0x21d6 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    21cc:	60 e1       	ldi	r22, 0x10	; 16
    21ce:	86 e0       	ldi	r24, 0x06	; 6
    21d0:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    21d4:	23 c0       	rjmp	.+70     	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    21d6:	c0 3b       	cpi	r28, 0xB0	; 176
    21d8:	88 e0       	ldi	r24, 0x08	; 8
    21da:	d8 07       	cpc	r29, r24
    21dc:	29 f4       	brne	.+10     	; 0x21e8 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    21de:	60 e2       	ldi	r22, 0x20	; 32
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    21e6:	1a c0       	rjmp	.+52     	; 0x221c <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    21e8:	c0 3b       	cpi	r28, 0xB0	; 176
    21ea:	e9 e0       	ldi	r30, 0x09	; 9
    21ec:	de 07       	cpc	r29, r30
    21ee:	29 f4       	brne	.+10     	; 0x21fa <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    21f0:	60 e2       	ldi	r22, 0x20	; 32
    21f2:	84 e0       	ldi	r24, 0x04	; 4
    21f4:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    21f8:	11 c0       	rjmp	.+34     	; 0x221c <usart_init_rs232+0x218>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    21fa:	c0 38       	cpi	r28, 0x80	; 128
    21fc:	f4 e0       	ldi	r31, 0x04	; 4
    21fe:	df 07       	cpc	r29, r31
    2200:	29 f4       	brne	.+10     	; 0x220c <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2202:	60 e4       	ldi	r22, 0x40	; 64
    2204:	83 e0       	ldi	r24, 0x03	; 3
    2206:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    220a:	08 c0       	rjmp	.+16     	; 0x221c <usart_init_rs232+0x218>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    220c:	c0 3a       	cpi	r28, 0xA0	; 160
    220e:	84 e0       	ldi	r24, 0x04	; 4
    2210:	d8 07       	cpc	r29, r24
    2212:	21 f4       	brne	.+8      	; 0x221c <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2214:	60 e4       	ldi	r22, 0x40	; 64
    2216:	85 e0       	ldi	r24, 0x05	; 5
    2218:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	8f 73       	andi	r24, 0x3F	; 63
    2220:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    2222:	f8 01       	movw	r30, r16
    2224:	95 81       	ldd	r25, Z+5	; 0x05
    2226:	84 81       	ldd	r24, Z+4	; 0x04
    2228:	89 2b       	or	r24, r25
    222a:	96 81       	ldd	r25, Z+6	; 0x06
    222c:	91 11       	cpse	r25, r1
    222e:	98 e0       	ldi	r25, 0x08	; 8
    2230:	89 2b       	or	r24, r25
    2232:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2234:	f8 01       	movw	r30, r16
    2236:	40 81       	ld	r20, Z
    2238:	51 81       	ldd	r21, Z+1	; 0x01
    223a:	62 81       	ldd	r22, Z+2	; 0x02
    223c:	73 81       	ldd	r23, Z+3	; 0x03
    223e:	00 e8       	ldi	r16, 0x80	; 128
    2240:	14 e8       	ldi	r17, 0x84	; 132
    2242:	2e e1       	ldi	r18, 0x1E	; 30
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	ce 01       	movw	r24, r28
    2248:	ce dd       	rcall	.-1124   	; 0x1de6 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	98 60       	ori	r25, 0x08	; 8
    224e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	90 61       	ori	r25, 0x10	; 16
    2254:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	08 95       	ret

00002260 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    2272:	d9 01       	movw	r26, r18
    2274:	c8 01       	movw	r24, r16
    2276:	b6 95       	lsr	r27
    2278:	a7 95       	ror	r26
    227a:	97 95       	ror	r25
    227c:	87 95       	ror	r24
    227e:	48 17       	cp	r20, r24
    2280:	59 07       	cpc	r21, r25
    2282:	6a 07       	cpc	r22, r26
    2284:	7b 07       	cpc	r23, r27
    2286:	70 f4       	brcc	.+28     	; 0x22a4 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    2288:	6a 01       	movw	r12, r20
    228a:	7b 01       	movw	r14, r22
    228c:	cc 0c       	add	r12, r12
    228e:	dd 1c       	adc	r13, r13
    2290:	ee 1c       	adc	r14, r14
    2292:	ff 1c       	adc	r15, r15
    2294:	c9 01       	movw	r24, r18
    2296:	b8 01       	movw	r22, r16
    2298:	a7 01       	movw	r20, r14
    229a:	96 01       	movw	r18, r12
    229c:	0a d5       	rcall	.+2580   	; 0x2cb2 <__udivmodsi4>
    229e:	21 50       	subi	r18, 0x01	; 1
    22a0:	31 09       	sbc	r19, r1
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    22a8:	83 2f       	mov	r24, r19
    22aa:	8f 70       	andi	r24, 0x0F	; 15
    22ac:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    22ae:	2e 83       	std	Y+6, r18	; 0x06
}
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	ff 90       	pop	r15
    22ba:	ef 90       	pop	r14
    22bc:	df 90       	pop	r13
    22be:	cf 90       	pop	r12
    22c0:	08 95       	ret

000022c2 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	1f 92       	push	r1
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	7c 01       	movw	r14, r24
    22d8:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <usart_init_spi+0x1e>
    22de:	cf c1       	rjmp	.+926    	; 0x267e <usart_init_spi+0x3bc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    22e0:	80 3c       	cpi	r24, 0xC0	; 192
    22e2:	91 05       	cpc	r25, r1
    22e4:	29 f4       	brne	.+10     	; 0x22f0 <usart_init_spi+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    22e6:	60 e1       	ldi	r22, 0x10	; 16
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    22ee:	c7 c1       	rjmp	.+910    	; 0x267e <usart_init_spi+0x3bc>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    22f0:	80 e8       	ldi	r24, 0x80	; 128
    22f2:	e8 16       	cp	r14, r24
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	f8 06       	cpc	r15, r24
    22f8:	29 f4       	brne	.+10     	; 0x2304 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2302:	bd c1       	rjmp	.+890    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2304:	e1 14       	cp	r14, r1
    2306:	e1 e0       	ldi	r30, 0x01	; 1
    2308:	fe 06       	cpc	r15, r30
    230a:	29 f4       	brne	.+10     	; 0x2316 <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    230c:	61 e0       	ldi	r22, 0x01	; 1
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2314:	b4 c1       	rjmp	.+872    	; 0x267e <usart_init_spi+0x3bc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2316:	f0 e8       	ldi	r31, 0x80	; 128
    2318:	ef 16       	cp	r14, r31
    231a:	f3 e0       	ldi	r31, 0x03	; 3
    231c:	ff 06       	cpc	r15, r31
    231e:	29 f4       	brne	.+10     	; 0x232a <usart_init_spi+0x68>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2328:	aa c1       	rjmp	.+852    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    232a:	30 e9       	ldi	r19, 0x90	; 144
    232c:	e3 16       	cp	r14, r19
    232e:	33 e0       	ldi	r19, 0x03	; 3
    2330:	f3 06       	cpc	r15, r19
    2332:	29 f4       	brne	.+10     	; 0x233e <usart_init_spi+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    233c:	a0 c1       	rjmp	.+832    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    233e:	e1 14       	cp	r14, r1
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	f8 06       	cpc	r15, r24
    2344:	29 f4       	brne	.+10     	; 0x2350 <usart_init_spi+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2346:	62 e0       	ldi	r22, 0x02	; 2
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    234e:	97 c1       	rjmp	.+814    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2350:	e0 e4       	ldi	r30, 0x40	; 64
    2352:	ee 16       	cp	r14, r30
    2354:	e2 e0       	ldi	r30, 0x02	; 2
    2356:	fe 06       	cpc	r15, r30
    2358:	29 f4       	brne	.+10     	; 0x2364 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    235a:	62 e0       	ldi	r22, 0x02	; 2
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2362:	8d c1       	rjmp	.+794    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2364:	f0 e2       	ldi	r31, 0x20	; 32
    2366:	ef 16       	cp	r14, r31
    2368:	f3 e0       	ldi	r31, 0x03	; 3
    236a:	ff 06       	cpc	r15, r31
    236c:	29 f4       	brne	.+10     	; 0x2378 <usart_init_spi+0xb6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    236e:	64 e0       	ldi	r22, 0x04	; 4
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2376:	83 c1       	rjmp	.+774    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2378:	e1 14       	cp	r14, r1
    237a:	38 e0       	ldi	r19, 0x08	; 8
    237c:	f3 06       	cpc	r15, r19
    237e:	29 f4       	brne	.+10     	; 0x238a <usart_init_spi+0xc8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2380:	61 e0       	ldi	r22, 0x01	; 1
    2382:	83 e0       	ldi	r24, 0x03	; 3
    2384:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2388:	7a c1       	rjmp	.+756    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    238a:	e1 14       	cp	r14, r1
    238c:	89 e0       	ldi	r24, 0x09	; 9
    238e:	f8 06       	cpc	r15, r24
    2390:	29 f4       	brne	.+10     	; 0x239c <usart_init_spi+0xda>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	84 e0       	ldi	r24, 0x04	; 4
    2396:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    239a:	71 c1       	rjmp	.+738    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    239c:	e1 14       	cp	r14, r1
    239e:	ea e0       	ldi	r30, 0x0A	; 10
    23a0:	fe 06       	cpc	r15, r30
    23a2:	29 f4       	brne	.+10     	; 0x23ae <usart_init_spi+0xec>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    23a4:	61 e0       	ldi	r22, 0x01	; 1
    23a6:	85 e0       	ldi	r24, 0x05	; 5
    23a8:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23ac:	68 c1       	rjmp	.+720    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    23ae:	e1 14       	cp	r14, r1
    23b0:	fb e0       	ldi	r31, 0x0B	; 11
    23b2:	ff 06       	cpc	r15, r31
    23b4:	29 f4       	brne	.+10     	; 0x23c0 <usart_init_spi+0xfe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	86 e0       	ldi	r24, 0x06	; 6
    23ba:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23be:	5f c1       	rjmp	.+702    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    23c0:	30 e4       	ldi	r19, 0x40	; 64
    23c2:	e3 16       	cp	r14, r19
    23c4:	38 e0       	ldi	r19, 0x08	; 8
    23c6:	f3 06       	cpc	r15, r19
    23c8:	29 f4       	brne	.+10     	; 0x23d4 <usart_init_spi+0x112>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    23ca:	62 e0       	ldi	r22, 0x02	; 2
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23d2:	55 c1       	rjmp	.+682    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    23d4:	80 e4       	ldi	r24, 0x40	; 64
    23d6:	e8 16       	cp	r14, r24
    23d8:	89 e0       	ldi	r24, 0x09	; 9
    23da:	f8 06       	cpc	r15, r24
    23dc:	29 f4       	brne	.+10     	; 0x23e8 <usart_init_spi+0x126>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    23de:	62 e0       	ldi	r22, 0x02	; 2
    23e0:	84 e0       	ldi	r24, 0x04	; 4
    23e2:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23e6:	4b c1       	rjmp	.+662    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    23e8:	e0 e4       	ldi	r30, 0x40	; 64
    23ea:	ee 16       	cp	r14, r30
    23ec:	ea e0       	ldi	r30, 0x0A	; 10
    23ee:	fe 06       	cpc	r15, r30
    23f0:	29 f4       	brne	.+10     	; 0x23fc <usart_init_spi+0x13a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    23f2:	62 e0       	ldi	r22, 0x02	; 2
    23f4:	85 e0       	ldi	r24, 0x05	; 5
    23f6:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    23fa:	41 c1       	rjmp	.+642    	; 0x267e <usart_init_spi+0x3bc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    23fc:	f0 e9       	ldi	r31, 0x90	; 144
    23fe:	ef 16       	cp	r14, r31
    2400:	f8 e0       	ldi	r31, 0x08	; 8
    2402:	ff 06       	cpc	r15, r31
    2404:	29 f4       	brne	.+10     	; 0x2410 <usart_init_spi+0x14e>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2406:	64 e0       	ldi	r22, 0x04	; 4
    2408:	83 e0       	ldi	r24, 0x03	; 3
    240a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    240e:	37 c1       	rjmp	.+622    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2410:	30 e9       	ldi	r19, 0x90	; 144
    2412:	e3 16       	cp	r14, r19
    2414:	39 e0       	ldi	r19, 0x09	; 9
    2416:	f3 06       	cpc	r15, r19
    2418:	29 f4       	brne	.+10     	; 0x2424 <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    241a:	64 e0       	ldi	r22, 0x04	; 4
    241c:	84 e0       	ldi	r24, 0x04	; 4
    241e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2422:	2d c1       	rjmp	.+602    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2424:	80 e9       	ldi	r24, 0x90	; 144
    2426:	e8 16       	cp	r14, r24
    2428:	8a e0       	ldi	r24, 0x0A	; 10
    242a:	f8 06       	cpc	r15, r24
    242c:	29 f4       	brne	.+10     	; 0x2438 <usart_init_spi+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    242e:	64 e0       	ldi	r22, 0x04	; 4
    2430:	85 e0       	ldi	r24, 0x05	; 5
    2432:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2436:	23 c1       	rjmp	.+582    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2438:	e0 e9       	ldi	r30, 0x90	; 144
    243a:	ee 16       	cp	r14, r30
    243c:	eb e0       	ldi	r30, 0x0B	; 11
    243e:	fe 06       	cpc	r15, r30
    2440:	29 f4       	brne	.+10     	; 0x244c <usart_init_spi+0x18a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2442:	64 e0       	ldi	r22, 0x04	; 4
    2444:	86 e0       	ldi	r24, 0x06	; 6
    2446:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    244a:	19 c1       	rjmp	.+562    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    244c:	f0 ec       	ldi	r31, 0xC0	; 192
    244e:	ef 16       	cp	r14, r31
    2450:	f8 e0       	ldi	r31, 0x08	; 8
    2452:	ff 06       	cpc	r15, r31
    2454:	29 f4       	brne	.+10     	; 0x2460 <usart_init_spi+0x19e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2456:	68 e0       	ldi	r22, 0x08	; 8
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    245e:	0f c1       	rjmp	.+542    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2460:	30 ec       	ldi	r19, 0xC0	; 192
    2462:	e3 16       	cp	r14, r19
    2464:	39 e0       	ldi	r19, 0x09	; 9
    2466:	f3 06       	cpc	r15, r19
    2468:	29 f4       	brne	.+10     	; 0x2474 <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    246a:	68 e0       	ldi	r22, 0x08	; 8
    246c:	84 e0       	ldi	r24, 0x04	; 4
    246e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2472:	05 c1       	rjmp	.+522    	; 0x267e <usart_init_spi+0x3bc>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2474:	80 ea       	ldi	r24, 0xA0	; 160
    2476:	e8 16       	cp	r14, r24
    2478:	88 e0       	ldi	r24, 0x08	; 8
    247a:	f8 06       	cpc	r15, r24
    247c:	69 f4       	brne	.+26     	; 0x2498 <usart_init_spi+0x1d6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    247e:	60 e1       	ldi	r22, 0x10	; 16
    2480:	83 e0       	ldi	r24, 0x03	; 3
    2482:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2486:	e0 ea       	ldi	r30, 0xA0	; 160
    2488:	f8 e0       	ldi	r31, 0x08	; 8
    248a:	84 81       	ldd	r24, Z+4	; 0x04
    248c:	8f 7e       	andi	r24, 0xEF	; 239
    248e:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2490:	f8 01       	movw	r30, r16
    2492:	24 81       	ldd	r18, Z+4	; 0x04
    2494:	22 50       	subi	r18, 0x02	; 2
    2496:	53 c0       	rjmp	.+166    	; 0x253e <usart_init_spi+0x27c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2498:	f0 ea       	ldi	r31, 0xA0	; 160
    249a:	ef 16       	cp	r14, r31
    249c:	f9 e0       	ldi	r31, 0x09	; 9
    249e:	ff 06       	cpc	r15, r31
    24a0:	29 f4       	brne	.+10     	; 0x24ac <usart_init_spi+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    24a2:	60 e1       	ldi	r22, 0x10	; 16
    24a4:	84 e0       	ldi	r24, 0x04	; 4
    24a6:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    24aa:	e9 c0       	rjmp	.+466    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    24ac:	30 ea       	ldi	r19, 0xA0	; 160
    24ae:	e3 16       	cp	r14, r19
    24b0:	3a e0       	ldi	r19, 0x0A	; 10
    24b2:	f3 06       	cpc	r15, r19
    24b4:	29 f4       	brne	.+10     	; 0x24c0 <usart_init_spi+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    24b6:	60 e1       	ldi	r22, 0x10	; 16
    24b8:	85 e0       	ldi	r24, 0x05	; 5
    24ba:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    24be:	df c0       	rjmp	.+446    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    24c0:	80 ea       	ldi	r24, 0xA0	; 160
    24c2:	e8 16       	cp	r14, r24
    24c4:	8b e0       	ldi	r24, 0x0B	; 11
    24c6:	f8 06       	cpc	r15, r24
    24c8:	29 f4       	brne	.+10     	; 0x24d4 <usart_init_spi+0x212>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    24ca:	60 e1       	ldi	r22, 0x10	; 16
    24cc:	86 e0       	ldi	r24, 0x06	; 6
    24ce:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    24d2:	d5 c0       	rjmp	.+426    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    24d4:	e0 eb       	ldi	r30, 0xB0	; 176
    24d6:	ee 16       	cp	r14, r30
    24d8:	e8 e0       	ldi	r30, 0x08	; 8
    24da:	fe 06       	cpc	r15, r30
    24dc:	29 f4       	brne	.+10     	; 0x24e8 <usart_init_spi+0x226>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    24de:	60 e2       	ldi	r22, 0x20	; 32
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    24e6:	cb c0       	rjmp	.+406    	; 0x267e <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    24e8:	f0 eb       	ldi	r31, 0xB0	; 176
    24ea:	ef 16       	cp	r14, r31
    24ec:	f9 e0       	ldi	r31, 0x09	; 9
    24ee:	ff 06       	cpc	r15, r31
    24f0:	29 f4       	brne	.+10     	; 0x24fc <usart_init_spi+0x23a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    24f2:	60 e2       	ldi	r22, 0x20	; 32
    24f4:	84 e0       	ldi	r24, 0x04	; 4
    24f6:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    24fa:	c1 c0       	rjmp	.+386    	; 0x267e <usart_init_spi+0x3bc>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    24fc:	30 e8       	ldi	r19, 0x80	; 128
    24fe:	e3 16       	cp	r14, r19
    2500:	34 e0       	ldi	r19, 0x04	; 4
    2502:	f3 06       	cpc	r15, r19
    2504:	29 f4       	brne	.+10     	; 0x2510 <usart_init_spi+0x24e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2506:	60 e4       	ldi	r22, 0x40	; 64
    2508:	83 e0       	ldi	r24, 0x03	; 3
    250a:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    250e:	b7 c0       	rjmp	.+366    	; 0x267e <usart_init_spi+0x3bc>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2510:	80 ea       	ldi	r24, 0xA0	; 160
    2512:	e8 16       	cp	r14, r24
    2514:	84 e0       	ldi	r24, 0x04	; 4
    2516:	f8 06       	cpc	r15, r24
    2518:	29 f4       	brne	.+10     	; 0x2524 <usart_init_spi+0x262>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    251a:	60 e4       	ldi	r22, 0x40	; 64
    251c:	85 e0       	ldi	r24, 0x05	; 5
    251e:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
    2522:	ad c0       	rjmp	.+346    	; 0x267e <usart_init_spi+0x3bc>
    2524:	f7 01       	movw	r30, r14
    2526:	84 81       	ldd	r24, Z+4	; 0x04
    2528:	8f 7e       	andi	r24, 0xEF	; 239
    252a:	84 83       	std	Z+4, r24	; 0x04
    252c:	fb 01       	movw	r30, r22
    252e:	24 81       	ldd	r18, Z+4	; 0x04
    2530:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2532:	c7 01       	movw	r24, r14
    2534:	f0 ea       	ldi	r31, 0xA0	; 160
    2536:	ef 16       	cp	r14, r31
    2538:	f8 e0       	ldi	r31, 0x08	; 8
    253a:	ff 06       	cpc	r15, r31
    253c:	49 f4       	brne	.+18     	; 0x2550 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    253e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
    2542:	84 fd       	sbrc	r24, 4
    2544:	a5 c0       	rjmp	.+330    	; 0x2690 <usart_init_spi+0x3ce>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    2546:	0f 2e       	mov	r0, r31
    2548:	f1 e1       	ldi	r31, 0x11	; 17
    254a:	df 2e       	mov	r13, r31
    254c:	f0 2d       	mov	r31, r0
    254e:	a4 c0       	rjmp	.+328    	; 0x2698 <usart_init_spi+0x3d6>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    2550:	80 3b       	cpi	r24, 0xB0	; 176
    2552:	38 e0       	ldi	r19, 0x08	; 8
    2554:	93 07       	cpc	r25, r19
    2556:	91 f0       	breq	.+36     	; 0x257c <usart_init_spi+0x2ba>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    2558:	80 3a       	cpi	r24, 0xA0	; 160
    255a:	e9 e0       	ldi	r30, 0x09	; 9
    255c:	9e 07       	cpc	r25, r30
    255e:	49 f4       	brne	.+18     	; 0x2572 <usart_init_spi+0x2b0>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    2560:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
    2564:	34 fd       	sbrc	r19, 4
    2566:	9b c0       	rjmp	.+310    	; 0x269e <usart_init_spi+0x3dc>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    2568:	0f 2e       	mov	r0, r31
    256a:	f9 e1       	ldi	r31, 0x19	; 25
    256c:	df 2e       	mov	r13, r31
    256e:	f0 2d       	mov	r31, r0
    2570:	16 c0       	rjmp	.+44     	; 0x259e <usart_init_spi+0x2dc>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    2572:	80 3b       	cpi	r24, 0xB0	; 176
    2574:	f9 e0       	ldi	r31, 0x09	; 9
    2576:	9f 07       	cpc	r25, r31
    2578:	f1 f0       	breq	.+60     	; 0x25b6 <usart_init_spi+0x2f4>
    257a:	04 c0       	rjmp	.+8      	; 0x2584 <usart_init_spi+0x2c2>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    257c:	0f 2e       	mov	r0, r31
    257e:	f5 e1       	ldi	r31, 0x15	; 21
    2580:	df 2e       	mov	r13, r31
    2582:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    2584:	80 3a       	cpi	r24, 0xA0	; 160
    2586:	3a e0       	ldi	r19, 0x0A	; 10
    2588:	93 07       	cpc	r25, r19
    258a:	49 f4       	brne	.+18     	; 0x259e <usart_init_spi+0x2dc>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    258c:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
    2590:	84 fd       	sbrc	r24, 4
    2592:	8a c0       	rjmp	.+276    	; 0x26a8 <usart_init_spi+0x3e6>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    2594:	0f 2e       	mov	r0, r31
    2596:	f1 e2       	ldi	r31, 0x21	; 33
    2598:	df 2e       	mov	r13, r31
    259a:	f0 2d       	mov	r31, r0
    259c:	15 c0       	rjmp	.+42     	; 0x25c8 <usart_init_spi+0x306>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    259e:	80 3a       	cpi	r24, 0xA0	; 160
    25a0:	9b 40       	sbci	r25, 0x0B	; 11
    25a2:	91 f4       	brne	.+36     	; 0x25c8 <usart_init_spi+0x306>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    25a4:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
    25a8:	84 fd       	sbrc	r24, 4
    25aa:	0a c0       	rjmp	.+20     	; 0x25c0 <usart_init_spi+0x2fe>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    25ac:	0f 2e       	mov	r0, r31
    25ae:	f9 e2       	ldi	r31, 0x29	; 41
    25b0:	df 2e       	mov	r13, r31
    25b2:	f0 2d       	mov	r31, r0
    25b4:	09 c0       	rjmp	.+18     	; 0x25c8 <usart_init_spi+0x306>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    25b6:	0f 2e       	mov	r0, r31
    25b8:	fd e1       	ldi	r31, 0x1D	; 29
    25ba:	df 2e       	mov	r13, r31
    25bc:	f0 2d       	mov	r31, r0
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <usart_init_spi+0x306>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    25c0:	0f 2e       	mov	r0, r31
    25c2:	fd e2       	ldi	r31, 0x2D	; 45
    25c4:	df 2e       	mov	r13, r31
    25c6:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    25c8:	ed 2d       	mov	r30, r13
    25ca:	e6 95       	lsr	r30
    25cc:	e6 95       	lsr	r30
    25ce:	e6 95       	lsr	r30
    25d0:	30 e2       	ldi	r19, 0x20	; 32
    25d2:	e3 9f       	mul	r30, r19
    25d4:	f0 01       	movw	r30, r0
    25d6:	11 24       	eor	r1, r1
    25d8:	fa 5f       	subi	r31, 0xFA	; 250
    25da:	3d 2d       	mov	r19, r13
    25dc:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	03 2e       	mov	r0, r19
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <usart_init_spi+0x328>
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	0a 94       	dec	r0
    25ec:	e2 f7       	brpl	.-8      	; 0x25e6 <usart_init_spi+0x324>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    25ee:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    25f0:	22 30       	cpi	r18, 0x02	; 2
    25f2:	10 f0       	brcs	.+4      	; 0x25f8 <usart_init_spi+0x336>
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <usart_init_spi+0x338>
    25f8:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    25fa:	df 01       	movw	r26, r30
    25fc:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    25fe:	a3 0f       	add	r26, r19
    2600:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2602:	9f b7       	in	r25, 0x3f	; 63
    2604:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2606:	f8 94       	cli
	return flags;
    2608:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    260a:	2c 91       	ld	r18, X
    260c:	27 70       	andi	r18, 0x07	; 7
    260e:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    2610:	9c 91       	ld	r25, X
    2612:	94 2b       	or	r25, r20
    2614:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2616:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2618:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    261a:	f7 01       	movw	r30, r14
    261c:	85 81       	ldd	r24, Z+5	; 0x05
    261e:	80 6c       	ori	r24, 0xC0	; 192
    2620:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    2622:	f8 01       	movw	r30, r16
    2624:	84 81       	ldd	r24, Z+4	; 0x04
    2626:	8d 7f       	andi	r24, 0xFD	; 253
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	29 f4       	brne	.+10     	; 0x2636 <usart_init_spi+0x374>
		usart->CTRLC |= USART_UCPHA_bm;
    262c:	f7 01       	movw	r30, r14
    262e:	85 81       	ldd	r24, Z+5	; 0x05
    2630:	82 60       	ori	r24, 0x02	; 2
    2632:	85 83       	std	Z+5, r24	; 0x05
    2634:	04 c0       	rjmp	.+8      	; 0x263e <usart_init_spi+0x37c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    2636:	f7 01       	movw	r30, r14
    2638:	85 81       	ldd	r24, Z+5	; 0x05
    263a:	8d 7f       	andi	r24, 0xFD	; 253
    263c:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    263e:	f8 01       	movw	r30, r16
    2640:	85 81       	ldd	r24, Z+5	; 0x05
    2642:	88 23       	and	r24, r24
    2644:	29 f0       	breq	.+10     	; 0x2650 <usart_init_spi+0x38e>
		(usart)->CTRLC |= USART_DORD_bm;
    2646:	f7 01       	movw	r30, r14
    2648:	85 81       	ldd	r24, Z+5	; 0x05
    264a:	84 60       	ori	r24, 0x04	; 4
    264c:	85 83       	std	Z+5, r24	; 0x05
    264e:	04 c0       	rjmp	.+8      	; 0x2658 <usart_init_spi+0x396>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    2650:	f7 01       	movw	r30, r14
    2652:	85 81       	ldd	r24, Z+5	; 0x05
    2654:	8b 7f       	andi	r24, 0xFB	; 251
    2656:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2658:	f8 01       	movw	r30, r16
    265a:	40 81       	ld	r20, Z
    265c:	51 81       	ldd	r21, Z+1	; 0x01
    265e:	62 81       	ldd	r22, Z+2	; 0x02
    2660:	73 81       	ldd	r23, Z+3	; 0x03
    2662:	00 e8       	ldi	r16, 0x80	; 128
    2664:	14 e8       	ldi	r17, 0x84	; 132
    2666:	2e e1       	ldi	r18, 0x1E	; 30
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	c7 01       	movw	r24, r14
    266c:	f9 dd       	rcall	.-1038   	; 0x2260 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    266e:	f7 01       	movw	r30, r14
    2670:	84 81       	ldd	r24, Z+4	; 0x04
    2672:	88 60       	ori	r24, 0x08	; 8
    2674:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2676:	84 81       	ldd	r24, Z+4	; 0x04
    2678:	80 61       	ori	r24, 0x10	; 16
    267a:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    267c:	1a c0       	rjmp	.+52     	; 0x26b2 <usart_init_spi+0x3f0>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    267e:	f7 01       	movw	r30, r14
    2680:	84 81       	ldd	r24, Z+4	; 0x04
    2682:	8f 7e       	andi	r24, 0xEF	; 239
    2684:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2686:	f8 01       	movw	r30, r16
    2688:	24 81       	ldd	r18, Z+4	; 0x04
    268a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    268c:	c7 01       	movw	r24, r14
    268e:	60 cf       	rjmp	.-320    	; 0x2550 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    2690:	0f 2e       	mov	r0, r31
    2692:	f5 e1       	ldi	r31, 0x15	; 21
    2694:	df 2e       	mov	r13, r31
    2696:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    2698:	80 ea       	ldi	r24, 0xA0	; 160
    269a:	98 e0       	ldi	r25, 0x08	; 8
    269c:	6a cf       	rjmp	.-300    	; 0x2572 <usart_init_spi+0x2b0>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    269e:	0f 2e       	mov	r0, r31
    26a0:	fd e1       	ldi	r31, 0x1D	; 29
    26a2:	df 2e       	mov	r13, r31
    26a4:	f0 2d       	mov	r31, r0
    26a6:	7b cf       	rjmp	.-266    	; 0x259e <usart_init_spi+0x2dc>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    26a8:	0f 2e       	mov	r0, r31
    26aa:	f5 e2       	ldi	r31, 0x25	; 37
    26ac:	df 2e       	mov	r13, r31
    26ae:	f0 2d       	mov	r31, r0
    26b0:	8b cf       	rjmp	.-234    	; 0x25c8 <usart_init_spi+0x306>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    26b2:	0f 90       	pop	r0
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	08 95       	ret

000026c4 <__portable_avr_delay_cycles>:

char receiveChar()
{
	while( !(USARTC0_STATUS & USART_RXCIF_bm) ); //Wait until receive finish
	return USARTC0_DATA;
}
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <__portable_avr_delay_cycles+0xa>
    26c6:	61 50       	subi	r22, 0x01	; 1
    26c8:	71 09       	sbc	r23, r1
    26ca:	81 09       	sbc	r24, r1
    26cc:	91 09       	sbc	r25, r1
    26ce:	61 15       	cp	r22, r1
    26d0:	71 05       	cpc	r23, r1
    26d2:	81 05       	cpc	r24, r1
    26d4:	91 05       	cpc	r25, r1
    26d6:	b9 f7       	brne	.-18     	; 0x26c6 <__portable_avr_delay_cycles+0x2>
    26d8:	08 95       	ret

000026da <print_message>:
    26da:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <incremental>
    26de:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <incremental+0x1>
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	80 93 8e 23 	sts	0x238E, r24	; 0x80238e <incremental>
    26e8:	90 93 8f 23 	sts	0x238F, r25	; 0x80238f <incremental+0x1>
    26ec:	08 95       	ret

000026ee <setUpSerial>:
    26ee:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7be8a7>
    26f2:	8c e0       	ldi	r24, 0x0C	; 12
    26f4:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7be8a6>
    26f8:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7be8a3>
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7be8a5>
    2702:	88 e1       	ldi	r24, 0x18	; 24
    2704:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7be8a4>
    2708:	08 95       	ret

0000270a <receiveString>:

void receiveString()
{
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	c2 e9       	ldi	r28, 0x92	; 146
    2710:	d3 e2       	ldi	r29, 0x23	; 35
	int i = 0;
	while(1){
		//char inp = receiveChar();
		char inp = usart_getchar(USART_SERIAL_EXAMPLE);
    2712:	80 ea       	ldi	r24, 0xA0	; 160
    2714:	98 e0       	ldi	r25, 0x08	; 8
    2716:	61 db       	rcall	.-2366   	; 0x1dda <usart_getchar>
		if(inp=='\n') break;
    2718:	8a 30       	cpi	r24, 0x0A	; 10
    271a:	11 f0       	breq	.+4      	; 0x2720 <receiveString+0x16>
		else reads[i++] = inp;
    271c:	89 93       	st	Y+, r24
	}
    271e:	f9 cf       	rjmp	.-14     	; 0x2712 <receiveString+0x8>
	if(strcmp(str1,reads) == 0){
    2720:	62 e9       	ldi	r22, 0x92	; 146
    2722:	73 e2       	ldi	r23, 0x23	; 35
    2724:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <str1>
    2728:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <str1+0x1>
    272c:	e4 d2       	rcall	.+1480   	; 0x2cf6 <strcmp>
    272e:	89 2b       	or	r24, r25
    2730:	21 f4       	brne	.+8      	; 0x273a <receiveString+0x30>
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
    2738:	10 c0       	rjmp	.+32     	; 0x275a <receiveString+0x50>
		gpio_set_pin_high(J2_PIN0);
		}else if(strcmp(str2,reads) == 0){
    273a:	62 e9       	ldi	r22, 0x92	; 146
    273c:	73 e2       	ldi	r23, 0x23	; 35
    273e:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <str2>
    2742:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <str2+0x1>
    2746:	d7 d2       	rcall	.+1454   	; 0x2cf6 <strcmp>
    2748:	89 2b       	or	r24, r25
    274a:	21 f4       	brne	.+8      	; 0x2754 <receiveString+0x4a>
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
    2752:	03 c0       	rjmp	.+6      	; 0x275a <receiveString+0x50>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
		gpio_set_pin_high(J2_PIN0);
		}else{
		gpio_set_pin_low(J2_PIN0);
	}
}
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <setup_timer>:
int distance = 0;
static char buffarray[200];

//Fungsi setup timer
void setup_timer(void){
	tc_enable(&TCC0);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	98 e0       	ldi	r25, 0x08	; 8
    2764:	7d da       	rcall	.-2822   	; 0x1c60 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0,print_message);
    2766:	6d e6       	ldi	r22, 0x6D	; 109
    2768:	73 e1       	ldi	r23, 0x13	; 19
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	98 e0       	ldi	r25, 0x08	; 8
    276e:	f7 da       	rcall	.-2578   	; 0x1d5e <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2770:	e0 e0       	ldi	r30, 0x00	; 0
    2772:	f8 e0       	ldi	r31, 0x08	; 8
    2774:	81 81       	ldd	r24, Z+1	; 0x01
    2776:	88 7f       	andi	r24, 0xF8	; 248
    2778:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    277a:	8a e3       	ldi	r24, 0x3A	; 58
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	86 a3       	std	Z+38, r24	; 0x26
    2780:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    2782:	86 81       	ldd	r24, Z+6	; 0x06
    2784:	8c 7f       	andi	r24, 0xFC	; 252
    2786:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    2788:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    278a:	83 60       	ori	r24, 0x03	; 3
    278c:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    278e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2790:	80 7f       	andi	r24, 0xF0	; 240
    2792:	81 60       	ori	r24, 0x01	; 1
    2794:	80 83       	st	Z, r24
    2796:	08 95       	ret

00002798 <main>:
void print_message(void){
	incremental = incremental + 1;
}

int main (void)
{
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	28 97       	sbiw	r28, 0x08	; 8
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	de bf       	out	0x3e, r29	; 62
	//init board
	board_init();
    27a6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <board_init>
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
    27aa:	0e 94 38 04 	call	0x870	; 0x870 <sysclk_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    27ae:	87 e0       	ldi	r24, 0x07	; 7
    27b0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	pmic_init();
	
	//init lcd
	gfx_mono_init();
    27b4:	0e 94 05 05 	call	0xa0a	; 0xa0a <gfx_mono_st7565r_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    27b8:	80 e1       	ldi	r24, 0x10	; 16
    27ba:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	//set background lcd on
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);

	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    27be:	64 e0       	ldi	r22, 0x04	; 4
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	0e 94 48 04 	call	0x890	; 0x890 <sysclk_enable_module>
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    27c6:	e0 e2       	ldi	r30, 0x20	; 32
    27c8:	f4 e0       	ldi	r31, 0x04	; 4
    27ca:	81 81       	ldd	r24, Z+1	; 0x01
    27cc:	80 fd       	sbrc	r24, 0
    27ce:	fd cf       	rjmp	.-6      	; 0x27ca <main+0x32>
		// Wait for RTC32 sysclk to become stable
	}
	
	//delay 1000ms = 1s
	delay_ms(1000);
    27d0:	66 e1       	ldi	r22, 0x16	; 22
    27d2:	76 e1       	ldi	r23, 0x16	; 22
    27d4:	85 e0       	ldi	r24, 0x05	; 5
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	75 df       	rcall	.-278    	; 0x26c4 <__portable_avr_delay_cycles>
	setup_timer();
    27da:	c2 df       	rcall	.-124    	; 0x2760 <setup_timer>
    27dc:	20 e0       	ldi	r18, 0x00	; 0

	//set display - output lcd
	gfx_mono_draw_string("Darian Joshua ",0, 0, &sysfont);
    27de:	30 e2       	ldi	r19, 0x20	; 32
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	83 e1       	ldi	r24, 0x13	; 19
    27e6:	90 e2       	ldi	r25, 0x20	; 32
    27e8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
    27ec:	e0 e4       	ldi	r30, 0x40	; 64
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    27ee:	f6 e0       	ldi	r31, 0x06	; 6
    27f0:	21 e0       	ldi	r18, 0x01	; 1
    27f2:	21 83       	std	Z+1, r18	; 0x01
    27f4:	8f ef       	ldi	r24, 0xFF	; 255
	
	//define kereta jalan
	int kereta = 0;
	
	// setup lampu led di port c
	PORTC.DIR = 0b11111111; //Set output
    27f6:	80 83       	st	Z, r24
    27f8:	14 82       	std	Z+4, r1	; 0x04
	PORTC.OUT = 0b00000000; //Set low
    27fa:	e0 e8       	ldi	r30, 0x80	; 128
	
	//setup buzzer di port e
	PORTE.DIR = 0b11111111; //Set output
    27fc:	f6 e0       	ldi	r31, 0x06	; 6
    27fe:	80 83       	st	Z, r24
    2800:	80 ef       	ldi	r24, 0xF0	; 240
	PORTE.OUT = 0b11110000; //Set low
    2802:	84 83       	std	Z+4, r24	; 0x04
    2804:	88 e0       	ldi	r24, 0x08	; 8
	
	PORTC_OUTSET = PIN3_bm; // PC3 as TX
    2806:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7be645>
    280a:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
    PORTC_DIRSET = PIN3_bm; //TX pin as output
    280e:	84 e0       	ldi	r24, 0x04	; 4
   
    PORTC_OUTCLR = PIN2_bm; //PC2 as RX
    2810:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7be646>
    2814:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x7be642>
    PORTC_DIRCLR = PIN2_bm; //RX pin as input
   
    setUpSerial();
    2818:	6a df       	rcall	.-300    	; 0x26ee <setUpSerial>
    281a:	67 e0       	ldi	r22, 0x07	; 7
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    281c:	70 e2       	ldi	r23, 0x20	; 32
    281e:	80 ea       	ldi	r24, 0xA0	; 160
    2820:	98 e0       	ldi	r25, 0x08	; 8
    2822:	f0 db       	rcall	.-2080   	; 0x2004 <usart_init_rs232>
    2824:	31 e0       	ldi	r19, 0x01	; 1
    2826:	30 93 21 06 	sts	0x0621, r19	; 0x800621 <__TEXT_REGION_LENGTH__+0x7be621>
    282a:	1d 82       	std	Y+5, r1	; 0x05
	
	//define orang jalan
	int orang = 0;
	
	//define kereta jalan
	int kereta = 0;
    282c:	1e 82       	std	Y+6, r1	; 0x06
    282e:	1f 82       	std	Y+7, r1	; 0x07
	
	//define to find interrupt
	int interrupt = 0;
	
	//define orang jalan
	int orang = 0;
    2830:	18 86       	std	Y+8, r1	; 0x08
    2832:	81 2c       	mov	r8, r1
	
	//set J1 Pin 0 to output
	ioport_set_pin_dir(J1_PIN0, IOPORT_DIR_OUTPUT);
	
	//define state
	int state = 0;
    2834:	91 2c       	mov	r9, r1
    2836:	0f 2e       	mov	r0, r31
				// Untuk mengambil string dari Arduino
				receiveString();
				
				// Untuk mengecek isi stringnya
				in = usart_getchar(USART_SERIAL_EXAMPLE);
				reads[0] = in;
    2838:	f2 e9       	ldi	r31, 0x92	; 146
    283a:	6f 2e       	mov	r6, r31
    283c:	f3 e2       	ldi	r31, 0x23	; 35
    283e:	7f 2e       	mov	r7, r31
    2840:	f0 2d       	mov	r31, r0
    2842:	0f 2e       	mov	r0, r31
				 
				if (state == 2){
					delay_us(500);
					PORTC.OUT = 0b10000000;
					gfx_mono_draw_string("Lampu Hijau ",0, 8, &sysfont);
					snprintf(strbuf, sizeof(strbuf), "Counter : %3d Detik",i); // Show counter to lcd
    2844:	ff e2       	ldi	r31, 0x2F	; 47
    2846:	4f 2e       	mov	r4, r31
    2848:	f0 e2       	ldi	r31, 0x20	; 32
    284a:	5f 2e       	mov	r5, r31
    284c:	f0 2d       	mov	r31, r0
    284e:	0f 2e       	mov	r0, r31
    2850:	f6 ef       	ldi	r31, 0xF6	; 246
    2852:	2f 2e       	mov	r2, r31
    2854:	f3 e2       	ldi	r31, 0x23	; 35
    2856:	3f 2e       	mov	r3, r31
    2858:	f0 2d       	mov	r31, r0
    285a:	29 82       	std	Y+1, r2	; 0x01
    285c:	3a 82       	std	Y+2, r3	; 0x02
    285e:	01 c0       	rjmp	.+2      	; 0x2862 <main+0xca>
    2860:	45 01       	movw	r8, r10
    2862:	81 14       	cp	r8, r1
	ioport_set_pin_dir(J2_PIN0, IOPORT_DIR_OUTPUT);
	
	//forever loop
	while(1){		
		//ketika lampu merah
		if (state == 0) {	
    2864:	91 04       	cpc	r9, r1
    2866:	09 f0       	breq	.+2      	; 0x286a <main+0xd2>
    2868:	1e c1       	rjmp	.+572    	; 0x2aa6 <main+0x30e>
    286a:	54 01       	movw	r10, r8
    286c:	00 e0       	ldi	r16, 0x00	; 0
    286e:	10 e0       	ldi	r17, 0x00	; 0
    2870:	0f 2e       	mov	r0, r31
    2872:	fa e0       	ldi	r31, 0x0A	; 10
    2874:	ef 2e       	mov	r14, r31
    2876:	f1 2c       	mov	r15, r1
    2878:	f0 2d       	mov	r31, r0
    287a:	0f 2e       	mov	r0, r31
						state = 1;
					}
					else {
						int inc = newinc - oldinc;
						int newscore = inc/2; //Dibagi 2 seperti rumus sonar
						snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", newscore);
    287c:	f6 ec       	ldi	r31, 0xC6	; 198
    287e:	cf 2e       	mov	r12, r31
    2880:	f2 e2       	ldi	r31, 0x22	; 34
    2882:	df 2e       	mov	r13, r31
    2884:	f0 2d       	mov	r31, r0
    2886:	8b 82       	std	Y+3, r8	; 0x03
						gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
						delay_ms(100);
						incremental = 0; //reset nilai variable incremental
    2888:	9c 82       	std	Y+4, r9	; 0x04
    288a:	47 01       	movw	r8, r14
    288c:	80 1a       	sub	r8, r16
    288e:	91 0a       	sbc	r9, r17
		//ketika lampu merah
		if (state == 0) {	
			for (int i = 10; i > 0; i--) {				
				//in = receiveChar();
				// Untuk mengambil string dari Arduino
				receiveString();
    2890:	3c df       	rcall	.-392    	; 0x270a <receiveString>
    2892:	80 ea       	ldi	r24, 0xA0	; 160
				
				// Untuk mengecek isi stringnya
				in = usart_getchar(USART_SERIAL_EXAMPLE);
    2894:	98 e0       	ldi	r25, 0x08	; 8
    2896:	a1 da       	rcall	.-2750   	; 0x1dda <usart_getchar>
    2898:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <in>
    289c:	f3 01       	movw	r30, r6
    289e:	80 83       	st	Z, r24
				reads[0] = in;
    28a0:	6b e1       	ldi	r22, 0x1B	; 27
				
				delay_ms(50);
    28a2:	71 e4       	ldi	r23, 0x41	; 65
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0d df       	rcall	.-486    	; 0x26c4 <__portable_avr_delay_cycles>
    28aa:	f3 01       	movw	r30, r6
    28ac:	80 81       	ld	r24, Z
				
				int cekSatu = strncmp(reads, "1", 1);
				
				if (cekSatu == 0) {
    28ae:	81 33       	cpi	r24, 0x31	; 49
    28b0:	21 f0       	breq	.+8      	; 0x28ba <main+0x122>
    28b2:	a1 14       	cp	r10, r1
    28b4:	b1 04       	cpc	r11, r1
					kereta = 1;
					state = 0;
				}
				
				if (state == 0) {
    28b6:	29 f0       	breq	.+10     	; 0x28c2 <main+0x12a>
    28b8:	e7 c0       	rjmp	.+462    	; 0x2a88 <main+0x2f0>
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	30 e0       	ldi	r19, 0x00	; 0
				delay_ms(50);
				
				int cekSatu = strncmp(reads, "1", 1);
				
				if (cekSatu == 0) {
					kereta = 1;
    28be:	2d 83       	std	Y+5, r18	; 0x05
    28c0:	3e 83       	std	Y+6, r19	; 0x06
    28c2:	67 ea       	ldi	r22, 0xA7	; 167
					state = 0;
				}
				
				if (state == 0) {
					delay_us(500);
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	fc de       	rcall	.-520    	; 0x26c4 <__portable_avr_delay_cycles>
    28cc:	30 e2       	ldi	r19, 0x20	; 32
    28ce:	30 93 44 06 	sts	0x0644, r19	; 0x800644 <__TEXT_REGION_LENGTH__+0x7be644>
					PORTC.OUT = 0b00100000;
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e2       	ldi	r19, 0x20	; 32
					gfx_mono_draw_string("Lampu Merah ",0, 8, &sysfont);
    28d6:	48 e0       	ldi	r20, 0x08	; 8
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	82 e2       	ldi	r24, 0x22	; 34
    28dc:	90 e2       	ldi	r25, 0x20	; 32
    28de:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
    28e2:	9f 92       	push	r9
    28e4:	8f 92       	push	r8
					snprintf(strbuf, sizeof(strbuf), "Counter : %3d Detik",i); // Show counter to lcd
    28e6:	5f 92       	push	r5
    28e8:	4f 92       	push	r4
    28ea:	1f 92       	push	r1
    28ec:	89 ec       	ldi	r24, 0xC9	; 201
    28ee:	8f 93       	push	r24
    28f0:	3f 92       	push	r3
    28f2:	2f 92       	push	r2
    28f4:	09 d2       	rcall	.+1042   	; 0x2d08 <snprintf>
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e2       	ldi	r19, 0x20	; 32
					gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    28fa:	40 e1       	ldi	r20, 0x10	; 16
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
    2906:	66 e3       	ldi	r22, 0x36	; 54
					delay_ms(100);
    2908:	72 e8       	ldi	r23, 0x82	; 130
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	da de       	rcall	.-588    	; 0x26c4 <__portable_avr_delay_cycles>
    2910:	0f 5f       	subi	r16, 0xFF	; 255
    2912:	1f 4f       	sbci	r17, 0xFF	; 255
					interrupt++;
    2914:	8f ef       	ldi	r24, 0xFF	; 255
    2916:	e0 e2       	ldi	r30, 0x20	; 32
					
					PORTB.DIR = 0b11111111; //Set output
    2918:	f6 e0       	ldi	r31, 0x06	; 6
    291a:	80 83       	st	Z, r24
    291c:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__TEXT_REGION_LENGTH__+0x7be624>
					PORTB.OUT = 0b00000000; //Set low
    2920:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x7be624>
					PORTB.OUT = 0b11111111; //Set high selama 5us
    2924:	62 e0       	ldi	r22, 0x02	; 2
					delay_us(5);
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	cb de       	rcall	.-618    	; 0x26c4 <__portable_avr_delay_cycles>
    292e:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__TEXT_REGION_LENGTH__+0x7be624>
					PORTB.OUT = 0b00000000; //Kembali menjadi low
    2932:	e0 e2       	ldi	r30, 0x20	; 32
					PORTB.DIR = 0b00000000; //Set menjadi input
    2934:	f6 e0       	ldi	r31, 0x06	; 6
    2936:	10 82       	st	Z, r1
    2938:	6b ef       	ldi	r22, 0xFB	; 251
					delay_us(750); //Delay holdoff selama 750us
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	c1 de       	rcall	.-638    	; 0x26c4 <__portable_avr_delay_cycles>
    2942:	a0 90 8e 23 	lds	r10, 0x238E	; 0x80238e <incremental>
					int oldinc = incremental;
    2946:	b0 90 8f 23 	lds	r11, 0x238F	; 0x80238f <incremental+0x1>
    294a:	67 e2       	ldi	r22, 0x27	; 39
					delay_us(115); //Delay lagi, kali ini seharusnya pin menjadi high
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	b8 de       	rcall	.-656    	; 0x26c4 <__portable_avr_delay_cycles>
    2954:	78 94       	sei
    2956:	cd bf       	out	0x3d, r28	; 61
					cpu_irq_enable(); //Mulai interrupt
    2958:	de bf       	out	0x3e, r29	; 62
					while(PORTB.IN & PIN0_bm){
    295a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
    295e:	80 fd       	sbrc	r24, 0
    2960:	fc cf       	rjmp	.-8      	; 0x295a <main+0x1c2>
    2962:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <incremental>
						//Tidak ada apa-apa di sini. Loop ini berfungsi untuk mendeteksi pin 0 PORT B yang berubah menjadi low
					}
					int newinc = incremental; //Catat selisih waktu antara suara dikirim hingga diterima
    2966:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <incremental+0x1>
    296a:	f8 94       	cli
    296c:	20 91 8e 23 	lds	r18, 0x238E	; 0x80238e <incremental>
					cpu_irq_disable(); //Interrupt dimatikan
					if (incremental > 100){ //Jika hasil lebih dari 300 cm, dibulatkan menjadi 300 cm
    2970:	30 91 8f 23 	lds	r19, 0x238F	; 0x80238f <incremental+0x1>
    2974:	25 36       	cpi	r18, 0x65	; 101
    2976:	31 05       	cpc	r19, r1
    2978:	3c f1       	brlt	.+78     	; 0x29c8 <main+0x230>
    297a:	84 e6       	ldi	r24, 0x64	; 100
    297c:	90 e0       	ldi	r25, 0x00	; 0
						score = 100;
    297e:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <score>
    2982:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <score+0x1>
    2986:	1f 92       	push	r1
						snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", score);
    2988:	8f 93       	push	r24
    298a:	e3 e4       	ldi	r30, 0x43	; 67
    298c:	f0 e2       	ldi	r31, 0x20	; 32
    298e:	ff 93       	push	r31
    2990:	ef 93       	push	r30
    2992:	1f 92       	push	r1
    2994:	88 ec       	ldi	r24, 0xC8	; 200
    2996:	8f 93       	push	r24
    2998:	df 92       	push	r13
    299a:	cf 92       	push	r12
    299c:	b5 d1       	rcall	.+874    	; 0x2d08 <snprintf>
    299e:	20 e0       	ldi	r18, 0x00	; 0
						gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
    29a0:	30 e2       	ldi	r19, 0x20	; 32
    29a2:	48 e1       	ldi	r20, 0x18	; 24
    29a4:	60 e0       	ldi	r22, 0x00	; 0
    29a6:	c6 01       	movw	r24, r12
    29a8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
    29ac:	66 e3       	ldi	r22, 0x36	; 54
						delay_ms(100);
    29ae:	72 e8       	ldi	r23, 0x82	; 130
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	87 de       	rcall	.-754    	; 0x26c4 <__portable_avr_delay_cycles>
    29b6:	10 92 8e 23 	sts	0x238E, r1	; 0x80238e <incremental>
						incremental = 0;
    29ba:	10 92 8f 23 	sts	0x238F, r1	; 0x80238f <incremental+0x1>
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	ab 80       	ldd	r10, Y+3	; 0x03
    29c4:	bc 80       	ldd	r11, Y+4	; 0x04
    29c6:	5b c0       	rjmp	.+182    	; 0x2a7e <main+0x2e6>
    29c8:	ef 81       	ldd	r30, Y+7	; 0x07
    29ca:	f8 85       	ldd	r31, Y+8	; 0x08
					} 
					else if (incremental <= 100 && orang == 0 && kereta == 0) {
    29cc:	ef 2b       	or	r30, r31
    29ce:	71 f5       	brne	.+92     	; 0x2a2c <main+0x294>
    29d0:	2d 81       	ldd	r18, Y+5	; 0x05
    29d2:	3e 81       	ldd	r19, Y+6	; 0x06
    29d4:	23 2b       	or	r18, r19
    29d6:	51 f5       	brne	.+84     	; 0x2a2c <main+0x294>
    29d8:	8a 19       	sub	r24, r10
    29da:	9b 09       	sbc	r25, r11
						int inc = newinc - oldinc;
						int newscore = inc/2; //Dibagi 2 seperti rumus sonar
						snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", newscore);
    29dc:	9c 01       	movw	r18, r24
    29de:	12 f4       	brpl	.+4      	; 0x29e4 <main+0x24c>
    29e0:	2f 5f       	subi	r18, 0xFF	; 255
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	35 95       	asr	r19
    29e6:	27 95       	ror	r18
    29e8:	3f 93       	push	r19
    29ea:	2f 93       	push	r18
    29ec:	83 e4       	ldi	r24, 0x43	; 67
    29ee:	90 e2       	ldi	r25, 0x20	; 32
    29f0:	9f 93       	push	r25
    29f2:	8f 93       	push	r24
    29f4:	1f 92       	push	r1
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	8f 93       	push	r24
    29fa:	df 92       	push	r13
    29fc:	cf 92       	push	r12
    29fe:	84 d1       	rcall	.+776    	; 0x2d08 <snprintf>
    2a00:	20 e0       	ldi	r18, 0x00	; 0
						gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
    2a02:	30 e2       	ldi	r19, 0x20	; 32
    2a04:	48 e1       	ldi	r20, 0x18	; 24
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	c6 01       	movw	r24, r12
    2a0a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
    2a0e:	66 e3       	ldi	r22, 0x36	; 54
						delay_ms(100);
    2a10:	72 e8       	ldi	r23, 0x82	; 130
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	56 de       	rcall	.-852    	; 0x26c4 <__portable_avr_delay_cycles>
    2a18:	10 92 8e 23 	sts	0x238E, r1	; 0x80238e <incremental>
						incremental = 0; //reset nilai variable incremental
    2a1c:	10 92 8f 23 	sts	0x238F, r1	; 0x80238f <incremental+0x1>
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	de bf       	out	0x3e, r29	; 62
						snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", score);
						gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
						delay_ms(100);
						incremental = 0;
					} 
					else if (incremental <= 100 && orang == 0 && kereta == 0) {
    2a24:	aa 24       	eor	r10, r10
    2a26:	a3 94       	inc	r10
						int newscore = inc/2; //Dibagi 2 seperti rumus sonar
						snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", newscore);
						gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
						delay_ms(100);
						incremental = 0; //reset nilai variable incremental
						state = 1;
    2a28:	b1 2c       	mov	r11, r1
    2a2a:	29 c0       	rjmp	.+82     	; 0x2a7e <main+0x2e6>
    2a2c:	9c 01       	movw	r18, r24
						snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", score);
						gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
						delay_ms(100);
						incremental = 0;
					} 
					else if (incremental <= 100 && orang == 0 && kereta == 0) {
    2a2e:	2a 19       	sub	r18, r10
						state = 1;
					}
					else {
						int inc = newinc - oldinc;
						int newscore = inc/2; //Dibagi 2 seperti rumus sonar
						snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", newscore);
    2a30:	3b 09       	sbc	r19, r11
    2a32:	c9 01       	movw	r24, r18
    2a34:	99 23       	and	r25, r25
    2a36:	0c f4       	brge	.+2      	; 0x2a3a <main+0x2a2>
    2a38:	01 96       	adiw	r24, 0x01	; 1
    2a3a:	95 95       	asr	r25
    2a3c:	87 95       	ror	r24
    2a3e:	9f 93       	push	r25
    2a40:	8f 93       	push	r24
    2a42:	83 e4       	ldi	r24, 0x43	; 67
    2a44:	90 e2       	ldi	r25, 0x20	; 32
    2a46:	9f 93       	push	r25
    2a48:	8f 93       	push	r24
    2a4a:	1f 92       	push	r1
    2a4c:	88 ec       	ldi	r24, 0xC8	; 200
    2a4e:	8f 93       	push	r24
    2a50:	df 92       	push	r13
    2a52:	cf 92       	push	r12
    2a54:	59 d1       	rcall	.+690    	; 0x2d08 <snprintf>
    2a56:	20 e0       	ldi	r18, 0x00	; 0
						gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
    2a58:	30 e2       	ldi	r19, 0x20	; 32
    2a5a:	48 e1       	ldi	r20, 0x18	; 24
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	c6 01       	movw	r24, r12
    2a60:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
    2a64:	66 e3       	ldi	r22, 0x36	; 54
						delay_ms(100);
    2a66:	72 e8       	ldi	r23, 0x82	; 130
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	2b de       	rcall	.-938    	; 0x26c4 <__portable_avr_delay_cycles>
    2a6e:	10 92 8e 23 	sts	0x238E, r1	; 0x80238e <incremental>
						incremental = 0; //reset nilai variable incremental
    2a72:	10 92 8f 23 	sts	0x238F, r1	; 0x80238f <incremental+0x1>
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	ab 80       	ldd	r10, Y+3	; 0x03
    2a7c:	bc 80       	ldd	r11, Y+4	; 0x04
    2a7e:	0a 30       	cpi	r16, 0x0A	; 10
    2a80:	11 05       	cpc	r17, r1
	
	//forever loop
	while(1){		
		//ketika lampu merah
		if (state == 0) {	
			for (int i = 10; i > 0; i--) {				
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <main+0x2ee>
    2a84:	02 cf       	rjmp	.-508    	; 0x288a <main+0xf2>
    2a86:	04 c0       	rjmp	.+8      	; 0x2a90 <main+0x2f8>
    2a88:	0a 30       	cpi	r16, 0x0A	; 10
    2a8a:	11 05       	cpc	r17, r1
				}
				else {
					break;
				}
			}
			if(interrupt == 10){
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <main+0x2f8>
    2a8e:	e8 ce       	rjmp	.-560    	; 0x2860 <main+0xc8>
    2a90:	80 ef       	ldi	r24, 0xF0	; 240
    2a92:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x7be684>
				PORTE.OUT = 0b11110000;
    2a96:	1d 82       	std	Y+5, r1	; 0x05
    2a98:	1e 82       	std	Y+6, r1	; 0x06
				orang = 0;
				kereta = 0;
    2a9a:	1f 82       	std	Y+7, r1	; 0x07
    2a9c:	18 86       	std	Y+8, r1	; 0x08
					break;
				}
			}
			if(interrupt == 10){
				PORTE.OUT = 0b11110000;
				orang = 0;
    2a9e:	88 24       	eor	r8, r8
    2aa0:	83 94       	inc	r8
				kereta = 0;
				state = 1;
    2aa2:	91 2c       	mov	r9, r1
    2aa4:	de ce       	rjmp	.-580    	; 0x2862 <main+0xca>
    2aa6:	31 e0       	ldi	r19, 0x01	; 1
    2aa8:	83 16       	cp	r8, r19
			}
			interrupt = 0;
		}
		
		//ketika lampu kuning
		else if(state == 1){			
    2aaa:	91 04       	cpc	r9, r1
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <main+0x318>
    2aae:	7e c0       	rjmp	.+252    	; 0x2bac <main+0x414>
    2ab0:	00 e0       	ldi	r16, 0x00	; 0
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
    2ab4:	0f 2e       	mov	r0, r31
    2ab6:	f3 e0       	ldi	r31, 0x03	; 3
    2ab8:	ef 2e       	mov	r14, r31
    2aba:	f1 2c       	mov	r15, r1
    2abc:	f0 2d       	mov	r31, r0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2abe:	0f 2e       	mov	r0, r31
    2ac0:	f0 e8       	ldi	r31, 0x80	; 128
    2ac2:	af 2e       	mov	r10, r31
    2ac4:	f6 e0       	ldi	r31, 0x06	; 6
    2ac6:	bf 2e       	mov	r11, r31
    2ac8:	f0 2d       	mov	r31, r0
    2aca:	67 01       	movw	r12, r14
    2acc:	c0 1a       	sub	r12, r16
			for(int i = 3; i > 0; i--){			
				//in = receiveChar();
				// Untuk mengambil string dari Arduino
				receiveString();
    2ace:	d1 0a       	sbc	r13, r17
    2ad0:	1c de       	rcall	.-968    	; 0x270a <receiveString>
				
				// Untuk mengecek isi stringnya
				in = usart_getchar(USART_SERIAL_EXAMPLE);
    2ad2:	80 ea       	ldi	r24, 0xA0	; 160
    2ad4:	98 e0       	ldi	r25, 0x08	; 8
    2ad6:	81 d9       	rcall	.-3326   	; 0x1dda <usart_getchar>
    2ad8:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <in>
    2adc:	f3 01       	movw	r30, r6
				reads[0] = in;
    2ade:	80 83       	st	Z, r24
				
				delay_ms(50);
    2ae0:	6b e1       	ldi	r22, 0x1B	; 27
    2ae2:	71 e4       	ldi	r23, 0x41	; 65
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	ed dd       	rcall	.-1062   	; 0x26c4 <__portable_avr_delay_cycles>
    2aea:	f3 01       	movw	r30, r6
				
				int cekSatu = strncmp(reads, "1", 1);
				
				if (cekSatu == 0) {
    2aec:	80 81       	ld	r24, Z
    2aee:	81 33       	cpi	r24, 0x31	; 49
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <main+0x35c>
    2af2:	4d c0       	rjmp	.+154    	; 0x2b8e <main+0x3f6>
    2af4:	f1 e0       	ldi	r31, 0x01	; 1
					kereta = 1;
					state = 0;
				}
					
				if (state == 1){
    2af6:	8f 16       	cp	r8, r31
    2af8:	91 04       	cpc	r9, r1
    2afa:	09 f0       	breq	.+2      	; 0x2afe <main+0x366>
    2afc:	4e c0       	rjmp	.+156    	; 0x2b9a <main+0x402>
    2afe:	67 ea       	ldi	r22, 0xA7	; 167
					delay_us(500);
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	de dd       	rcall	.-1092   	; 0x26c4 <__portable_avr_delay_cycles>
    2b08:	20 e4       	ldi	r18, 0x40	; 64
					PORTC.OUT = 0b01000000;
    2b0a:	20 93 44 06 	sts	0x0644, r18	; 0x800644 <__TEXT_REGION_LENGTH__+0x7be644>
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
					gfx_mono_draw_string("Lampu Kuning",0, 8, &sysfont);
    2b10:	30 e2       	ldi	r19, 0x20	; 32
    2b12:	48 e0       	ldi	r20, 0x08	; 8
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	84 e5       	ldi	r24, 0x54	; 84
    2b18:	90 e2       	ldi	r25, 0x20	; 32
    2b1a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
					snprintf(strbuf, sizeof(strbuf), "Counter : %3d Detik",i); // Show counter to lcd
    2b1e:	df 92       	push	r13
    2b20:	cf 92       	push	r12
    2b22:	5f 92       	push	r5
    2b24:	4f 92       	push	r4
    2b26:	1f 92       	push	r1
    2b28:	39 ec       	ldi	r19, 0xC9	; 201
    2b2a:	3f 93       	push	r19
    2b2c:	3f 92       	push	r3
    2b2e:	2f 92       	push	r2
    2b30:	eb d0       	rcall	.+470    	; 0x2d08 <snprintf>
    2b32:	20 e0       	ldi	r18, 0x00	; 0
					gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    2b34:	30 e2       	ldi	r19, 0x20	; 32
    2b36:	40 e1       	ldi	r20, 0x10	; 16
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
					delay_ms(200);
    2b42:	6b e6       	ldi	r22, 0x6B	; 107
    2b44:	74 e0       	ldi	r23, 0x04	; 4
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	bc dd       	rcall	.-1160   	; 0x26c4 <__portable_avr_delay_cycles>
    2b4c:	0f 5f       	subi	r16, 0xFF	; 255
					interrupt++;
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	f5 01       	movw	r30, r10
    2b52:	80 85       	ldd	r24, Z+8	; 0x08
    2b54:	cd bf       	out	0x3d, r28	; 61
					
					if (ioport_get_pin_level(GPIO_PUSH_BUTTON_0) == 0) {
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	85 fd       	sbrc	r24, 5
    2b5a:	10 c0       	rjmp	.+32     	; 0x2b7c <main+0x3e4>
    2b5c:	31 e0       	ldi	r19, 0x01	; 1
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2b5e:	30 93 41 06 	sts	0x0641, r19	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
    2b62:	81 ef       	ldi	r24, 0xF1	; 241
						ioport_set_pin_dir(J1_PIN0, IOPORT_DIR_OUTPUT);
						PORTE.OUT = 0b11110001;
    2b64:	84 83       	std	Z+4, r24	; 0x04
    2b66:	67 ea       	ldi	r22, 0xA7	; 167
						delay_us(500);
    2b68:	70 e0       	ldi	r23, 0x00	; 0
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	aa dd       	rcall	.-1196   	; 0x26c4 <__portable_avr_delay_cycles>
    2b70:	e1 e0       	ldi	r30, 0x01	; 1
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
						orang = 1;
    2b74:	ef 83       	std	Y+7, r30	; 0x07
    2b76:	f8 87       	std	Y+8, r31	; 0x08
    2b78:	81 2c       	mov	r8, r1
    2b7a:	91 2c       	mov	r9, r1
						state = 0;
    2b7c:	03 30       	cpi	r16, 0x03	; 3
    2b7e:	11 05       	cpc	r17, r1
			interrupt = 0;
		}
		
		//ketika lampu kuning
		else if(state == 1){			
			for(int i = 3; i > 0; i--){			
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <main+0x3ec>
    2b82:	a3 cf       	rjmp	.-186    	; 0x2aca <main+0x332>
    2b84:	68 94       	set
    2b86:	88 24       	eor	r8, r8
				else {
					break;
				}
			}
			if(interrupt == 3){
				state = 2;
    2b88:	81 f8       	bld	r8, 1
    2b8a:	91 2c       	mov	r9, r1
    2b8c:	6a ce       	rjmp	.-812    	; 0x2862 <main+0xca>
    2b8e:	21 e0       	ldi	r18, 0x01	; 1
    2b90:	30 e0       	ldi	r19, 0x00	; 0
				delay_ms(50);
				
				int cekSatu = strncmp(reads, "1", 1);
				
				if (cekSatu == 0) {
					kereta = 1;
    2b92:	2d 83       	std	Y+5, r18	; 0x05
    2b94:	3e 83       	std	Y+6, r19	; 0x06
    2b96:	81 2c       	mov	r8, r1
    2b98:	91 2c       	mov	r9, r1
					state = 0;
    2b9a:	03 30       	cpi	r16, 0x03	; 3
    2b9c:	11 05       	cpc	r17, r1
				}
				else {
					break;
				}
			}
			if(interrupt == 3){
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <main+0x40a>
    2ba0:	60 ce       	rjmp	.-832    	; 0x2862 <main+0xca>
    2ba2:	68 94       	set
    2ba4:	88 24       	eor	r8, r8
				state = 2;
    2ba6:	81 f8       	bld	r8, 1
    2ba8:	91 2c       	mov	r9, r1
    2baa:	5b ce       	rjmp	.-842    	; 0x2862 <main+0xca>
    2bac:	32 e0       	ldi	r19, 0x02	; 2
    2bae:	83 16       	cp	r8, r19
			}
			interrupt = 0;
		}
		
		//ketika lampu hijau
		else if (state == 2) {			
    2bb0:	91 04       	cpc	r9, r1
    2bb2:	09 f0       	breq	.+2      	; 0x2bb6 <main+0x41e>
    2bb4:	56 ce       	rjmp	.-852    	; 0x2862 <main+0xca>
    2bb6:	00 e0       	ldi	r16, 0x00	; 0
    2bb8:	10 e0       	ldi	r17, 0x00	; 0
					state = 0;
				}	
				 
				if (state == 2){
					delay_us(500);
					PORTC.OUT = 0b10000000;
    2bba:	68 94       	set
    2bbc:	aa 24       	eor	r10, r10
    2bbe:	a7 f8       	bld	r10, 7
					gfx_mono_draw_string("Lampu Hijau ",0, 8, &sysfont);
					snprintf(strbuf, sizeof(strbuf), "Counter : %3d Detik",i); // Show counter to lcd
    2bc0:	0f 2e       	mov	r0, r31
    2bc2:	f9 ec       	ldi	r31, 0xC9	; 201
    2bc4:	bf 2e       	mov	r11, r31

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2bc6:	f0 2d       	mov	r31, r0
    2bc8:	0f 2e       	mov	r0, r31
    2bca:	f0 e8       	ldi	r31, 0x80	; 128
    2bcc:	cf 2e       	mov	r12, r31
    2bce:	f6 e0       	ldi	r31, 0x06	; 6
    2bd0:	df 2e       	mov	r13, r31
    2bd2:	f0 2d       	mov	r31, r0
    2bd4:	0f 2e       	mov	r0, r31
    2bd6:	f5 e0       	ldi	r31, 0x05	; 5
    2bd8:	ef 2e       	mov	r14, r31
    2bda:	f1 2c       	mov	r15, r1
    2bdc:	f0 2d       	mov	r31, r0
    2bde:	e0 1a       	sub	r14, r16
		//ketika lampu hijau
		else if (state == 2) {			
			for(int i = 5; i > 0;i--){
				//in = receiveChar();
				// Untuk mengambil string dari Arduino
				receiveString();
    2be0:	f1 0a       	sbc	r15, r17
				
				// Untuk mengecek isi stringnya
				in = usart_getchar(USART_SERIAL_EXAMPLE);
    2be2:	93 dd       	rcall	.-1242   	; 0x270a <receiveString>
    2be4:	80 ea       	ldi	r24, 0xA0	; 160
    2be6:	98 e0       	ldi	r25, 0x08	; 8
    2be8:	f8 d8       	rcall	.-3600   	; 0x1dda <usart_getchar>
    2bea:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <in>
				reads[0] = in;
    2bee:	f3 01       	movw	r30, r6
    2bf0:	80 83       	st	Z, r24
				
				delay_ms(50);
    2bf2:	6b e1       	ldi	r22, 0x1B	; 27
    2bf4:	71 e4       	ldi	r23, 0x41	; 65
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	64 dd       	rcall	.-1336   	; 0x26c4 <__portable_avr_delay_cycles>
    2bfc:	f3 01       	movw	r30, r6
				
				int cekSatu = strncmp(reads, "1", 1);
				
				if (cekSatu == 0) {
    2bfe:	80 81       	ld	r24, Z
    2c00:	81 33       	cpi	r24, 0x31	; 49
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <main+0x46e>
    2c04:	49 c0       	rjmp	.+146    	; 0x2c98 <main+0x500>
					kereta = 1;
					state = 0;
				}	
				 
				if (state == 2){
    2c06:	f2 e0       	ldi	r31, 0x02	; 2
    2c08:	8f 16       	cp	r8, r31
    2c0a:	91 04       	cpc	r9, r1
    2c0c:	09 f0       	breq	.+2      	; 0x2c10 <main+0x478>
    2c0e:	4a c0       	rjmp	.+148    	; 0x2ca4 <main+0x50c>
					delay_us(500);
    2c10:	67 ea       	ldi	r22, 0xA7	; 167
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	55 dd       	rcall	.-1366   	; 0x26c4 <__portable_avr_delay_cycles>
    2c1a:	a0 92 44 06 	sts	0x0644, r10	; 0x800644 <__TEXT_REGION_LENGTH__+0x7be644>
					PORTC.OUT = 0b10000000;
					gfx_mono_draw_string("Lampu Hijau ",0, 8, &sysfont);
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e2       	ldi	r19, 0x20	; 32
    2c22:	48 e0       	ldi	r20, 0x08	; 8
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	81 e6       	ldi	r24, 0x61	; 97
    2c28:	90 e2       	ldi	r25, 0x20	; 32
    2c2a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
					snprintf(strbuf, sizeof(strbuf), "Counter : %3d Detik",i); // Show counter to lcd
    2c2e:	ff 92       	push	r15
    2c30:	ef 92       	push	r14
    2c32:	5f 92       	push	r5
    2c34:	4f 92       	push	r4
    2c36:	1f 92       	push	r1
    2c38:	bf 92       	push	r11
    2c3a:	3f 92       	push	r3
    2c3c:	2f 92       	push	r2
    2c3e:	64 d0       	rcall	.+200    	; 0x2d08 <snprintf>
					gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e2       	ldi	r19, 0x20	; 32
    2c44:	40 e1       	ldi	r20, 0x10	; 16
    2c46:	60 e0       	ldi	r22, 0x00	; 0
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gfx_mono_draw_string>
					delay_ms(200);
    2c50:	6b e6       	ldi	r22, 0x6B	; 107
    2c52:	74 e0       	ldi	r23, 0x04	; 4
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	35 dd       	rcall	.-1430   	; 0x26c4 <__portable_avr_delay_cycles>
    2c5a:	0f 5f       	subi	r16, 0xFF	; 255
					interrupt++;
    2c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5e:	f6 01       	movw	r30, r12
    2c60:	80 85       	ldd	r24, Z+8	; 0x08
    2c62:	cd bf       	out	0x3d, r28	; 61
					
					if (ioport_get_pin_level(GPIO_PUSH_BUTTON_0) == 0) {
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	85 fd       	sbrc	r24, 5
    2c68:	10 c0       	rjmp	.+32     	; 0x2c8a <main+0x4f2>
    2c6a:	31 e0       	ldi	r19, 0x01	; 1
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2c6c:	30 93 41 06 	sts	0x0641, r19	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
    2c70:	81 ef       	ldi	r24, 0xF1	; 241
						ioport_set_pin_dir(J1_PIN0, IOPORT_DIR_OUTPUT);
						PORTE.OUT = 0b11110001;
    2c72:	84 83       	std	Z+4, r24	; 0x04
    2c74:	67 ea       	ldi	r22, 0xA7	; 167
						delay_us(500);
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	23 dd       	rcall	.-1466   	; 0x26c4 <__portable_avr_delay_cycles>
    2c7e:	e1 e0       	ldi	r30, 0x01	; 1
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
						orang = 1;
    2c82:	ef 83       	std	Y+7, r30	; 0x07
    2c84:	f8 87       	std	Y+8, r31	; 0x08
    2c86:	81 2c       	mov	r8, r1
    2c88:	91 2c       	mov	r9, r1
						state = 0;
    2c8a:	05 30       	cpi	r16, 0x05	; 5
    2c8c:	11 05       	cpc	r17, r1
			interrupt = 0;
		}
		
		//ketika lampu hijau
		else if (state == 2) {			
			for(int i = 5; i > 0;i--){
    2c8e:	09 f0       	breq	.+2      	; 0x2c92 <main+0x4fa>
    2c90:	a1 cf       	rjmp	.-190    	; 0x2bd4 <main+0x43c>
    2c92:	81 2c       	mov	r8, r1
    2c94:	91 2c       	mov	r9, r1
				else {
					break;
				}
			}
			if(interrupt == 5){
				state = 0;
    2c96:	e5 cd       	rjmp	.-1078   	; 0x2862 <main+0xca>
    2c98:	21 e0       	ldi	r18, 0x01	; 1
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
				delay_ms(50);
				
				int cekSatu = strncmp(reads, "1", 1);
				
				if (cekSatu == 0) {
					kereta = 1;
    2c9c:	2d 83       	std	Y+5, r18	; 0x05
    2c9e:	3e 83       	std	Y+6, r19	; 0x06
    2ca0:	81 2c       	mov	r8, r1
    2ca2:	91 2c       	mov	r9, r1
					state = 0;
    2ca4:	05 30       	cpi	r16, 0x05	; 5
    2ca6:	11 05       	cpc	r17, r1
				}
				else {
					break;
				}
			}
			if(interrupt == 5){
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <main+0x514>
    2caa:	db cd       	rjmp	.-1098   	; 0x2862 <main+0xca>
    2cac:	81 2c       	mov	r8, r1
    2cae:	91 2c       	mov	r9, r1
				state = 0;
    2cb0:	d8 cd       	rjmp	.-1104   	; 0x2862 <main+0xca>

00002cb2 <__udivmodsi4>:
    2cb2:	a1 e2       	ldi	r26, 0x21	; 33
    2cb4:	1a 2e       	mov	r1, r26
    2cb6:	aa 1b       	sub	r26, r26
    2cb8:	bb 1b       	sub	r27, r27
    2cba:	fd 01       	movw	r30, r26
    2cbc:	0d c0       	rjmp	.+26     	; 0x2cd8 <__udivmodsi4_ep>

00002cbe <__udivmodsi4_loop>:
    2cbe:	aa 1f       	adc	r26, r26
    2cc0:	bb 1f       	adc	r27, r27
    2cc2:	ee 1f       	adc	r30, r30
    2cc4:	ff 1f       	adc	r31, r31
    2cc6:	a2 17       	cp	r26, r18
    2cc8:	b3 07       	cpc	r27, r19
    2cca:	e4 07       	cpc	r30, r20
    2ccc:	f5 07       	cpc	r31, r21
    2cce:	20 f0       	brcs	.+8      	; 0x2cd8 <__udivmodsi4_ep>
    2cd0:	a2 1b       	sub	r26, r18
    2cd2:	b3 0b       	sbc	r27, r19
    2cd4:	e4 0b       	sbc	r30, r20
    2cd6:	f5 0b       	sbc	r31, r21

00002cd8 <__udivmodsi4_ep>:
    2cd8:	66 1f       	adc	r22, r22
    2cda:	77 1f       	adc	r23, r23
    2cdc:	88 1f       	adc	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	1a 94       	dec	r1
    2ce2:	69 f7       	brne	.-38     	; 0x2cbe <__udivmodsi4_loop>
    2ce4:	60 95       	com	r22
    2ce6:	70 95       	com	r23
    2ce8:	80 95       	com	r24
    2cea:	90 95       	com	r25
    2cec:	9b 01       	movw	r18, r22
    2cee:	ac 01       	movw	r20, r24
    2cf0:	bd 01       	movw	r22, r26
    2cf2:	cf 01       	movw	r24, r30
    2cf4:	08 95       	ret

00002cf6 <strcmp>:
    2cf6:	fb 01       	movw	r30, r22
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	8d 91       	ld	r24, X+
    2cfc:	01 90       	ld	r0, Z+
    2cfe:	80 19       	sub	r24, r0
    2d00:	01 10       	cpse	r0, r1
    2d02:	d9 f3       	breq	.-10     	; 0x2cfa <strcmp+0x4>
    2d04:	99 0b       	sbc	r25, r25
    2d06:	08 95       	ret

00002d08 <snprintf>:
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	2e 97       	sbiw	r28, 0x0e	; 14
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0e 89       	ldd	r16, Y+22	; 0x16
    2d1c:	1f 89       	ldd	r17, Y+23	; 0x17
    2d1e:	88 8d       	ldd	r24, Y+24	; 0x18
    2d20:	99 8d       	ldd	r25, Y+25	; 0x19
    2d22:	26 e0       	ldi	r18, 0x06	; 6
    2d24:	2c 83       	std	Y+4, r18	; 0x04
    2d26:	09 83       	std	Y+1, r16	; 0x01
    2d28:	1a 83       	std	Y+2, r17	; 0x02
    2d2a:	97 ff       	sbrs	r25, 7
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <snprintf+0x2a>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e8       	ldi	r25, 0x80	; 128
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	8d 83       	std	Y+5, r24	; 0x05
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	ae 01       	movw	r20, r28
    2d3a:	44 5e       	subi	r20, 0xE4	; 228
    2d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d40:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d42:	ce 01       	movw	r24, r28
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	16 d0       	rcall	.+44     	; 0x2d74 <vfprintf>
    2d48:	4d 81       	ldd	r20, Y+5	; 0x05
    2d4a:	5e 81       	ldd	r21, Y+6	; 0x06
    2d4c:	57 fd       	sbrc	r21, 7
    2d4e:	0a c0       	rjmp	.+20     	; 0x2d64 <snprintf+0x5c>
    2d50:	2f 81       	ldd	r18, Y+7	; 0x07
    2d52:	38 85       	ldd	r19, Y+8	; 0x08
    2d54:	42 17       	cp	r20, r18
    2d56:	53 07       	cpc	r21, r19
    2d58:	0c f4       	brge	.+2      	; 0x2d5c <snprintf+0x54>
    2d5a:	9a 01       	movw	r18, r20
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	e2 0f       	add	r30, r18
    2d60:	f3 1f       	adc	r31, r19
    2d62:	10 82       	st	Z, r1
    2d64:	2e 96       	adiw	r28, 0x0e	; 14
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	08 95       	ret

00002d74 <vfprintf>:
    2d74:	2f 92       	push	r2
    2d76:	3f 92       	push	r3
    2d78:	4f 92       	push	r4
    2d7a:	5f 92       	push	r5
    2d7c:	6f 92       	push	r6
    2d7e:	7f 92       	push	r7
    2d80:	8f 92       	push	r8
    2d82:	9f 92       	push	r9
    2d84:	af 92       	push	r10
    2d86:	bf 92       	push	r11
    2d88:	cf 92       	push	r12
    2d8a:	df 92       	push	r13
    2d8c:	ef 92       	push	r14
    2d8e:	ff 92       	push	r15
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	2b 97       	sbiw	r28, 0x0b	; 11
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	6c 01       	movw	r12, r24
    2da4:	7b 01       	movw	r14, r22
    2da6:	8a 01       	movw	r16, r20
    2da8:	fc 01       	movw	r30, r24
    2daa:	16 82       	std	Z+6, r1	; 0x06
    2dac:	17 82       	std	Z+7, r1	; 0x07
    2dae:	83 81       	ldd	r24, Z+3	; 0x03
    2db0:	81 ff       	sbrs	r24, 1
    2db2:	bf c1       	rjmp	.+894    	; 0x3132 <vfprintf+0x3be>
    2db4:	ce 01       	movw	r24, r28
    2db6:	01 96       	adiw	r24, 0x01	; 1
    2db8:	3c 01       	movw	r6, r24
    2dba:	f6 01       	movw	r30, r12
    2dbc:	93 81       	ldd	r25, Z+3	; 0x03
    2dbe:	f7 01       	movw	r30, r14
    2dc0:	93 fd       	sbrc	r25, 3
    2dc2:	85 91       	lpm	r24, Z+
    2dc4:	93 ff       	sbrs	r25, 3
    2dc6:	81 91       	ld	r24, Z+
    2dc8:	7f 01       	movw	r14, r30
    2dca:	88 23       	and	r24, r24
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <vfprintf+0x5c>
    2dce:	ad c1       	rjmp	.+858    	; 0x312a <vfprintf+0x3b6>
    2dd0:	85 32       	cpi	r24, 0x25	; 37
    2dd2:	39 f4       	brne	.+14     	; 0x2de2 <vfprintf+0x6e>
    2dd4:	93 fd       	sbrc	r25, 3
    2dd6:	85 91       	lpm	r24, Z+
    2dd8:	93 ff       	sbrs	r25, 3
    2dda:	81 91       	ld	r24, Z+
    2ddc:	7f 01       	movw	r14, r30
    2dde:	85 32       	cpi	r24, 0x25	; 37
    2de0:	21 f4       	brne	.+8      	; 0x2dea <vfprintf+0x76>
    2de2:	b6 01       	movw	r22, r12
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	d3 d1       	rcall	.+934    	; 0x318e <fputc>
    2de8:	e8 cf       	rjmp	.-48     	; 0x2dba <vfprintf+0x46>
    2dea:	91 2c       	mov	r9, r1
    2dec:	21 2c       	mov	r2, r1
    2dee:	31 2c       	mov	r3, r1
    2df0:	ff e1       	ldi	r31, 0x1F	; 31
    2df2:	f3 15       	cp	r31, r3
    2df4:	d8 f0       	brcs	.+54     	; 0x2e2c <vfprintf+0xb8>
    2df6:	8b 32       	cpi	r24, 0x2B	; 43
    2df8:	79 f0       	breq	.+30     	; 0x2e18 <vfprintf+0xa4>
    2dfa:	38 f4       	brcc	.+14     	; 0x2e0a <vfprintf+0x96>
    2dfc:	80 32       	cpi	r24, 0x20	; 32
    2dfe:	79 f0       	breq	.+30     	; 0x2e1e <vfprintf+0xaa>
    2e00:	83 32       	cpi	r24, 0x23	; 35
    2e02:	a1 f4       	brne	.+40     	; 0x2e2c <vfprintf+0xb8>
    2e04:	23 2d       	mov	r18, r3
    2e06:	20 61       	ori	r18, 0x10	; 16
    2e08:	1d c0       	rjmp	.+58     	; 0x2e44 <vfprintf+0xd0>
    2e0a:	8d 32       	cpi	r24, 0x2D	; 45
    2e0c:	61 f0       	breq	.+24     	; 0x2e26 <vfprintf+0xb2>
    2e0e:	80 33       	cpi	r24, 0x30	; 48
    2e10:	69 f4       	brne	.+26     	; 0x2e2c <vfprintf+0xb8>
    2e12:	23 2d       	mov	r18, r3
    2e14:	21 60       	ori	r18, 0x01	; 1
    2e16:	16 c0       	rjmp	.+44     	; 0x2e44 <vfprintf+0xd0>
    2e18:	83 2d       	mov	r24, r3
    2e1a:	82 60       	ori	r24, 0x02	; 2
    2e1c:	38 2e       	mov	r3, r24
    2e1e:	e3 2d       	mov	r30, r3
    2e20:	e4 60       	ori	r30, 0x04	; 4
    2e22:	3e 2e       	mov	r3, r30
    2e24:	2a c0       	rjmp	.+84     	; 0x2e7a <vfprintf+0x106>
    2e26:	f3 2d       	mov	r31, r3
    2e28:	f8 60       	ori	r31, 0x08	; 8
    2e2a:	1d c0       	rjmp	.+58     	; 0x2e66 <vfprintf+0xf2>
    2e2c:	37 fc       	sbrc	r3, 7
    2e2e:	2d c0       	rjmp	.+90     	; 0x2e8a <vfprintf+0x116>
    2e30:	20 ed       	ldi	r18, 0xD0	; 208
    2e32:	28 0f       	add	r18, r24
    2e34:	2a 30       	cpi	r18, 0x0A	; 10
    2e36:	40 f0       	brcs	.+16     	; 0x2e48 <vfprintf+0xd4>
    2e38:	8e 32       	cpi	r24, 0x2E	; 46
    2e3a:	b9 f4       	brne	.+46     	; 0x2e6a <vfprintf+0xf6>
    2e3c:	36 fc       	sbrc	r3, 6
    2e3e:	75 c1       	rjmp	.+746    	; 0x312a <vfprintf+0x3b6>
    2e40:	23 2d       	mov	r18, r3
    2e42:	20 64       	ori	r18, 0x40	; 64
    2e44:	32 2e       	mov	r3, r18
    2e46:	19 c0       	rjmp	.+50     	; 0x2e7a <vfprintf+0x106>
    2e48:	36 fe       	sbrs	r3, 6
    2e4a:	06 c0       	rjmp	.+12     	; 0x2e58 <vfprintf+0xe4>
    2e4c:	8a e0       	ldi	r24, 0x0A	; 10
    2e4e:	98 9e       	mul	r9, r24
    2e50:	20 0d       	add	r18, r0
    2e52:	11 24       	eor	r1, r1
    2e54:	92 2e       	mov	r9, r18
    2e56:	11 c0       	rjmp	.+34     	; 0x2e7a <vfprintf+0x106>
    2e58:	ea e0       	ldi	r30, 0x0A	; 10
    2e5a:	2e 9e       	mul	r2, r30
    2e5c:	20 0d       	add	r18, r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	22 2e       	mov	r2, r18
    2e62:	f3 2d       	mov	r31, r3
    2e64:	f0 62       	ori	r31, 0x20	; 32
    2e66:	3f 2e       	mov	r3, r31
    2e68:	08 c0       	rjmp	.+16     	; 0x2e7a <vfprintf+0x106>
    2e6a:	8c 36       	cpi	r24, 0x6C	; 108
    2e6c:	21 f4       	brne	.+8      	; 0x2e76 <vfprintf+0x102>
    2e6e:	83 2d       	mov	r24, r3
    2e70:	80 68       	ori	r24, 0x80	; 128
    2e72:	38 2e       	mov	r3, r24
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <vfprintf+0x106>
    2e76:	88 36       	cpi	r24, 0x68	; 104
    2e78:	41 f4       	brne	.+16     	; 0x2e8a <vfprintf+0x116>
    2e7a:	f7 01       	movw	r30, r14
    2e7c:	93 fd       	sbrc	r25, 3
    2e7e:	85 91       	lpm	r24, Z+
    2e80:	93 ff       	sbrs	r25, 3
    2e82:	81 91       	ld	r24, Z+
    2e84:	7f 01       	movw	r14, r30
    2e86:	81 11       	cpse	r24, r1
    2e88:	b3 cf       	rjmp	.-154    	; 0x2df0 <vfprintf+0x7c>
    2e8a:	98 2f       	mov	r25, r24
    2e8c:	9f 7d       	andi	r25, 0xDF	; 223
    2e8e:	95 54       	subi	r25, 0x45	; 69
    2e90:	93 30       	cpi	r25, 0x03	; 3
    2e92:	28 f4       	brcc	.+10     	; 0x2e9e <vfprintf+0x12a>
    2e94:	0c 5f       	subi	r16, 0xFC	; 252
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	9f e3       	ldi	r25, 0x3F	; 63
    2e9a:	99 83       	std	Y+1, r25	; 0x01
    2e9c:	0d c0       	rjmp	.+26     	; 0x2eb8 <vfprintf+0x144>
    2e9e:	83 36       	cpi	r24, 0x63	; 99
    2ea0:	31 f0       	breq	.+12     	; 0x2eae <vfprintf+0x13a>
    2ea2:	83 37       	cpi	r24, 0x73	; 115
    2ea4:	71 f0       	breq	.+28     	; 0x2ec2 <vfprintf+0x14e>
    2ea6:	83 35       	cpi	r24, 0x53	; 83
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <vfprintf+0x138>
    2eaa:	55 c0       	rjmp	.+170    	; 0x2f56 <vfprintf+0x1e2>
    2eac:	20 c0       	rjmp	.+64     	; 0x2eee <vfprintf+0x17a>
    2eae:	f8 01       	movw	r30, r16
    2eb0:	80 81       	ld	r24, Z
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	0e 5f       	subi	r16, 0xFE	; 254
    2eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb8:	88 24       	eor	r8, r8
    2eba:	83 94       	inc	r8
    2ebc:	91 2c       	mov	r9, r1
    2ebe:	53 01       	movw	r10, r6
    2ec0:	12 c0       	rjmp	.+36     	; 0x2ee6 <vfprintf+0x172>
    2ec2:	28 01       	movw	r4, r16
    2ec4:	f2 e0       	ldi	r31, 0x02	; 2
    2ec6:	4f 0e       	add	r4, r31
    2ec8:	51 1c       	adc	r5, r1
    2eca:	f8 01       	movw	r30, r16
    2ecc:	a0 80       	ld	r10, Z
    2ece:	b1 80       	ldd	r11, Z+1	; 0x01
    2ed0:	36 fe       	sbrs	r3, 6
    2ed2:	03 c0       	rjmp	.+6      	; 0x2eda <vfprintf+0x166>
    2ed4:	69 2d       	mov	r22, r9
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <vfprintf+0x16a>
    2eda:	6f ef       	ldi	r22, 0xFF	; 255
    2edc:	7f ef       	ldi	r23, 0xFF	; 255
    2ede:	c5 01       	movw	r24, r10
    2ee0:	4b d1       	rcall	.+662    	; 0x3178 <strnlen>
    2ee2:	4c 01       	movw	r8, r24
    2ee4:	82 01       	movw	r16, r4
    2ee6:	f3 2d       	mov	r31, r3
    2ee8:	ff 77       	andi	r31, 0x7F	; 127
    2eea:	3f 2e       	mov	r3, r31
    2eec:	15 c0       	rjmp	.+42     	; 0x2f18 <vfprintf+0x1a4>
    2eee:	28 01       	movw	r4, r16
    2ef0:	22 e0       	ldi	r18, 0x02	; 2
    2ef2:	42 0e       	add	r4, r18
    2ef4:	51 1c       	adc	r5, r1
    2ef6:	f8 01       	movw	r30, r16
    2ef8:	a0 80       	ld	r10, Z
    2efa:	b1 80       	ldd	r11, Z+1	; 0x01
    2efc:	36 fe       	sbrs	r3, 6
    2efe:	03 c0       	rjmp	.+6      	; 0x2f06 <vfprintf+0x192>
    2f00:	69 2d       	mov	r22, r9
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <vfprintf+0x196>
    2f06:	6f ef       	ldi	r22, 0xFF	; 255
    2f08:	7f ef       	ldi	r23, 0xFF	; 255
    2f0a:	c5 01       	movw	r24, r10
    2f0c:	2a d1       	rcall	.+596    	; 0x3162 <strnlen_P>
    2f0e:	4c 01       	movw	r8, r24
    2f10:	f3 2d       	mov	r31, r3
    2f12:	f0 68       	ori	r31, 0x80	; 128
    2f14:	3f 2e       	mov	r3, r31
    2f16:	82 01       	movw	r16, r4
    2f18:	33 fc       	sbrc	r3, 3
    2f1a:	19 c0       	rjmp	.+50     	; 0x2f4e <vfprintf+0x1da>
    2f1c:	82 2d       	mov	r24, r2
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	88 16       	cp	r8, r24
    2f22:	99 06       	cpc	r9, r25
    2f24:	a0 f4       	brcc	.+40     	; 0x2f4e <vfprintf+0x1da>
    2f26:	b6 01       	movw	r22, r12
    2f28:	80 e2       	ldi	r24, 0x20	; 32
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	30 d1       	rcall	.+608    	; 0x318e <fputc>
    2f2e:	2a 94       	dec	r2
    2f30:	f5 cf       	rjmp	.-22     	; 0x2f1c <vfprintf+0x1a8>
    2f32:	f5 01       	movw	r30, r10
    2f34:	37 fc       	sbrc	r3, 7
    2f36:	85 91       	lpm	r24, Z+
    2f38:	37 fe       	sbrs	r3, 7
    2f3a:	81 91       	ld	r24, Z+
    2f3c:	5f 01       	movw	r10, r30
    2f3e:	b6 01       	movw	r22, r12
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	25 d1       	rcall	.+586    	; 0x318e <fputc>
    2f44:	21 10       	cpse	r2, r1
    2f46:	2a 94       	dec	r2
    2f48:	21 e0       	ldi	r18, 0x01	; 1
    2f4a:	82 1a       	sub	r8, r18
    2f4c:	91 08       	sbc	r9, r1
    2f4e:	81 14       	cp	r8, r1
    2f50:	91 04       	cpc	r9, r1
    2f52:	79 f7       	brne	.-34     	; 0x2f32 <vfprintf+0x1be>
    2f54:	e1 c0       	rjmp	.+450    	; 0x3118 <vfprintf+0x3a4>
    2f56:	84 36       	cpi	r24, 0x64	; 100
    2f58:	11 f0       	breq	.+4      	; 0x2f5e <vfprintf+0x1ea>
    2f5a:	89 36       	cpi	r24, 0x69	; 105
    2f5c:	39 f5       	brne	.+78     	; 0x2fac <vfprintf+0x238>
    2f5e:	f8 01       	movw	r30, r16
    2f60:	37 fe       	sbrs	r3, 7
    2f62:	07 c0       	rjmp	.+14     	; 0x2f72 <vfprintf+0x1fe>
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	0c 5f       	subi	r16, 0xFC	; 252
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f70:	08 c0       	rjmp	.+16     	; 0x2f82 <vfprintf+0x20e>
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	07 2e       	mov	r0, r23
    2f78:	00 0c       	add	r0, r0
    2f7a:	88 0b       	sbc	r24, r24
    2f7c:	99 0b       	sbc	r25, r25
    2f7e:	0e 5f       	subi	r16, 0xFE	; 254
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	f3 2d       	mov	r31, r3
    2f84:	ff 76       	andi	r31, 0x6F	; 111
    2f86:	3f 2e       	mov	r3, r31
    2f88:	97 ff       	sbrs	r25, 7
    2f8a:	09 c0       	rjmp	.+18     	; 0x2f9e <vfprintf+0x22a>
    2f8c:	90 95       	com	r25
    2f8e:	80 95       	com	r24
    2f90:	70 95       	com	r23
    2f92:	61 95       	neg	r22
    2f94:	7f 4f       	sbci	r23, 0xFF	; 255
    2f96:	8f 4f       	sbci	r24, 0xFF	; 255
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	f0 68       	ori	r31, 0x80	; 128
    2f9c:	3f 2e       	mov	r3, r31
    2f9e:	2a e0       	ldi	r18, 0x0A	; 10
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	a3 01       	movw	r20, r6
    2fa4:	30 d1       	rcall	.+608    	; 0x3206 <__ultoa_invert>
    2fa6:	88 2e       	mov	r8, r24
    2fa8:	86 18       	sub	r8, r6
    2faa:	44 c0       	rjmp	.+136    	; 0x3034 <vfprintf+0x2c0>
    2fac:	85 37       	cpi	r24, 0x75	; 117
    2fae:	31 f4       	brne	.+12     	; 0x2fbc <vfprintf+0x248>
    2fb0:	23 2d       	mov	r18, r3
    2fb2:	2f 7e       	andi	r18, 0xEF	; 239
    2fb4:	b2 2e       	mov	r11, r18
    2fb6:	2a e0       	ldi	r18, 0x0A	; 10
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	25 c0       	rjmp	.+74     	; 0x3006 <vfprintf+0x292>
    2fbc:	93 2d       	mov	r25, r3
    2fbe:	99 7f       	andi	r25, 0xF9	; 249
    2fc0:	b9 2e       	mov	r11, r25
    2fc2:	8f 36       	cpi	r24, 0x6F	; 111
    2fc4:	c1 f0       	breq	.+48     	; 0x2ff6 <vfprintf+0x282>
    2fc6:	18 f4       	brcc	.+6      	; 0x2fce <vfprintf+0x25a>
    2fc8:	88 35       	cpi	r24, 0x58	; 88
    2fca:	79 f0       	breq	.+30     	; 0x2fea <vfprintf+0x276>
    2fcc:	ae c0       	rjmp	.+348    	; 0x312a <vfprintf+0x3b6>
    2fce:	80 37       	cpi	r24, 0x70	; 112
    2fd0:	19 f0       	breq	.+6      	; 0x2fd8 <vfprintf+0x264>
    2fd2:	88 37       	cpi	r24, 0x78	; 120
    2fd4:	21 f0       	breq	.+8      	; 0x2fde <vfprintf+0x26a>
    2fd6:	a9 c0       	rjmp	.+338    	; 0x312a <vfprintf+0x3b6>
    2fd8:	e9 2f       	mov	r30, r25
    2fda:	e0 61       	ori	r30, 0x10	; 16
    2fdc:	be 2e       	mov	r11, r30
    2fde:	b4 fe       	sbrs	r11, 4
    2fe0:	0d c0       	rjmp	.+26     	; 0x2ffc <vfprintf+0x288>
    2fe2:	fb 2d       	mov	r31, r11
    2fe4:	f4 60       	ori	r31, 0x04	; 4
    2fe6:	bf 2e       	mov	r11, r31
    2fe8:	09 c0       	rjmp	.+18     	; 0x2ffc <vfprintf+0x288>
    2fea:	34 fe       	sbrs	r3, 4
    2fec:	0a c0       	rjmp	.+20     	; 0x3002 <vfprintf+0x28e>
    2fee:	29 2f       	mov	r18, r25
    2ff0:	26 60       	ori	r18, 0x06	; 6
    2ff2:	b2 2e       	mov	r11, r18
    2ff4:	06 c0       	rjmp	.+12     	; 0x3002 <vfprintf+0x28e>
    2ff6:	28 e0       	ldi	r18, 0x08	; 8
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	05 c0       	rjmp	.+10     	; 0x3006 <vfprintf+0x292>
    2ffc:	20 e1       	ldi	r18, 0x10	; 16
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	02 c0       	rjmp	.+4      	; 0x3006 <vfprintf+0x292>
    3002:	20 e1       	ldi	r18, 0x10	; 16
    3004:	32 e0       	ldi	r19, 0x02	; 2
    3006:	f8 01       	movw	r30, r16
    3008:	b7 fe       	sbrs	r11, 7
    300a:	07 c0       	rjmp	.+14     	; 0x301a <vfprintf+0x2a6>
    300c:	60 81       	ld	r22, Z
    300e:	71 81       	ldd	r23, Z+1	; 0x01
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	0c 5f       	subi	r16, 0xFC	; 252
    3016:	1f 4f       	sbci	r17, 0xFF	; 255
    3018:	06 c0       	rjmp	.+12     	; 0x3026 <vfprintf+0x2b2>
    301a:	60 81       	ld	r22, Z
    301c:	71 81       	ldd	r23, Z+1	; 0x01
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 5f       	subi	r16, 0xFE	; 254
    3024:	1f 4f       	sbci	r17, 0xFF	; 255
    3026:	a3 01       	movw	r20, r6
    3028:	ee d0       	rcall	.+476    	; 0x3206 <__ultoa_invert>
    302a:	88 2e       	mov	r8, r24
    302c:	86 18       	sub	r8, r6
    302e:	fb 2d       	mov	r31, r11
    3030:	ff 77       	andi	r31, 0x7F	; 127
    3032:	3f 2e       	mov	r3, r31
    3034:	36 fe       	sbrs	r3, 6
    3036:	0d c0       	rjmp	.+26     	; 0x3052 <vfprintf+0x2de>
    3038:	23 2d       	mov	r18, r3
    303a:	2e 7f       	andi	r18, 0xFE	; 254
    303c:	a2 2e       	mov	r10, r18
    303e:	89 14       	cp	r8, r9
    3040:	58 f4       	brcc	.+22     	; 0x3058 <vfprintf+0x2e4>
    3042:	34 fe       	sbrs	r3, 4
    3044:	0b c0       	rjmp	.+22     	; 0x305c <vfprintf+0x2e8>
    3046:	32 fc       	sbrc	r3, 2
    3048:	09 c0       	rjmp	.+18     	; 0x305c <vfprintf+0x2e8>
    304a:	83 2d       	mov	r24, r3
    304c:	8e 7e       	andi	r24, 0xEE	; 238
    304e:	a8 2e       	mov	r10, r24
    3050:	05 c0       	rjmp	.+10     	; 0x305c <vfprintf+0x2e8>
    3052:	b8 2c       	mov	r11, r8
    3054:	a3 2c       	mov	r10, r3
    3056:	03 c0       	rjmp	.+6      	; 0x305e <vfprintf+0x2ea>
    3058:	b8 2c       	mov	r11, r8
    305a:	01 c0       	rjmp	.+2      	; 0x305e <vfprintf+0x2ea>
    305c:	b9 2c       	mov	r11, r9
    305e:	a4 fe       	sbrs	r10, 4
    3060:	0f c0       	rjmp	.+30     	; 0x3080 <vfprintf+0x30c>
    3062:	fe 01       	movw	r30, r28
    3064:	e8 0d       	add	r30, r8
    3066:	f1 1d       	adc	r31, r1
    3068:	80 81       	ld	r24, Z
    306a:	80 33       	cpi	r24, 0x30	; 48
    306c:	21 f4       	brne	.+8      	; 0x3076 <vfprintf+0x302>
    306e:	9a 2d       	mov	r25, r10
    3070:	99 7e       	andi	r25, 0xE9	; 233
    3072:	a9 2e       	mov	r10, r25
    3074:	09 c0       	rjmp	.+18     	; 0x3088 <vfprintf+0x314>
    3076:	a2 fe       	sbrs	r10, 2
    3078:	06 c0       	rjmp	.+12     	; 0x3086 <vfprintf+0x312>
    307a:	b3 94       	inc	r11
    307c:	b3 94       	inc	r11
    307e:	04 c0       	rjmp	.+8      	; 0x3088 <vfprintf+0x314>
    3080:	8a 2d       	mov	r24, r10
    3082:	86 78       	andi	r24, 0x86	; 134
    3084:	09 f0       	breq	.+2      	; 0x3088 <vfprintf+0x314>
    3086:	b3 94       	inc	r11
    3088:	a3 fc       	sbrc	r10, 3
    308a:	10 c0       	rjmp	.+32     	; 0x30ac <vfprintf+0x338>
    308c:	a0 fe       	sbrs	r10, 0
    308e:	06 c0       	rjmp	.+12     	; 0x309c <vfprintf+0x328>
    3090:	b2 14       	cp	r11, r2
    3092:	80 f4       	brcc	.+32     	; 0x30b4 <vfprintf+0x340>
    3094:	28 0c       	add	r2, r8
    3096:	92 2c       	mov	r9, r2
    3098:	9b 18       	sub	r9, r11
    309a:	0d c0       	rjmp	.+26     	; 0x30b6 <vfprintf+0x342>
    309c:	b2 14       	cp	r11, r2
    309e:	58 f4       	brcc	.+22     	; 0x30b6 <vfprintf+0x342>
    30a0:	b6 01       	movw	r22, r12
    30a2:	80 e2       	ldi	r24, 0x20	; 32
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	73 d0       	rcall	.+230    	; 0x318e <fputc>
    30a8:	b3 94       	inc	r11
    30aa:	f8 cf       	rjmp	.-16     	; 0x309c <vfprintf+0x328>
    30ac:	b2 14       	cp	r11, r2
    30ae:	18 f4       	brcc	.+6      	; 0x30b6 <vfprintf+0x342>
    30b0:	2b 18       	sub	r2, r11
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <vfprintf+0x344>
    30b4:	98 2c       	mov	r9, r8
    30b6:	21 2c       	mov	r2, r1
    30b8:	a4 fe       	sbrs	r10, 4
    30ba:	0f c0       	rjmp	.+30     	; 0x30da <vfprintf+0x366>
    30bc:	b6 01       	movw	r22, r12
    30be:	80 e3       	ldi	r24, 0x30	; 48
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	65 d0       	rcall	.+202    	; 0x318e <fputc>
    30c4:	a2 fe       	sbrs	r10, 2
    30c6:	16 c0       	rjmp	.+44     	; 0x30f4 <vfprintf+0x380>
    30c8:	a1 fc       	sbrc	r10, 1
    30ca:	03 c0       	rjmp	.+6      	; 0x30d2 <vfprintf+0x35e>
    30cc:	88 e7       	ldi	r24, 0x78	; 120
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <vfprintf+0x362>
    30d2:	88 e5       	ldi	r24, 0x58	; 88
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	b6 01       	movw	r22, r12
    30d8:	0c c0       	rjmp	.+24     	; 0x30f2 <vfprintf+0x37e>
    30da:	8a 2d       	mov	r24, r10
    30dc:	86 78       	andi	r24, 0x86	; 134
    30de:	51 f0       	breq	.+20     	; 0x30f4 <vfprintf+0x380>
    30e0:	a1 fe       	sbrs	r10, 1
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <vfprintf+0x374>
    30e4:	8b e2       	ldi	r24, 0x2B	; 43
    30e6:	01 c0       	rjmp	.+2      	; 0x30ea <vfprintf+0x376>
    30e8:	80 e2       	ldi	r24, 0x20	; 32
    30ea:	a7 fc       	sbrc	r10, 7
    30ec:	8d e2       	ldi	r24, 0x2D	; 45
    30ee:	b6 01       	movw	r22, r12
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	4d d0       	rcall	.+154    	; 0x318e <fputc>
    30f4:	89 14       	cp	r8, r9
    30f6:	30 f4       	brcc	.+12     	; 0x3104 <vfprintf+0x390>
    30f8:	b6 01       	movw	r22, r12
    30fa:	80 e3       	ldi	r24, 0x30	; 48
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	47 d0       	rcall	.+142    	; 0x318e <fputc>
    3100:	9a 94       	dec	r9
    3102:	f8 cf       	rjmp	.-16     	; 0x30f4 <vfprintf+0x380>
    3104:	8a 94       	dec	r8
    3106:	f3 01       	movw	r30, r6
    3108:	e8 0d       	add	r30, r8
    310a:	f1 1d       	adc	r31, r1
    310c:	80 81       	ld	r24, Z
    310e:	b6 01       	movw	r22, r12
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	3d d0       	rcall	.+122    	; 0x318e <fputc>
    3114:	81 10       	cpse	r8, r1
    3116:	f6 cf       	rjmp	.-20     	; 0x3104 <vfprintf+0x390>
    3118:	22 20       	and	r2, r2
    311a:	09 f4       	brne	.+2      	; 0x311e <vfprintf+0x3aa>
    311c:	4e ce       	rjmp	.-868    	; 0x2dba <vfprintf+0x46>
    311e:	b6 01       	movw	r22, r12
    3120:	80 e2       	ldi	r24, 0x20	; 32
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	34 d0       	rcall	.+104    	; 0x318e <fputc>
    3126:	2a 94       	dec	r2
    3128:	f7 cf       	rjmp	.-18     	; 0x3118 <vfprintf+0x3a4>
    312a:	f6 01       	movw	r30, r12
    312c:	86 81       	ldd	r24, Z+6	; 0x06
    312e:	97 81       	ldd	r25, Z+7	; 0x07
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <vfprintf+0x3c2>
    3132:	8f ef       	ldi	r24, 0xFF	; 255
    3134:	9f ef       	ldi	r25, 0xFF	; 255
    3136:	2b 96       	adiw	r28, 0x0b	; 11
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	df 90       	pop	r13
    314a:	cf 90       	pop	r12
    314c:	bf 90       	pop	r11
    314e:	af 90       	pop	r10
    3150:	9f 90       	pop	r9
    3152:	8f 90       	pop	r8
    3154:	7f 90       	pop	r7
    3156:	6f 90       	pop	r6
    3158:	5f 90       	pop	r5
    315a:	4f 90       	pop	r4
    315c:	3f 90       	pop	r3
    315e:	2f 90       	pop	r2
    3160:	08 95       	ret

00003162 <strnlen_P>:
    3162:	fc 01       	movw	r30, r24
    3164:	05 90       	lpm	r0, Z+
    3166:	61 50       	subi	r22, 0x01	; 1
    3168:	70 40       	sbci	r23, 0x00	; 0
    316a:	01 10       	cpse	r0, r1
    316c:	d8 f7       	brcc	.-10     	; 0x3164 <strnlen_P+0x2>
    316e:	80 95       	com	r24
    3170:	90 95       	com	r25
    3172:	8e 0f       	add	r24, r30
    3174:	9f 1f       	adc	r25, r31
    3176:	08 95       	ret

00003178 <strnlen>:
    3178:	fc 01       	movw	r30, r24
    317a:	61 50       	subi	r22, 0x01	; 1
    317c:	70 40       	sbci	r23, 0x00	; 0
    317e:	01 90       	ld	r0, Z+
    3180:	01 10       	cpse	r0, r1
    3182:	d8 f7       	brcc	.-10     	; 0x317a <strnlen+0x2>
    3184:	80 95       	com	r24
    3186:	90 95       	com	r25
    3188:	8e 0f       	add	r24, r30
    318a:	9f 1f       	adc	r25, r31
    318c:	08 95       	ret

0000318e <fputc>:
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	fb 01       	movw	r30, r22
    3198:	23 81       	ldd	r18, Z+3	; 0x03
    319a:	21 fd       	sbrc	r18, 1
    319c:	03 c0       	rjmp	.+6      	; 0x31a4 <fputc+0x16>
    319e:	8f ef       	ldi	r24, 0xFF	; 255
    31a0:	9f ef       	ldi	r25, 0xFF	; 255
    31a2:	2c c0       	rjmp	.+88     	; 0x31fc <fputc+0x6e>
    31a4:	22 ff       	sbrs	r18, 2
    31a6:	16 c0       	rjmp	.+44     	; 0x31d4 <fputc+0x46>
    31a8:	46 81       	ldd	r20, Z+6	; 0x06
    31aa:	57 81       	ldd	r21, Z+7	; 0x07
    31ac:	24 81       	ldd	r18, Z+4	; 0x04
    31ae:	35 81       	ldd	r19, Z+5	; 0x05
    31b0:	42 17       	cp	r20, r18
    31b2:	53 07       	cpc	r21, r19
    31b4:	44 f4       	brge	.+16     	; 0x31c6 <fputc+0x38>
    31b6:	a0 81       	ld	r26, Z
    31b8:	b1 81       	ldd	r27, Z+1	; 0x01
    31ba:	9d 01       	movw	r18, r26
    31bc:	2f 5f       	subi	r18, 0xFF	; 255
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
    31c0:	20 83       	st	Z, r18
    31c2:	31 83       	std	Z+1, r19	; 0x01
    31c4:	8c 93       	st	X, r24
    31c6:	26 81       	ldd	r18, Z+6	; 0x06
    31c8:	37 81       	ldd	r19, Z+7	; 0x07
    31ca:	2f 5f       	subi	r18, 0xFF	; 255
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	26 83       	std	Z+6, r18	; 0x06
    31d0:	37 83       	std	Z+7, r19	; 0x07
    31d2:	14 c0       	rjmp	.+40     	; 0x31fc <fputc+0x6e>
    31d4:	8b 01       	movw	r16, r22
    31d6:	ec 01       	movw	r28, r24
    31d8:	fb 01       	movw	r30, r22
    31da:	00 84       	ldd	r0, Z+8	; 0x08
    31dc:	f1 85       	ldd	r31, Z+9	; 0x09
    31de:	e0 2d       	mov	r30, r0
    31e0:	19 95       	eicall
    31e2:	89 2b       	or	r24, r25
    31e4:	e1 f6       	brne	.-72     	; 0x319e <fputc+0x10>
    31e6:	d8 01       	movw	r26, r16
    31e8:	16 96       	adiw	r26, 0x06	; 6
    31ea:	8d 91       	ld	r24, X+
    31ec:	9c 91       	ld	r25, X
    31ee:	17 97       	sbiw	r26, 0x07	; 7
    31f0:	01 96       	adiw	r24, 0x01	; 1
    31f2:	16 96       	adiw	r26, 0x06	; 6
    31f4:	8d 93       	st	X+, r24
    31f6:	9c 93       	st	X, r25
    31f8:	17 97       	sbiw	r26, 0x07	; 7
    31fa:	ce 01       	movw	r24, r28
    31fc:	df 91       	pop	r29
    31fe:	cf 91       	pop	r28
    3200:	1f 91       	pop	r17
    3202:	0f 91       	pop	r16
    3204:	08 95       	ret

00003206 <__ultoa_invert>:
    3206:	fa 01       	movw	r30, r20
    3208:	aa 27       	eor	r26, r26
    320a:	28 30       	cpi	r18, 0x08	; 8
    320c:	51 f1       	breq	.+84     	; 0x3262 <__ultoa_invert+0x5c>
    320e:	20 31       	cpi	r18, 0x10	; 16
    3210:	81 f1       	breq	.+96     	; 0x3272 <__ultoa_invert+0x6c>
    3212:	e8 94       	clt
    3214:	6f 93       	push	r22
    3216:	6e 7f       	andi	r22, 0xFE	; 254
    3218:	6e 5f       	subi	r22, 0xFE	; 254
    321a:	7f 4f       	sbci	r23, 0xFF	; 255
    321c:	8f 4f       	sbci	r24, 0xFF	; 255
    321e:	9f 4f       	sbci	r25, 0xFF	; 255
    3220:	af 4f       	sbci	r26, 0xFF	; 255
    3222:	b1 e0       	ldi	r27, 0x01	; 1
    3224:	3e d0       	rcall	.+124    	; 0x32a2 <__ultoa_invert+0x9c>
    3226:	b4 e0       	ldi	r27, 0x04	; 4
    3228:	3c d0       	rcall	.+120    	; 0x32a2 <__ultoa_invert+0x9c>
    322a:	67 0f       	add	r22, r23
    322c:	78 1f       	adc	r23, r24
    322e:	89 1f       	adc	r24, r25
    3230:	9a 1f       	adc	r25, r26
    3232:	a1 1d       	adc	r26, r1
    3234:	68 0f       	add	r22, r24
    3236:	79 1f       	adc	r23, r25
    3238:	8a 1f       	adc	r24, r26
    323a:	91 1d       	adc	r25, r1
    323c:	a1 1d       	adc	r26, r1
    323e:	6a 0f       	add	r22, r26
    3240:	71 1d       	adc	r23, r1
    3242:	81 1d       	adc	r24, r1
    3244:	91 1d       	adc	r25, r1
    3246:	a1 1d       	adc	r26, r1
    3248:	20 d0       	rcall	.+64     	; 0x328a <__ultoa_invert+0x84>
    324a:	09 f4       	brne	.+2      	; 0x324e <__ultoa_invert+0x48>
    324c:	68 94       	set
    324e:	3f 91       	pop	r19
    3250:	2a e0       	ldi	r18, 0x0A	; 10
    3252:	26 9f       	mul	r18, r22
    3254:	11 24       	eor	r1, r1
    3256:	30 19       	sub	r19, r0
    3258:	30 5d       	subi	r19, 0xD0	; 208
    325a:	31 93       	st	Z+, r19
    325c:	de f6       	brtc	.-74     	; 0x3214 <__ultoa_invert+0xe>
    325e:	cf 01       	movw	r24, r30
    3260:	08 95       	ret
    3262:	46 2f       	mov	r20, r22
    3264:	47 70       	andi	r20, 0x07	; 7
    3266:	40 5d       	subi	r20, 0xD0	; 208
    3268:	41 93       	st	Z+, r20
    326a:	b3 e0       	ldi	r27, 0x03	; 3
    326c:	0f d0       	rcall	.+30     	; 0x328c <__ultoa_invert+0x86>
    326e:	c9 f7       	brne	.-14     	; 0x3262 <__ultoa_invert+0x5c>
    3270:	f6 cf       	rjmp	.-20     	; 0x325e <__ultoa_invert+0x58>
    3272:	46 2f       	mov	r20, r22
    3274:	4f 70       	andi	r20, 0x0F	; 15
    3276:	40 5d       	subi	r20, 0xD0	; 208
    3278:	4a 33       	cpi	r20, 0x3A	; 58
    327a:	18 f0       	brcs	.+6      	; 0x3282 <__ultoa_invert+0x7c>
    327c:	49 5d       	subi	r20, 0xD9	; 217
    327e:	31 fd       	sbrc	r19, 1
    3280:	40 52       	subi	r20, 0x20	; 32
    3282:	41 93       	st	Z+, r20
    3284:	02 d0       	rcall	.+4      	; 0x328a <__ultoa_invert+0x84>
    3286:	a9 f7       	brne	.-22     	; 0x3272 <__ultoa_invert+0x6c>
    3288:	ea cf       	rjmp	.-44     	; 0x325e <__ultoa_invert+0x58>
    328a:	b4 e0       	ldi	r27, 0x04	; 4
    328c:	a6 95       	lsr	r26
    328e:	97 95       	ror	r25
    3290:	87 95       	ror	r24
    3292:	77 95       	ror	r23
    3294:	67 95       	ror	r22
    3296:	ba 95       	dec	r27
    3298:	c9 f7       	brne	.-14     	; 0x328c <__ultoa_invert+0x86>
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	61 05       	cpc	r22, r1
    329e:	71 05       	cpc	r23, r1
    32a0:	08 95       	ret
    32a2:	9b 01       	movw	r18, r22
    32a4:	ac 01       	movw	r20, r24
    32a6:	0a 2e       	mov	r0, r26
    32a8:	06 94       	lsr	r0
    32aa:	57 95       	ror	r21
    32ac:	47 95       	ror	r20
    32ae:	37 95       	ror	r19
    32b0:	27 95       	ror	r18
    32b2:	ba 95       	dec	r27
    32b4:	c9 f7       	brne	.-14     	; 0x32a8 <__ultoa_invert+0xa2>
    32b6:	62 0f       	add	r22, r18
    32b8:	73 1f       	adc	r23, r19
    32ba:	84 1f       	adc	r24, r20
    32bc:	95 1f       	adc	r25, r21
    32be:	a0 1d       	adc	r26, r0
    32c0:	08 95       	ret

000032c2 <_exit>:
    32c2:	f8 94       	cli

000032c4 <__stop_program>:
    32c4:	ff cf       	rjmp	.-2      	; 0x32c4 <__stop_program>
